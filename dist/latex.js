(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.latexjs = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var he$1 = {exports: {}};

	/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
	he$1.exports;

	(function (module, exports) {
	(function(root) {

			// Detect free variables `exports`.
			var freeExports = exports;

			// Detect free variable `module`.
			var freeModule = module &&
				module.exports == freeExports && module;

			// Detect free variable `global`, from Node.js or Browserified code,
			// and use it as `root`.
			var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
			if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
				root = freeGlobal;
			}

			/*--------------------------------------------------------------------------*/

			// All astral symbols.
			var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
			// All ASCII symbols (not just printable ASCII) except those listed in the
			// first column of the overrides table.
			// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
			var regexAsciiWhitelist = /[\x01-\x7F]/g;
			// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
			// code points listed in the first column of the overrides table on
			// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
			var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

			var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
			var encodeMap = {'\xAD':'shy','\u200C':'zwnj','\u200D':'zwj','\u200E':'lrm','\u2063':'ic','\u2062':'it','\u2061':'af','\u200F':'rlm','\u200B':'ZeroWidthSpace','\u2060':'NoBreak','\u0311':'DownBreve','\u20DB':'tdot','\u20DC':'DotDot','\t':'Tab','\n':'NewLine','\u2008':'puncsp','\u205F':'MediumSpace','\u2009':'thinsp','\u200A':'hairsp','\u2004':'emsp13','\u2002':'ensp','\u2005':'emsp14','\u2003':'emsp','\u2007':'numsp','\xA0':'nbsp','\u205F\u200A':'ThickSpace','\u203E':'oline','_':'lowbar','\u2010':'dash','\u2013':'ndash','\u2014':'mdash','\u2015':'horbar',',':'comma',';':'semi','\u204F':'bsemi',':':'colon','\u2A74':'Colone','!':'excl','\xA1':'iexcl','?':'quest','\xBF':'iquest','.':'period','\u2025':'nldr','\u2026':'mldr','\xB7':'middot','\'':'apos','\u2018':'lsquo','\u2019':'rsquo','\u201A':'sbquo','\u2039':'lsaquo','\u203A':'rsaquo','"':'quot','\u201C':'ldquo','\u201D':'rdquo','\u201E':'bdquo','\xAB':'laquo','\xBB':'raquo','(':'lpar',')':'rpar','[':'lsqb',']':'rsqb','{':'lcub','}':'rcub','\u2308':'lceil','\u2309':'rceil','\u230A':'lfloor','\u230B':'rfloor','\u2985':'lopar','\u2986':'ropar','\u298B':'lbrke','\u298C':'rbrke','\u298D':'lbrkslu','\u298E':'rbrksld','\u298F':'lbrksld','\u2990':'rbrkslu','\u2991':'langd','\u2992':'rangd','\u2993':'lparlt','\u2994':'rpargt','\u2995':'gtlPar','\u2996':'ltrPar','\u27E6':'lobrk','\u27E7':'robrk','\u27E8':'lang','\u27E9':'rang','\u27EA':'Lang','\u27EB':'Rang','\u27EC':'loang','\u27ED':'roang','\u2772':'lbbrk','\u2773':'rbbrk','\u2016':'Vert','\xA7':'sect','\xB6':'para','@':'commat','*':'ast','/':'sol','undefined':null,'&':'amp','#':'num','%':'percnt','\u2030':'permil','\u2031':'pertenk','\u2020':'dagger','\u2021':'Dagger','\u2022':'bull','\u2043':'hybull','\u2032':'prime','\u2033':'Prime','\u2034':'tprime','\u2057':'qprime','\u2035':'bprime','\u2041':'caret','`':'grave','\xB4':'acute','\u02DC':'tilde','^':'Hat','\xAF':'macr','\u02D8':'breve','\u02D9':'dot','\xA8':'die','\u02DA':'ring','\u02DD':'dblac','\xB8':'cedil','\u02DB':'ogon','\u02C6':'circ','\u02C7':'caron','\xB0':'deg','\xA9':'copy','\xAE':'reg','\u2117':'copysr','\u2118':'wp','\u211E':'rx','\u2127':'mho','\u2129':'iiota','\u2190':'larr','\u219A':'nlarr','\u2192':'rarr','\u219B':'nrarr','\u2191':'uarr','\u2193':'darr','\u2194':'harr','\u21AE':'nharr','\u2195':'varr','\u2196':'nwarr','\u2197':'nearr','\u2198':'searr','\u2199':'swarr','\u219D':'rarrw','\u219D\u0338':'nrarrw','\u219E':'Larr','\u219F':'Uarr','\u21A0':'Rarr','\u21A1':'Darr','\u21A2':'larrtl','\u21A3':'rarrtl','\u21A4':'mapstoleft','\u21A5':'mapstoup','\u21A6':'map','\u21A7':'mapstodown','\u21A9':'larrhk','\u21AA':'rarrhk','\u21AB':'larrlp','\u21AC':'rarrlp','\u21AD':'harrw','\u21B0':'lsh','\u21B1':'rsh','\u21B2':'ldsh','\u21B3':'rdsh','\u21B5':'crarr','\u21B6':'cularr','\u21B7':'curarr','\u21BA':'olarr','\u21BB':'orarr','\u21BC':'lharu','\u21BD':'lhard','\u21BE':'uharr','\u21BF':'uharl','\u21C0':'rharu','\u21C1':'rhard','\u21C2':'dharr','\u21C3':'dharl','\u21C4':'rlarr','\u21C5':'udarr','\u21C6':'lrarr','\u21C7':'llarr','\u21C8':'uuarr','\u21C9':'rrarr','\u21CA':'ddarr','\u21CB':'lrhar','\u21CC':'rlhar','\u21D0':'lArr','\u21CD':'nlArr','\u21D1':'uArr','\u21D2':'rArr','\u21CF':'nrArr','\u21D3':'dArr','\u21D4':'iff','\u21CE':'nhArr','\u21D5':'vArr','\u21D6':'nwArr','\u21D7':'neArr','\u21D8':'seArr','\u21D9':'swArr','\u21DA':'lAarr','\u21DB':'rAarr','\u21DD':'zigrarr','\u21E4':'larrb','\u21E5':'rarrb','\u21F5':'duarr','\u21FD':'loarr','\u21FE':'roarr','\u21FF':'hoarr','\u2200':'forall','\u2201':'comp','\u2202':'part','\u2202\u0338':'npart','\u2203':'exist','\u2204':'nexist','\u2205':'empty','\u2207':'Del','\u2208':'in','\u2209':'notin','\u220B':'ni','\u220C':'notni','\u03F6':'bepsi','\u220F':'prod','\u2210':'coprod','\u2211':'sum','+':'plus','\xB1':'pm','\xF7':'div','\xD7':'times','<':'lt','\u226E':'nlt','<\u20D2':'nvlt','=':'equals','\u2260':'ne','=\u20E5':'bne','\u2A75':'Equal','>':'gt','\u226F':'ngt','>\u20D2':'nvgt','\xAC':'not','|':'vert','\xA6':'brvbar','\u2212':'minus','\u2213':'mp','\u2214':'plusdo','\u2044':'frasl','\u2216':'setmn','\u2217':'lowast','\u2218':'compfn','\u221A':'Sqrt','\u221D':'prop','\u221E':'infin','\u221F':'angrt','\u2220':'ang','\u2220\u20D2':'nang','\u2221':'angmsd','\u2222':'angsph','\u2223':'mid','\u2224':'nmid','\u2225':'par','\u2226':'npar','\u2227':'and','\u2228':'or','\u2229':'cap','\u2229\uFE00':'caps','\u222A':'cup','\u222A\uFE00':'cups','\u222B':'int','\u222C':'Int','\u222D':'tint','\u2A0C':'qint','\u222E':'oint','\u222F':'Conint','\u2230':'Cconint','\u2231':'cwint','\u2232':'cwconint','\u2233':'awconint','\u2234':'there4','\u2235':'becaus','\u2236':'ratio','\u2237':'Colon','\u2238':'minusd','\u223A':'mDDot','\u223B':'homtht','\u223C':'sim','\u2241':'nsim','\u223C\u20D2':'nvsim','\u223D':'bsim','\u223D\u0331':'race','\u223E':'ac','\u223E\u0333':'acE','\u223F':'acd','\u2240':'wr','\u2242':'esim','\u2242\u0338':'nesim','\u2243':'sime','\u2244':'nsime','\u2245':'cong','\u2247':'ncong','\u2246':'simne','\u2248':'ap','\u2249':'nap','\u224A':'ape','\u224B':'apid','\u224B\u0338':'napid','\u224C':'bcong','\u224D':'CupCap','\u226D':'NotCupCap','\u224D\u20D2':'nvap','\u224E':'bump','\u224E\u0338':'nbump','\u224F':'bumpe','\u224F\u0338':'nbumpe','\u2250':'doteq','\u2250\u0338':'nedot','\u2251':'eDot','\u2252':'efDot','\u2253':'erDot','\u2254':'colone','\u2255':'ecolon','\u2256':'ecir','\u2257':'cire','\u2259':'wedgeq','\u225A':'veeeq','\u225C':'trie','\u225F':'equest','\u2261':'equiv','\u2262':'nequiv','\u2261\u20E5':'bnequiv','\u2264':'le','\u2270':'nle','\u2264\u20D2':'nvle','\u2265':'ge','\u2271':'nge','\u2265\u20D2':'nvge','\u2266':'lE','\u2266\u0338':'nlE','\u2267':'gE','\u2267\u0338':'ngE','\u2268\uFE00':'lvnE','\u2268':'lnE','\u2269':'gnE','\u2269\uFE00':'gvnE','\u226A':'ll','\u226A\u0338':'nLtv','\u226A\u20D2':'nLt','\u226B':'gg','\u226B\u0338':'nGtv','\u226B\u20D2':'nGt','\u226C':'twixt','\u2272':'lsim','\u2274':'nlsim','\u2273':'gsim','\u2275':'ngsim','\u2276':'lg','\u2278':'ntlg','\u2277':'gl','\u2279':'ntgl','\u227A':'pr','\u2280':'npr','\u227B':'sc','\u2281':'nsc','\u227C':'prcue','\u22E0':'nprcue','\u227D':'sccue','\u22E1':'nsccue','\u227E':'prsim','\u227F':'scsim','\u227F\u0338':'NotSucceedsTilde','\u2282':'sub','\u2284':'nsub','\u2282\u20D2':'vnsub','\u2283':'sup','\u2285':'nsup','\u2283\u20D2':'vnsup','\u2286':'sube','\u2288':'nsube','\u2287':'supe','\u2289':'nsupe','\u228A\uFE00':'vsubne','\u228A':'subne','\u228B\uFE00':'vsupne','\u228B':'supne','\u228D':'cupdot','\u228E':'uplus','\u228F':'sqsub','\u228F\u0338':'NotSquareSubset','\u2290':'sqsup','\u2290\u0338':'NotSquareSuperset','\u2291':'sqsube','\u22E2':'nsqsube','\u2292':'sqsupe','\u22E3':'nsqsupe','\u2293':'sqcap','\u2293\uFE00':'sqcaps','\u2294':'sqcup','\u2294\uFE00':'sqcups','\u2295':'oplus','\u2296':'ominus','\u2297':'otimes','\u2298':'osol','\u2299':'odot','\u229A':'ocir','\u229B':'oast','\u229D':'odash','\u229E':'plusb','\u229F':'minusb','\u22A0':'timesb','\u22A1':'sdotb','\u22A2':'vdash','\u22AC':'nvdash','\u22A3':'dashv','\u22A4':'top','\u22A5':'bot','\u22A7':'models','\u22A8':'vDash','\u22AD':'nvDash','\u22A9':'Vdash','\u22AE':'nVdash','\u22AA':'Vvdash','\u22AB':'VDash','\u22AF':'nVDash','\u22B0':'prurel','\u22B2':'vltri','\u22EA':'nltri','\u22B3':'vrtri','\u22EB':'nrtri','\u22B4':'ltrie','\u22EC':'nltrie','\u22B4\u20D2':'nvltrie','\u22B5':'rtrie','\u22ED':'nrtrie','\u22B5\u20D2':'nvrtrie','\u22B6':'origof','\u22B7':'imof','\u22B8':'mumap','\u22B9':'hercon','\u22BA':'intcal','\u22BB':'veebar','\u22BD':'barvee','\u22BE':'angrtvb','\u22BF':'lrtri','\u22C0':'Wedge','\u22C1':'Vee','\u22C2':'xcap','\u22C3':'xcup','\u22C4':'diam','\u22C5':'sdot','\u22C6':'Star','\u22C7':'divonx','\u22C8':'bowtie','\u22C9':'ltimes','\u22CA':'rtimes','\u22CB':'lthree','\u22CC':'rthree','\u22CD':'bsime','\u22CE':'cuvee','\u22CF':'cuwed','\u22D0':'Sub','\u22D1':'Sup','\u22D2':'Cap','\u22D3':'Cup','\u22D4':'fork','\u22D5':'epar','\u22D6':'ltdot','\u22D7':'gtdot','\u22D8':'Ll','\u22D8\u0338':'nLl','\u22D9':'Gg','\u22D9\u0338':'nGg','\u22DA\uFE00':'lesg','\u22DA':'leg','\u22DB':'gel','\u22DB\uFE00':'gesl','\u22DE':'cuepr','\u22DF':'cuesc','\u22E6':'lnsim','\u22E7':'gnsim','\u22E8':'prnsim','\u22E9':'scnsim','\u22EE':'vellip','\u22EF':'ctdot','\u22F0':'utdot','\u22F1':'dtdot','\u22F2':'disin','\u22F3':'isinsv','\u22F4':'isins','\u22F5':'isindot','\u22F5\u0338':'notindot','\u22F6':'notinvc','\u22F7':'notinvb','\u22F9':'isinE','\u22F9\u0338':'notinE','\u22FA':'nisd','\u22FB':'xnis','\u22FC':'nis','\u22FD':'notnivc','\u22FE':'notnivb','\u2305':'barwed','\u2306':'Barwed','\u230C':'drcrop','\u230D':'dlcrop','\u230E':'urcrop','\u230F':'ulcrop','\u2310':'bnot','\u2312':'profline','\u2313':'profsurf','\u2315':'telrec','\u2316':'target','\u231C':'ulcorn','\u231D':'urcorn','\u231E':'dlcorn','\u231F':'drcorn','\u2322':'frown','\u2323':'smile','\u232D':'cylcty','\u232E':'profalar','\u2336':'topbot','\u233D':'ovbar','\u233F':'solbar','\u237C':'angzarr','\u23B0':'lmoust','\u23B1':'rmoust','\u23B4':'tbrk','\u23B5':'bbrk','\u23B6':'bbrktbrk','\u23DC':'OverParenthesis','\u23DD':'UnderParenthesis','\u23DE':'OverBrace','\u23DF':'UnderBrace','\u23E2':'trpezium','\u23E7':'elinters','\u2423':'blank','\u2500':'boxh','\u2502':'boxv','\u250C':'boxdr','\u2510':'boxdl','\u2514':'boxur','\u2518':'boxul','\u251C':'boxvr','\u2524':'boxvl','\u252C':'boxhd','\u2534':'boxhu','\u253C':'boxvh','\u2550':'boxH','\u2551':'boxV','\u2552':'boxdR','\u2553':'boxDr','\u2554':'boxDR','\u2555':'boxdL','\u2556':'boxDl','\u2557':'boxDL','\u2558':'boxuR','\u2559':'boxUr','\u255A':'boxUR','\u255B':'boxuL','\u255C':'boxUl','\u255D':'boxUL','\u255E':'boxvR','\u255F':'boxVr','\u2560':'boxVR','\u2561':'boxvL','\u2562':'boxVl','\u2563':'boxVL','\u2564':'boxHd','\u2565':'boxhD','\u2566':'boxHD','\u2567':'boxHu','\u2568':'boxhU','\u2569':'boxHU','\u256A':'boxvH','\u256B':'boxVh','\u256C':'boxVH','\u2580':'uhblk','\u2584':'lhblk','\u2588':'block','\u2591':'blk14','\u2592':'blk12','\u2593':'blk34','\u25A1':'squ','\u25AA':'squf','\u25AB':'EmptyVerySmallSquare','\u25AD':'rect','\u25AE':'marker','\u25B1':'fltns','\u25B3':'xutri','\u25B4':'utrif','\u25B5':'utri','\u25B8':'rtrif','\u25B9':'rtri','\u25BD':'xdtri','\u25BE':'dtrif','\u25BF':'dtri','\u25C2':'ltrif','\u25C3':'ltri','\u25CA':'loz','\u25CB':'cir','\u25EC':'tridot','\u25EF':'xcirc','\u25F8':'ultri','\u25F9':'urtri','\u25FA':'lltri','\u25FB':'EmptySmallSquare','\u25FC':'FilledSmallSquare','\u2605':'starf','\u2606':'star','\u260E':'phone','\u2640':'female','\u2642':'male','\u2660':'spades','\u2663':'clubs','\u2665':'hearts','\u2666':'diams','\u266A':'sung','\u2713':'check','\u2717':'cross','\u2720':'malt','\u2736':'sext','\u2758':'VerticalSeparator','\u27C8':'bsolhsub','\u27C9':'suphsol','\u27F5':'xlarr','\u27F6':'xrarr','\u27F7':'xharr','\u27F8':'xlArr','\u27F9':'xrArr','\u27FA':'xhArr','\u27FC':'xmap','\u27FF':'dzigrarr','\u2902':'nvlArr','\u2903':'nvrArr','\u2904':'nvHarr','\u2905':'Map','\u290C':'lbarr','\u290D':'rbarr','\u290E':'lBarr','\u290F':'rBarr','\u2910':'RBarr','\u2911':'DDotrahd','\u2912':'UpArrowBar','\u2913':'DownArrowBar','\u2916':'Rarrtl','\u2919':'latail','\u291A':'ratail','\u291B':'lAtail','\u291C':'rAtail','\u291D':'larrfs','\u291E':'rarrfs','\u291F':'larrbfs','\u2920':'rarrbfs','\u2923':'nwarhk','\u2924':'nearhk','\u2925':'searhk','\u2926':'swarhk','\u2927':'nwnear','\u2928':'toea','\u2929':'tosa','\u292A':'swnwar','\u2933':'rarrc','\u2933\u0338':'nrarrc','\u2935':'cudarrr','\u2936':'ldca','\u2937':'rdca','\u2938':'cudarrl','\u2939':'larrpl','\u293C':'curarrm','\u293D':'cularrp','\u2945':'rarrpl','\u2948':'harrcir','\u2949':'Uarrocir','\u294A':'lurdshar','\u294B':'ldrushar','\u294E':'LeftRightVector','\u294F':'RightUpDownVector','\u2950':'DownLeftRightVector','\u2951':'LeftUpDownVector','\u2952':'LeftVectorBar','\u2953':'RightVectorBar','\u2954':'RightUpVectorBar','\u2955':'RightDownVectorBar','\u2956':'DownLeftVectorBar','\u2957':'DownRightVectorBar','\u2958':'LeftUpVectorBar','\u2959':'LeftDownVectorBar','\u295A':'LeftTeeVector','\u295B':'RightTeeVector','\u295C':'RightUpTeeVector','\u295D':'RightDownTeeVector','\u295E':'DownLeftTeeVector','\u295F':'DownRightTeeVector','\u2960':'LeftUpTeeVector','\u2961':'LeftDownTeeVector','\u2962':'lHar','\u2963':'uHar','\u2964':'rHar','\u2965':'dHar','\u2966':'luruhar','\u2967':'ldrdhar','\u2968':'ruluhar','\u2969':'rdldhar','\u296A':'lharul','\u296B':'llhard','\u296C':'rharul','\u296D':'lrhard','\u296E':'udhar','\u296F':'duhar','\u2970':'RoundImplies','\u2971':'erarr','\u2972':'simrarr','\u2973':'larrsim','\u2974':'rarrsim','\u2975':'rarrap','\u2976':'ltlarr','\u2978':'gtrarr','\u2979':'subrarr','\u297B':'suplarr','\u297C':'lfisht','\u297D':'rfisht','\u297E':'ufisht','\u297F':'dfisht','\u299A':'vzigzag','\u299C':'vangrt','\u299D':'angrtvbd','\u29A4':'ange','\u29A5':'range','\u29A6':'dwangle','\u29A7':'uwangle','\u29A8':'angmsdaa','\u29A9':'angmsdab','\u29AA':'angmsdac','\u29AB':'angmsdad','\u29AC':'angmsdae','\u29AD':'angmsdaf','\u29AE':'angmsdag','\u29AF':'angmsdah','\u29B0':'bemptyv','\u29B1':'demptyv','\u29B2':'cemptyv','\u29B3':'raemptyv','\u29B4':'laemptyv','\u29B5':'ohbar','\u29B6':'omid','\u29B7':'opar','\u29B9':'operp','\u29BB':'olcross','\u29BC':'odsold','\u29BE':'olcir','\u29BF':'ofcir','\u29C0':'olt','\u29C1':'ogt','\u29C2':'cirscir','\u29C3':'cirE','\u29C4':'solb','\u29C5':'bsolb','\u29C9':'boxbox','\u29CD':'trisb','\u29CE':'rtriltri','\u29CF':'LeftTriangleBar','\u29CF\u0338':'NotLeftTriangleBar','\u29D0':'RightTriangleBar','\u29D0\u0338':'NotRightTriangleBar','\u29DC':'iinfin','\u29DD':'infintie','\u29DE':'nvinfin','\u29E3':'eparsl','\u29E4':'smeparsl','\u29E5':'eqvparsl','\u29EB':'lozf','\u29F4':'RuleDelayed','\u29F6':'dsol','\u2A00':'xodot','\u2A01':'xoplus','\u2A02':'xotime','\u2A04':'xuplus','\u2A06':'xsqcup','\u2A0D':'fpartint','\u2A10':'cirfnint','\u2A11':'awint','\u2A12':'rppolint','\u2A13':'scpolint','\u2A14':'npolint','\u2A15':'pointint','\u2A16':'quatint','\u2A17':'intlarhk','\u2A22':'pluscir','\u2A23':'plusacir','\u2A24':'simplus','\u2A25':'plusdu','\u2A26':'plussim','\u2A27':'plustwo','\u2A29':'mcomma','\u2A2A':'minusdu','\u2A2D':'loplus','\u2A2E':'roplus','\u2A2F':'Cross','\u2A30':'timesd','\u2A31':'timesbar','\u2A33':'smashp','\u2A34':'lotimes','\u2A35':'rotimes','\u2A36':'otimesas','\u2A37':'Otimes','\u2A38':'odiv','\u2A39':'triplus','\u2A3A':'triminus','\u2A3B':'tritime','\u2A3C':'iprod','\u2A3F':'amalg','\u2A40':'capdot','\u2A42':'ncup','\u2A43':'ncap','\u2A44':'capand','\u2A45':'cupor','\u2A46':'cupcap','\u2A47':'capcup','\u2A48':'cupbrcap','\u2A49':'capbrcup','\u2A4A':'cupcup','\u2A4B':'capcap','\u2A4C':'ccups','\u2A4D':'ccaps','\u2A50':'ccupssm','\u2A53':'And','\u2A54':'Or','\u2A55':'andand','\u2A56':'oror','\u2A57':'orslope','\u2A58':'andslope','\u2A5A':'andv','\u2A5B':'orv','\u2A5C':'andd','\u2A5D':'ord','\u2A5F':'wedbar','\u2A66':'sdote','\u2A6A':'simdot','\u2A6D':'congdot','\u2A6D\u0338':'ncongdot','\u2A6E':'easter','\u2A6F':'apacir','\u2A70':'apE','\u2A70\u0338':'napE','\u2A71':'eplus','\u2A72':'pluse','\u2A73':'Esim','\u2A77':'eDDot','\u2A78':'equivDD','\u2A79':'ltcir','\u2A7A':'gtcir','\u2A7B':'ltquest','\u2A7C':'gtquest','\u2A7D':'les','\u2A7D\u0338':'nles','\u2A7E':'ges','\u2A7E\u0338':'nges','\u2A7F':'lesdot','\u2A80':'gesdot','\u2A81':'lesdoto','\u2A82':'gesdoto','\u2A83':'lesdotor','\u2A84':'gesdotol','\u2A85':'lap','\u2A86':'gap','\u2A87':'lne','\u2A88':'gne','\u2A89':'lnap','\u2A8A':'gnap','\u2A8B':'lEg','\u2A8C':'gEl','\u2A8D':'lsime','\u2A8E':'gsime','\u2A8F':'lsimg','\u2A90':'gsiml','\u2A91':'lgE','\u2A92':'glE','\u2A93':'lesges','\u2A94':'gesles','\u2A95':'els','\u2A96':'egs','\u2A97':'elsdot','\u2A98':'egsdot','\u2A99':'el','\u2A9A':'eg','\u2A9D':'siml','\u2A9E':'simg','\u2A9F':'simlE','\u2AA0':'simgE','\u2AA1':'LessLess','\u2AA1\u0338':'NotNestedLessLess','\u2AA2':'GreaterGreater','\u2AA2\u0338':'NotNestedGreaterGreater','\u2AA4':'glj','\u2AA5':'gla','\u2AA6':'ltcc','\u2AA7':'gtcc','\u2AA8':'lescc','\u2AA9':'gescc','\u2AAA':'smt','\u2AAB':'lat','\u2AAC':'smte','\u2AAC\uFE00':'smtes','\u2AAD':'late','\u2AAD\uFE00':'lates','\u2AAE':'bumpE','\u2AAF':'pre','\u2AAF\u0338':'npre','\u2AB0':'sce','\u2AB0\u0338':'nsce','\u2AB3':'prE','\u2AB4':'scE','\u2AB5':'prnE','\u2AB6':'scnE','\u2AB7':'prap','\u2AB8':'scap','\u2AB9':'prnap','\u2ABA':'scnap','\u2ABB':'Pr','\u2ABC':'Sc','\u2ABD':'subdot','\u2ABE':'supdot','\u2ABF':'subplus','\u2AC0':'supplus','\u2AC1':'submult','\u2AC2':'supmult','\u2AC3':'subedot','\u2AC4':'supedot','\u2AC5':'subE','\u2AC5\u0338':'nsubE','\u2AC6':'supE','\u2AC6\u0338':'nsupE','\u2AC7':'subsim','\u2AC8':'supsim','\u2ACB\uFE00':'vsubnE','\u2ACB':'subnE','\u2ACC\uFE00':'vsupnE','\u2ACC':'supnE','\u2ACF':'csub','\u2AD0':'csup','\u2AD1':'csube','\u2AD2':'csupe','\u2AD3':'subsup','\u2AD4':'supsub','\u2AD5':'subsub','\u2AD6':'supsup','\u2AD7':'suphsub','\u2AD8':'supdsub','\u2AD9':'forkv','\u2ADA':'topfork','\u2ADB':'mlcp','\u2AE4':'Dashv','\u2AE6':'Vdashl','\u2AE7':'Barv','\u2AE8':'vBar','\u2AE9':'vBarv','\u2AEB':'Vbar','\u2AEC':'Not','\u2AED':'bNot','\u2AEE':'rnmid','\u2AEF':'cirmid','\u2AF0':'midcir','\u2AF1':'topcir','\u2AF2':'nhpar','\u2AF3':'parsim','\u2AFD':'parsl','\u2AFD\u20E5':'nparsl','\u266D':'flat','\u266E':'natur','\u266F':'sharp','\xA4':'curren','\xA2':'cent','$':'dollar','\xA3':'pound','\xA5':'yen','\u20AC':'euro','\xB9':'sup1','\xBD':'half','\u2153':'frac13','\xBC':'frac14','\u2155':'frac15','\u2159':'frac16','\u215B':'frac18','\xB2':'sup2','\u2154':'frac23','\u2156':'frac25','\xB3':'sup3','\xBE':'frac34','\u2157':'frac35','\u215C':'frac38','\u2158':'frac45','\u215A':'frac56','\u215D':'frac58','\u215E':'frac78','\uD835\uDCB6':'ascr','\uD835\uDD52':'aopf','\uD835\uDD1E':'afr','\uD835\uDD38':'Aopf','\uD835\uDD04':'Afr','\uD835\uDC9C':'Ascr','\xAA':'ordf','\xE1':'aacute','\xC1':'Aacute','\xE0':'agrave','\xC0':'Agrave','\u0103':'abreve','\u0102':'Abreve','\xE2':'acirc','\xC2':'Acirc','\xE5':'aring','\xC5':'angst','\xE4':'auml','\xC4':'Auml','\xE3':'atilde','\xC3':'Atilde','\u0105':'aogon','\u0104':'Aogon','\u0101':'amacr','\u0100':'Amacr','\xE6':'aelig','\xC6':'AElig','\uD835\uDCB7':'bscr','\uD835\uDD53':'bopf','\uD835\uDD1F':'bfr','\uD835\uDD39':'Bopf','\u212C':'Bscr','\uD835\uDD05':'Bfr','\uD835\uDD20':'cfr','\uD835\uDCB8':'cscr','\uD835\uDD54':'copf','\u212D':'Cfr','\uD835\uDC9E':'Cscr','\u2102':'Copf','\u0107':'cacute','\u0106':'Cacute','\u0109':'ccirc','\u0108':'Ccirc','\u010D':'ccaron','\u010C':'Ccaron','\u010B':'cdot','\u010A':'Cdot','\xE7':'ccedil','\xC7':'Ccedil','\u2105':'incare','\uD835\uDD21':'dfr','\u2146':'dd','\uD835\uDD55':'dopf','\uD835\uDCB9':'dscr','\uD835\uDC9F':'Dscr','\uD835\uDD07':'Dfr','\u2145':'DD','\uD835\uDD3B':'Dopf','\u010F':'dcaron','\u010E':'Dcaron','\u0111':'dstrok','\u0110':'Dstrok','\xF0':'eth','\xD0':'ETH','\u2147':'ee','\u212F':'escr','\uD835\uDD22':'efr','\uD835\uDD56':'eopf','\u2130':'Escr','\uD835\uDD08':'Efr','\uD835\uDD3C':'Eopf','\xE9':'eacute','\xC9':'Eacute','\xE8':'egrave','\xC8':'Egrave','\xEA':'ecirc','\xCA':'Ecirc','\u011B':'ecaron','\u011A':'Ecaron','\xEB':'euml','\xCB':'Euml','\u0117':'edot','\u0116':'Edot','\u0119':'eogon','\u0118':'Eogon','\u0113':'emacr','\u0112':'Emacr','\uD835\uDD23':'ffr','\uD835\uDD57':'fopf','\uD835\uDCBB':'fscr','\uD835\uDD09':'Ffr','\uD835\uDD3D':'Fopf','\u2131':'Fscr','\uFB00':'fflig','\uFB03':'ffilig','\uFB04':'ffllig','\uFB01':'filig','fj':'fjlig','\uFB02':'fllig','\u0192':'fnof','\u210A':'gscr','\uD835\uDD58':'gopf','\uD835\uDD24':'gfr','\uD835\uDCA2':'Gscr','\uD835\uDD3E':'Gopf','\uD835\uDD0A':'Gfr','\u01F5':'gacute','\u011F':'gbreve','\u011E':'Gbreve','\u011D':'gcirc','\u011C':'Gcirc','\u0121':'gdot','\u0120':'Gdot','\u0122':'Gcedil','\uD835\uDD25':'hfr','\u210E':'planckh','\uD835\uDCBD':'hscr','\uD835\uDD59':'hopf','\u210B':'Hscr','\u210C':'Hfr','\u210D':'Hopf','\u0125':'hcirc','\u0124':'Hcirc','\u210F':'hbar','\u0127':'hstrok','\u0126':'Hstrok','\uD835\uDD5A':'iopf','\uD835\uDD26':'ifr','\uD835\uDCBE':'iscr','\u2148':'ii','\uD835\uDD40':'Iopf','\u2110':'Iscr','\u2111':'Im','\xED':'iacute','\xCD':'Iacute','\xEC':'igrave','\xCC':'Igrave','\xEE':'icirc','\xCE':'Icirc','\xEF':'iuml','\xCF':'Iuml','\u0129':'itilde','\u0128':'Itilde','\u0130':'Idot','\u012F':'iogon','\u012E':'Iogon','\u012B':'imacr','\u012A':'Imacr','\u0133':'ijlig','\u0132':'IJlig','\u0131':'imath','\uD835\uDCBF':'jscr','\uD835\uDD5B':'jopf','\uD835\uDD27':'jfr','\uD835\uDCA5':'Jscr','\uD835\uDD0D':'Jfr','\uD835\uDD41':'Jopf','\u0135':'jcirc','\u0134':'Jcirc','\u0237':'jmath','\uD835\uDD5C':'kopf','\uD835\uDCC0':'kscr','\uD835\uDD28':'kfr','\uD835\uDCA6':'Kscr','\uD835\uDD42':'Kopf','\uD835\uDD0E':'Kfr','\u0137':'kcedil','\u0136':'Kcedil','\uD835\uDD29':'lfr','\uD835\uDCC1':'lscr','\u2113':'ell','\uD835\uDD5D':'lopf','\u2112':'Lscr','\uD835\uDD0F':'Lfr','\uD835\uDD43':'Lopf','\u013A':'lacute','\u0139':'Lacute','\u013E':'lcaron','\u013D':'Lcaron','\u013C':'lcedil','\u013B':'Lcedil','\u0142':'lstrok','\u0141':'Lstrok','\u0140':'lmidot','\u013F':'Lmidot','\uD835\uDD2A':'mfr','\uD835\uDD5E':'mopf','\uD835\uDCC2':'mscr','\uD835\uDD10':'Mfr','\uD835\uDD44':'Mopf','\u2133':'Mscr','\uD835\uDD2B':'nfr','\uD835\uDD5F':'nopf','\uD835\uDCC3':'nscr','\u2115':'Nopf','\uD835\uDCA9':'Nscr','\uD835\uDD11':'Nfr','\u0144':'nacute','\u0143':'Nacute','\u0148':'ncaron','\u0147':'Ncaron','\xF1':'ntilde','\xD1':'Ntilde','\u0146':'ncedil','\u0145':'Ncedil','\u2116':'numero','\u014B':'eng','\u014A':'ENG','\uD835\uDD60':'oopf','\uD835\uDD2C':'ofr','\u2134':'oscr','\uD835\uDCAA':'Oscr','\uD835\uDD12':'Ofr','\uD835\uDD46':'Oopf','\xBA':'ordm','\xF3':'oacute','\xD3':'Oacute','\xF2':'ograve','\xD2':'Ograve','\xF4':'ocirc','\xD4':'Ocirc','\xF6':'ouml','\xD6':'Ouml','\u0151':'odblac','\u0150':'Odblac','\xF5':'otilde','\xD5':'Otilde','\xF8':'oslash','\xD8':'Oslash','\u014D':'omacr','\u014C':'Omacr','\u0153':'oelig','\u0152':'OElig','\uD835\uDD2D':'pfr','\uD835\uDCC5':'pscr','\uD835\uDD61':'popf','\u2119':'Popf','\uD835\uDD13':'Pfr','\uD835\uDCAB':'Pscr','\uD835\uDD62':'qopf','\uD835\uDD2E':'qfr','\uD835\uDCC6':'qscr','\uD835\uDCAC':'Qscr','\uD835\uDD14':'Qfr','\u211A':'Qopf','\u0138':'kgreen','\uD835\uDD2F':'rfr','\uD835\uDD63':'ropf','\uD835\uDCC7':'rscr','\u211B':'Rscr','\u211C':'Re','\u211D':'Ropf','\u0155':'racute','\u0154':'Racute','\u0159':'rcaron','\u0158':'Rcaron','\u0157':'rcedil','\u0156':'Rcedil','\uD835\uDD64':'sopf','\uD835\uDCC8':'sscr','\uD835\uDD30':'sfr','\uD835\uDD4A':'Sopf','\uD835\uDD16':'Sfr','\uD835\uDCAE':'Sscr','\u24C8':'oS','\u015B':'sacute','\u015A':'Sacute','\u015D':'scirc','\u015C':'Scirc','\u0161':'scaron','\u0160':'Scaron','\u015F':'scedil','\u015E':'Scedil','\xDF':'szlig','\uD835\uDD31':'tfr','\uD835\uDCC9':'tscr','\uD835\uDD65':'topf','\uD835\uDCAF':'Tscr','\uD835\uDD17':'Tfr','\uD835\uDD4B':'Topf','\u0165':'tcaron','\u0164':'Tcaron','\u0163':'tcedil','\u0162':'Tcedil','\u2122':'trade','\u0167':'tstrok','\u0166':'Tstrok','\uD835\uDCCA':'uscr','\uD835\uDD66':'uopf','\uD835\uDD32':'ufr','\uD835\uDD4C':'Uopf','\uD835\uDD18':'Ufr','\uD835\uDCB0':'Uscr','\xFA':'uacute','\xDA':'Uacute','\xF9':'ugrave','\xD9':'Ugrave','\u016D':'ubreve','\u016C':'Ubreve','\xFB':'ucirc','\xDB':'Ucirc','\u016F':'uring','\u016E':'Uring','\xFC':'uuml','\xDC':'Uuml','\u0171':'udblac','\u0170':'Udblac','\u0169':'utilde','\u0168':'Utilde','\u0173':'uogon','\u0172':'Uogon','\u016B':'umacr','\u016A':'Umacr','\uD835\uDD33':'vfr','\uD835\uDD67':'vopf','\uD835\uDCCB':'vscr','\uD835\uDD19':'Vfr','\uD835\uDD4D':'Vopf','\uD835\uDCB1':'Vscr','\uD835\uDD68':'wopf','\uD835\uDCCC':'wscr','\uD835\uDD34':'wfr','\uD835\uDCB2':'Wscr','\uD835\uDD4E':'Wopf','\uD835\uDD1A':'Wfr','\u0175':'wcirc','\u0174':'Wcirc','\uD835\uDD35':'xfr','\uD835\uDCCD':'xscr','\uD835\uDD69':'xopf','\uD835\uDD4F':'Xopf','\uD835\uDD1B':'Xfr','\uD835\uDCB3':'Xscr','\uD835\uDD36':'yfr','\uD835\uDCCE':'yscr','\uD835\uDD6A':'yopf','\uD835\uDCB4':'Yscr','\uD835\uDD1C':'Yfr','\uD835\uDD50':'Yopf','\xFD':'yacute','\xDD':'Yacute','\u0177':'ycirc','\u0176':'Ycirc','\xFF':'yuml','\u0178':'Yuml','\uD835\uDCCF':'zscr','\uD835\uDD37':'zfr','\uD835\uDD6B':'zopf','\u2128':'Zfr','\u2124':'Zopf','\uD835\uDCB5':'Zscr','\u017A':'zacute','\u0179':'Zacute','\u017E':'zcaron','\u017D':'Zcaron','\u017C':'zdot','\u017B':'Zdot','\u01B5':'imped','\xFE':'thorn','\xDE':'THORN','\u0149':'napos','\u03B1':'alpha','\u0391':'Alpha','\u03B2':'beta','\u0392':'Beta','\u03B3':'gamma','\u0393':'Gamma','\u03B4':'delta','\u0394':'Delta','\u03B5':'epsi','\u03F5':'epsiv','\u0395':'Epsilon','\u03DD':'gammad','\u03DC':'Gammad','\u03B6':'zeta','\u0396':'Zeta','\u03B7':'eta','\u0397':'Eta','\u03B8':'theta','\u03D1':'thetav','\u0398':'Theta','\u03B9':'iota','\u0399':'Iota','\u03BA':'kappa','\u03F0':'kappav','\u039A':'Kappa','\u03BB':'lambda','\u039B':'Lambda','\u03BC':'mu','\xB5':'micro','\u039C':'Mu','\u03BD':'nu','\u039D':'Nu','\u03BE':'xi','\u039E':'Xi','\u03BF':'omicron','\u039F':'Omicron','\u03C0':'pi','\u03D6':'piv','\u03A0':'Pi','\u03C1':'rho','\u03F1':'rhov','\u03A1':'Rho','\u03C3':'sigma','\u03A3':'Sigma','\u03C2':'sigmaf','\u03C4':'tau','\u03A4':'Tau','\u03C5':'upsi','\u03A5':'Upsilon','\u03D2':'Upsi','\u03C6':'phi','\u03D5':'phiv','\u03A6':'Phi','\u03C7':'chi','\u03A7':'Chi','\u03C8':'psi','\u03A8':'Psi','\u03C9':'omega','\u03A9':'ohm','\u0430':'acy','\u0410':'Acy','\u0431':'bcy','\u0411':'Bcy','\u0432':'vcy','\u0412':'Vcy','\u0433':'gcy','\u0413':'Gcy','\u0453':'gjcy','\u0403':'GJcy','\u0434':'dcy','\u0414':'Dcy','\u0452':'djcy','\u0402':'DJcy','\u0435':'iecy','\u0415':'IEcy','\u0451':'iocy','\u0401':'IOcy','\u0454':'jukcy','\u0404':'Jukcy','\u0436':'zhcy','\u0416':'ZHcy','\u0437':'zcy','\u0417':'Zcy','\u0455':'dscy','\u0405':'DScy','\u0438':'icy','\u0418':'Icy','\u0456':'iukcy','\u0406':'Iukcy','\u0457':'yicy','\u0407':'YIcy','\u0439':'jcy','\u0419':'Jcy','\u0458':'jsercy','\u0408':'Jsercy','\u043A':'kcy','\u041A':'Kcy','\u045C':'kjcy','\u040C':'KJcy','\u043B':'lcy','\u041B':'Lcy','\u0459':'ljcy','\u0409':'LJcy','\u043C':'mcy','\u041C':'Mcy','\u043D':'ncy','\u041D':'Ncy','\u045A':'njcy','\u040A':'NJcy','\u043E':'ocy','\u041E':'Ocy','\u043F':'pcy','\u041F':'Pcy','\u0440':'rcy','\u0420':'Rcy','\u0441':'scy','\u0421':'Scy','\u0442':'tcy','\u0422':'Tcy','\u045B':'tshcy','\u040B':'TSHcy','\u0443':'ucy','\u0423':'Ucy','\u045E':'ubrcy','\u040E':'Ubrcy','\u0444':'fcy','\u0424':'Fcy','\u0445':'khcy','\u0425':'KHcy','\u0446':'tscy','\u0426':'TScy','\u0447':'chcy','\u0427':'CHcy','\u045F':'dzcy','\u040F':'DZcy','\u0448':'shcy','\u0428':'SHcy','\u0449':'shchcy','\u0429':'SHCHcy','\u044A':'hardcy','\u042A':'HARDcy','\u044B':'ycy','\u042B':'Ycy','\u044C':'softcy','\u042C':'SOFTcy','\u044D':'ecy','\u042D':'Ecy','\u044E':'yucy','\u042E':'YUcy','\u044F':'yacy','\u042F':'YAcy','\u2135':'aleph','\u2136':'beth','\u2137':'gimel','\u2138':'daleth'};

			var regexEscape = /["&'<>`]/g;
			var escapeMap = {
				'"': '&quot;',
				'&': '&amp;',
				'\'': '&#x27;',
				'<': '&lt;',
				// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
				// following is not strictly necessary unless it’s part of a tag or an
				// unquoted attribute value. We’re only escaping it to support those
				// situations, and for XML support.
				'>': '&gt;',
				// In Internet Explorer ≤ 8, the backtick character can be used
				// to break out of (un)quoted attribute values or HTML comments.
				// See http://html5sec.org/#102, http://html5sec.org/#108, and
				// http://html5sec.org/#133.
				'`': '&#x60;'
			};

			var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
			var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
			var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
			var decodeMap = {'aacute':'\xE1','Aacute':'\xC1','abreve':'\u0103','Abreve':'\u0102','ac':'\u223E','acd':'\u223F','acE':'\u223E\u0333','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','acy':'\u0430','Acy':'\u0410','aelig':'\xE6','AElig':'\xC6','af':'\u2061','afr':'\uD835\uDD1E','Afr':'\uD835\uDD04','agrave':'\xE0','Agrave':'\xC0','alefsym':'\u2135','aleph':'\u2135','alpha':'\u03B1','Alpha':'\u0391','amacr':'\u0101','Amacr':'\u0100','amalg':'\u2A3F','amp':'&','AMP':'&','and':'\u2227','And':'\u2A53','andand':'\u2A55','andd':'\u2A5C','andslope':'\u2A58','andv':'\u2A5A','ang':'\u2220','ange':'\u29A4','angle':'\u2220','angmsd':'\u2221','angmsdaa':'\u29A8','angmsdab':'\u29A9','angmsdac':'\u29AA','angmsdad':'\u29AB','angmsdae':'\u29AC','angmsdaf':'\u29AD','angmsdag':'\u29AE','angmsdah':'\u29AF','angrt':'\u221F','angrtvb':'\u22BE','angrtvbd':'\u299D','angsph':'\u2222','angst':'\xC5','angzarr':'\u237C','aogon':'\u0105','Aogon':'\u0104','aopf':'\uD835\uDD52','Aopf':'\uD835\uDD38','ap':'\u2248','apacir':'\u2A6F','ape':'\u224A','apE':'\u2A70','apid':'\u224B','apos':'\'','ApplyFunction':'\u2061','approx':'\u2248','approxeq':'\u224A','aring':'\xE5','Aring':'\xC5','ascr':'\uD835\uDCB6','Ascr':'\uD835\uDC9C','Assign':'\u2254','ast':'*','asymp':'\u2248','asympeq':'\u224D','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','awconint':'\u2233','awint':'\u2A11','backcong':'\u224C','backepsilon':'\u03F6','backprime':'\u2035','backsim':'\u223D','backsimeq':'\u22CD','Backslash':'\u2216','Barv':'\u2AE7','barvee':'\u22BD','barwed':'\u2305','Barwed':'\u2306','barwedge':'\u2305','bbrk':'\u23B5','bbrktbrk':'\u23B6','bcong':'\u224C','bcy':'\u0431','Bcy':'\u0411','bdquo':'\u201E','becaus':'\u2235','because':'\u2235','Because':'\u2235','bemptyv':'\u29B0','bepsi':'\u03F6','bernou':'\u212C','Bernoullis':'\u212C','beta':'\u03B2','Beta':'\u0392','beth':'\u2136','between':'\u226C','bfr':'\uD835\uDD1F','Bfr':'\uD835\uDD05','bigcap':'\u22C2','bigcirc':'\u25EF','bigcup':'\u22C3','bigodot':'\u2A00','bigoplus':'\u2A01','bigotimes':'\u2A02','bigsqcup':'\u2A06','bigstar':'\u2605','bigtriangledown':'\u25BD','bigtriangleup':'\u25B3','biguplus':'\u2A04','bigvee':'\u22C1','bigwedge':'\u22C0','bkarow':'\u290D','blacklozenge':'\u29EB','blacksquare':'\u25AA','blacktriangle':'\u25B4','blacktriangledown':'\u25BE','blacktriangleleft':'\u25C2','blacktriangleright':'\u25B8','blank':'\u2423','blk12':'\u2592','blk14':'\u2591','blk34':'\u2593','block':'\u2588','bne':'=\u20E5','bnequiv':'\u2261\u20E5','bnot':'\u2310','bNot':'\u2AED','bopf':'\uD835\uDD53','Bopf':'\uD835\uDD39','bot':'\u22A5','bottom':'\u22A5','bowtie':'\u22C8','boxbox':'\u29C9','boxdl':'\u2510','boxdL':'\u2555','boxDl':'\u2556','boxDL':'\u2557','boxdr':'\u250C','boxdR':'\u2552','boxDr':'\u2553','boxDR':'\u2554','boxh':'\u2500','boxH':'\u2550','boxhd':'\u252C','boxhD':'\u2565','boxHd':'\u2564','boxHD':'\u2566','boxhu':'\u2534','boxhU':'\u2568','boxHu':'\u2567','boxHU':'\u2569','boxminus':'\u229F','boxplus':'\u229E','boxtimes':'\u22A0','boxul':'\u2518','boxuL':'\u255B','boxUl':'\u255C','boxUL':'\u255D','boxur':'\u2514','boxuR':'\u2558','boxUr':'\u2559','boxUR':'\u255A','boxv':'\u2502','boxV':'\u2551','boxvh':'\u253C','boxvH':'\u256A','boxVh':'\u256B','boxVH':'\u256C','boxvl':'\u2524','boxvL':'\u2561','boxVl':'\u2562','boxVL':'\u2563','boxvr':'\u251C','boxvR':'\u255E','boxVr':'\u255F','boxVR':'\u2560','bprime':'\u2035','breve':'\u02D8','Breve':'\u02D8','brvbar':'\xA6','bscr':'\uD835\uDCB7','Bscr':'\u212C','bsemi':'\u204F','bsim':'\u223D','bsime':'\u22CD','bsol':'\\','bsolb':'\u29C5','bsolhsub':'\u27C8','bull':'\u2022','bullet':'\u2022','bump':'\u224E','bumpe':'\u224F','bumpE':'\u2AAE','bumpeq':'\u224F','Bumpeq':'\u224E','cacute':'\u0107','Cacute':'\u0106','cap':'\u2229','Cap':'\u22D2','capand':'\u2A44','capbrcup':'\u2A49','capcap':'\u2A4B','capcup':'\u2A47','capdot':'\u2A40','CapitalDifferentialD':'\u2145','caps':'\u2229\uFE00','caret':'\u2041','caron':'\u02C7','Cayleys':'\u212D','ccaps':'\u2A4D','ccaron':'\u010D','Ccaron':'\u010C','ccedil':'\xE7','Ccedil':'\xC7','ccirc':'\u0109','Ccirc':'\u0108','Cconint':'\u2230','ccups':'\u2A4C','ccupssm':'\u2A50','cdot':'\u010B','Cdot':'\u010A','cedil':'\xB8','Cedilla':'\xB8','cemptyv':'\u29B2','cent':'\xA2','centerdot':'\xB7','CenterDot':'\xB7','cfr':'\uD835\uDD20','Cfr':'\u212D','chcy':'\u0447','CHcy':'\u0427','check':'\u2713','checkmark':'\u2713','chi':'\u03C7','Chi':'\u03A7','cir':'\u25CB','circ':'\u02C6','circeq':'\u2257','circlearrowleft':'\u21BA','circlearrowright':'\u21BB','circledast':'\u229B','circledcirc':'\u229A','circleddash':'\u229D','CircleDot':'\u2299','circledR':'\xAE','circledS':'\u24C8','CircleMinus':'\u2296','CirclePlus':'\u2295','CircleTimes':'\u2297','cire':'\u2257','cirE':'\u29C3','cirfnint':'\u2A10','cirmid':'\u2AEF','cirscir':'\u29C2','ClockwiseContourIntegral':'\u2232','CloseCurlyDoubleQuote':'\u201D','CloseCurlyQuote':'\u2019','clubs':'\u2663','clubsuit':'\u2663','colon':':','Colon':'\u2237','colone':'\u2254','Colone':'\u2A74','coloneq':'\u2254','comma':',','commat':'@','comp':'\u2201','compfn':'\u2218','complement':'\u2201','complexes':'\u2102','cong':'\u2245','congdot':'\u2A6D','Congruent':'\u2261','conint':'\u222E','Conint':'\u222F','ContourIntegral':'\u222E','copf':'\uD835\uDD54','Copf':'\u2102','coprod':'\u2210','Coproduct':'\u2210','copy':'\xA9','COPY':'\xA9','copysr':'\u2117','CounterClockwiseContourIntegral':'\u2233','crarr':'\u21B5','cross':'\u2717','Cross':'\u2A2F','cscr':'\uD835\uDCB8','Cscr':'\uD835\uDC9E','csub':'\u2ACF','csube':'\u2AD1','csup':'\u2AD0','csupe':'\u2AD2','ctdot':'\u22EF','cudarrl':'\u2938','cudarrr':'\u2935','cuepr':'\u22DE','cuesc':'\u22DF','cularr':'\u21B6','cularrp':'\u293D','cup':'\u222A','Cup':'\u22D3','cupbrcap':'\u2A48','cupcap':'\u2A46','CupCap':'\u224D','cupcup':'\u2A4A','cupdot':'\u228D','cupor':'\u2A45','cups':'\u222A\uFE00','curarr':'\u21B7','curarrm':'\u293C','curlyeqprec':'\u22DE','curlyeqsucc':'\u22DF','curlyvee':'\u22CE','curlywedge':'\u22CF','curren':'\xA4','curvearrowleft':'\u21B6','curvearrowright':'\u21B7','cuvee':'\u22CE','cuwed':'\u22CF','cwconint':'\u2232','cwint':'\u2231','cylcty':'\u232D','dagger':'\u2020','Dagger':'\u2021','daleth':'\u2138','darr':'\u2193','dArr':'\u21D3','Darr':'\u21A1','dash':'\u2010','dashv':'\u22A3','Dashv':'\u2AE4','dbkarow':'\u290F','dblac':'\u02DD','dcaron':'\u010F','Dcaron':'\u010E','dcy':'\u0434','Dcy':'\u0414','dd':'\u2146','DD':'\u2145','ddagger':'\u2021','ddarr':'\u21CA','DDotrahd':'\u2911','ddotseq':'\u2A77','deg':'\xB0','Del':'\u2207','delta':'\u03B4','Delta':'\u0394','demptyv':'\u29B1','dfisht':'\u297F','dfr':'\uD835\uDD21','Dfr':'\uD835\uDD07','dHar':'\u2965','dharl':'\u21C3','dharr':'\u21C2','DiacriticalAcute':'\xB4','DiacriticalDot':'\u02D9','DiacriticalDoubleAcute':'\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\u02DC','diam':'\u22C4','diamond':'\u22C4','Diamond':'\u22C4','diamondsuit':'\u2666','diams':'\u2666','die':'\xA8','DifferentialD':'\u2146','digamma':'\u03DD','disin':'\u22F2','div':'\xF7','divide':'\xF7','divideontimes':'\u22C7','divonx':'\u22C7','djcy':'\u0452','DJcy':'\u0402','dlcorn':'\u231E','dlcrop':'\u230D','dollar':'$','dopf':'\uD835\uDD55','Dopf':'\uD835\uDD3B','dot':'\u02D9','Dot':'\xA8','DotDot':'\u20DC','doteq':'\u2250','doteqdot':'\u2251','DotEqual':'\u2250','dotminus':'\u2238','dotplus':'\u2214','dotsquare':'\u22A1','doublebarwedge':'\u2306','DoubleContourIntegral':'\u222F','DoubleDot':'\xA8','DoubleDownArrow':'\u21D3','DoubleLeftArrow':'\u21D0','DoubleLeftRightArrow':'\u21D4','DoubleLeftTee':'\u2AE4','DoubleLongLeftArrow':'\u27F8','DoubleLongLeftRightArrow':'\u27FA','DoubleLongRightArrow':'\u27F9','DoubleRightArrow':'\u21D2','DoubleRightTee':'\u22A8','DoubleUpArrow':'\u21D1','DoubleUpDownArrow':'\u21D5','DoubleVerticalBar':'\u2225','downarrow':'\u2193','Downarrow':'\u21D3','DownArrow':'\u2193','DownArrowBar':'\u2913','DownArrowUpArrow':'\u21F5','DownBreve':'\u0311','downdownarrows':'\u21CA','downharpoonleft':'\u21C3','downharpoonright':'\u21C2','DownLeftRightVector':'\u2950','DownLeftTeeVector':'\u295E','DownLeftVector':'\u21BD','DownLeftVectorBar':'\u2956','DownRightTeeVector':'\u295F','DownRightVector':'\u21C1','DownRightVectorBar':'\u2957','DownTee':'\u22A4','DownTeeArrow':'\u21A7','drbkarow':'\u2910','drcorn':'\u231F','drcrop':'\u230C','dscr':'\uD835\uDCB9','Dscr':'\uD835\uDC9F','dscy':'\u0455','DScy':'\u0405','dsol':'\u29F6','dstrok':'\u0111','Dstrok':'\u0110','dtdot':'\u22F1','dtri':'\u25BF','dtrif':'\u25BE','duarr':'\u21F5','duhar':'\u296F','dwangle':'\u29A6','dzcy':'\u045F','DZcy':'\u040F','dzigrarr':'\u27FF','eacute':'\xE9','Eacute':'\xC9','easter':'\u2A6E','ecaron':'\u011B','Ecaron':'\u011A','ecir':'\u2256','ecirc':'\xEA','Ecirc':'\xCA','ecolon':'\u2255','ecy':'\u044D','Ecy':'\u042D','eDDot':'\u2A77','edot':'\u0117','eDot':'\u2251','Edot':'\u0116','ee':'\u2147','efDot':'\u2252','efr':'\uD835\uDD22','Efr':'\uD835\uDD08','eg':'\u2A9A','egrave':'\xE8','Egrave':'\xC8','egs':'\u2A96','egsdot':'\u2A98','el':'\u2A99','Element':'\u2208','elinters':'\u23E7','ell':'\u2113','els':'\u2A95','elsdot':'\u2A97','emacr':'\u0113','Emacr':'\u0112','empty':'\u2205','emptyset':'\u2205','EmptySmallSquare':'\u25FB','emptyv':'\u2205','EmptyVerySmallSquare':'\u25AB','emsp':'\u2003','emsp13':'\u2004','emsp14':'\u2005','eng':'\u014B','ENG':'\u014A','ensp':'\u2002','eogon':'\u0119','Eogon':'\u0118','eopf':'\uD835\uDD56','Eopf':'\uD835\uDD3C','epar':'\u22D5','eparsl':'\u29E3','eplus':'\u2A71','epsi':'\u03B5','epsilon':'\u03B5','Epsilon':'\u0395','epsiv':'\u03F5','eqcirc':'\u2256','eqcolon':'\u2255','eqsim':'\u2242','eqslantgtr':'\u2A96','eqslantless':'\u2A95','Equal':'\u2A75','equals':'=','EqualTilde':'\u2242','equest':'\u225F','Equilibrium':'\u21CC','equiv':'\u2261','equivDD':'\u2A78','eqvparsl':'\u29E5','erarr':'\u2971','erDot':'\u2253','escr':'\u212F','Escr':'\u2130','esdot':'\u2250','esim':'\u2242','Esim':'\u2A73','eta':'\u03B7','Eta':'\u0397','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','euro':'\u20AC','excl':'!','exist':'\u2203','Exists':'\u2203','expectation':'\u2130','exponentiale':'\u2147','ExponentialE':'\u2147','fallingdotseq':'\u2252','fcy':'\u0444','Fcy':'\u0424','female':'\u2640','ffilig':'\uFB03','fflig':'\uFB00','ffllig':'\uFB04','ffr':'\uD835\uDD23','Ffr':'\uD835\uDD09','filig':'\uFB01','FilledSmallSquare':'\u25FC','FilledVerySmallSquare':'\u25AA','fjlig':'fj','flat':'\u266D','fllig':'\uFB02','fltns':'\u25B1','fnof':'\u0192','fopf':'\uD835\uDD57','Fopf':'\uD835\uDD3D','forall':'\u2200','ForAll':'\u2200','fork':'\u22D4','forkv':'\u2AD9','Fouriertrf':'\u2131','fpartint':'\u2A0D','frac12':'\xBD','frac13':'\u2153','frac14':'\xBC','frac15':'\u2155','frac16':'\u2159','frac18':'\u215B','frac23':'\u2154','frac25':'\u2156','frac34':'\xBE','frac35':'\u2157','frac38':'\u215C','frac45':'\u2158','frac56':'\u215A','frac58':'\u215D','frac78':'\u215E','frasl':'\u2044','frown':'\u2322','fscr':'\uD835\uDCBB','Fscr':'\u2131','gacute':'\u01F5','gamma':'\u03B3','Gamma':'\u0393','gammad':'\u03DD','Gammad':'\u03DC','gap':'\u2A86','gbreve':'\u011F','Gbreve':'\u011E','Gcedil':'\u0122','gcirc':'\u011D','Gcirc':'\u011C','gcy':'\u0433','Gcy':'\u0413','gdot':'\u0121','Gdot':'\u0120','ge':'\u2265','gE':'\u2267','gel':'\u22DB','gEl':'\u2A8C','geq':'\u2265','geqq':'\u2267','geqslant':'\u2A7E','ges':'\u2A7E','gescc':'\u2AA9','gesdot':'\u2A80','gesdoto':'\u2A82','gesdotol':'\u2A84','gesl':'\u22DB\uFE00','gesles':'\u2A94','gfr':'\uD835\uDD24','Gfr':'\uD835\uDD0A','gg':'\u226B','Gg':'\u22D9','ggg':'\u22D9','gimel':'\u2137','gjcy':'\u0453','GJcy':'\u0403','gl':'\u2277','gla':'\u2AA5','glE':'\u2A92','glj':'\u2AA4','gnap':'\u2A8A','gnapprox':'\u2A8A','gne':'\u2A88','gnE':'\u2269','gneq':'\u2A88','gneqq':'\u2269','gnsim':'\u22E7','gopf':'\uD835\uDD58','Gopf':'\uD835\uDD3E','grave':'`','GreaterEqual':'\u2265','GreaterEqualLess':'\u22DB','GreaterFullEqual':'\u2267','GreaterGreater':'\u2AA2','GreaterLess':'\u2277','GreaterSlantEqual':'\u2A7E','GreaterTilde':'\u2273','gscr':'\u210A','Gscr':'\uD835\uDCA2','gsim':'\u2273','gsime':'\u2A8E','gsiml':'\u2A90','gt':'>','Gt':'\u226B','GT':'>','gtcc':'\u2AA7','gtcir':'\u2A7A','gtdot':'\u22D7','gtlPar':'\u2995','gtquest':'\u2A7C','gtrapprox':'\u2A86','gtrarr':'\u2978','gtrdot':'\u22D7','gtreqless':'\u22DB','gtreqqless':'\u2A8C','gtrless':'\u2277','gtrsim':'\u2273','gvertneqq':'\u2269\uFE00','gvnE':'\u2269\uFE00','Hacek':'\u02C7','hairsp':'\u200A','half':'\xBD','hamilt':'\u210B','hardcy':'\u044A','HARDcy':'\u042A','harr':'\u2194','hArr':'\u21D4','harrcir':'\u2948','harrw':'\u21AD','Hat':'^','hbar':'\u210F','hcirc':'\u0125','Hcirc':'\u0124','hearts':'\u2665','heartsuit':'\u2665','hellip':'\u2026','hercon':'\u22B9','hfr':'\uD835\uDD25','Hfr':'\u210C','HilbertSpace':'\u210B','hksearow':'\u2925','hkswarow':'\u2926','hoarr':'\u21FF','homtht':'\u223B','hookleftarrow':'\u21A9','hookrightarrow':'\u21AA','hopf':'\uD835\uDD59','Hopf':'\u210D','horbar':'\u2015','HorizontalLine':'\u2500','hscr':'\uD835\uDCBD','Hscr':'\u210B','hslash':'\u210F','hstrok':'\u0127','Hstrok':'\u0126','HumpDownHump':'\u224E','HumpEqual':'\u224F','hybull':'\u2043','hyphen':'\u2010','iacute':'\xED','Iacute':'\xCD','ic':'\u2063','icirc':'\xEE','Icirc':'\xCE','icy':'\u0438','Icy':'\u0418','Idot':'\u0130','iecy':'\u0435','IEcy':'\u0415','iexcl':'\xA1','iff':'\u21D4','ifr':'\uD835\uDD26','Ifr':'\u2111','igrave':'\xEC','Igrave':'\xCC','ii':'\u2148','iiiint':'\u2A0C','iiint':'\u222D','iinfin':'\u29DC','iiota':'\u2129','ijlig':'\u0133','IJlig':'\u0132','Im':'\u2111','imacr':'\u012B','Imacr':'\u012A','image':'\u2111','ImaginaryI':'\u2148','imagline':'\u2110','imagpart':'\u2111','imath':'\u0131','imof':'\u22B7','imped':'\u01B5','Implies':'\u21D2','in':'\u2208','incare':'\u2105','infin':'\u221E','infintie':'\u29DD','inodot':'\u0131','int':'\u222B','Int':'\u222C','intcal':'\u22BA','integers':'\u2124','Integral':'\u222B','intercal':'\u22BA','Intersection':'\u22C2','intlarhk':'\u2A17','intprod':'\u2A3C','InvisibleComma':'\u2063','InvisibleTimes':'\u2062','iocy':'\u0451','IOcy':'\u0401','iogon':'\u012F','Iogon':'\u012E','iopf':'\uD835\uDD5A','Iopf':'\uD835\uDD40','iota':'\u03B9','Iota':'\u0399','iprod':'\u2A3C','iquest':'\xBF','iscr':'\uD835\uDCBE','Iscr':'\u2110','isin':'\u2208','isindot':'\u22F5','isinE':'\u22F9','isins':'\u22F4','isinsv':'\u22F3','isinv':'\u2208','it':'\u2062','itilde':'\u0129','Itilde':'\u0128','iukcy':'\u0456','Iukcy':'\u0406','iuml':'\xEF','Iuml':'\xCF','jcirc':'\u0135','Jcirc':'\u0134','jcy':'\u0439','Jcy':'\u0419','jfr':'\uD835\uDD27','Jfr':'\uD835\uDD0D','jmath':'\u0237','jopf':'\uD835\uDD5B','Jopf':'\uD835\uDD41','jscr':'\uD835\uDCBF','Jscr':'\uD835\uDCA5','jsercy':'\u0458','Jsercy':'\u0408','jukcy':'\u0454','Jukcy':'\u0404','kappa':'\u03BA','Kappa':'\u039A','kappav':'\u03F0','kcedil':'\u0137','Kcedil':'\u0136','kcy':'\u043A','Kcy':'\u041A','kfr':'\uD835\uDD28','Kfr':'\uD835\uDD0E','kgreen':'\u0138','khcy':'\u0445','KHcy':'\u0425','kjcy':'\u045C','KJcy':'\u040C','kopf':'\uD835\uDD5C','Kopf':'\uD835\uDD42','kscr':'\uD835\uDCC0','Kscr':'\uD835\uDCA6','lAarr':'\u21DA','lacute':'\u013A','Lacute':'\u0139','laemptyv':'\u29B4','lagran':'\u2112','lambda':'\u03BB','Lambda':'\u039B','lang':'\u27E8','Lang':'\u27EA','langd':'\u2991','langle':'\u27E8','lap':'\u2A85','Laplacetrf':'\u2112','laquo':'\xAB','larr':'\u2190','lArr':'\u21D0','Larr':'\u219E','larrb':'\u21E4','larrbfs':'\u291F','larrfs':'\u291D','larrhk':'\u21A9','larrlp':'\u21AB','larrpl':'\u2939','larrsim':'\u2973','larrtl':'\u21A2','lat':'\u2AAB','latail':'\u2919','lAtail':'\u291B','late':'\u2AAD','lates':'\u2AAD\uFE00','lbarr':'\u290C','lBarr':'\u290E','lbbrk':'\u2772','lbrace':'{','lbrack':'[','lbrke':'\u298B','lbrksld':'\u298F','lbrkslu':'\u298D','lcaron':'\u013E','Lcaron':'\u013D','lcedil':'\u013C','Lcedil':'\u013B','lceil':'\u2308','lcub':'{','lcy':'\u043B','Lcy':'\u041B','ldca':'\u2936','ldquo':'\u201C','ldquor':'\u201E','ldrdhar':'\u2967','ldrushar':'\u294B','ldsh':'\u21B2','le':'\u2264','lE':'\u2266','LeftAngleBracket':'\u27E8','leftarrow':'\u2190','Leftarrow':'\u21D0','LeftArrow':'\u2190','LeftArrowBar':'\u21E4','LeftArrowRightArrow':'\u21C6','leftarrowtail':'\u21A2','LeftCeiling':'\u2308','LeftDoubleBracket':'\u27E6','LeftDownTeeVector':'\u2961','LeftDownVector':'\u21C3','LeftDownVectorBar':'\u2959','LeftFloor':'\u230A','leftharpoondown':'\u21BD','leftharpoonup':'\u21BC','leftleftarrows':'\u21C7','leftrightarrow':'\u2194','Leftrightarrow':'\u21D4','LeftRightArrow':'\u2194','leftrightarrows':'\u21C6','leftrightharpoons':'\u21CB','leftrightsquigarrow':'\u21AD','LeftRightVector':'\u294E','LeftTee':'\u22A3','LeftTeeArrow':'\u21A4','LeftTeeVector':'\u295A','leftthreetimes':'\u22CB','LeftTriangle':'\u22B2','LeftTriangleBar':'\u29CF','LeftTriangleEqual':'\u22B4','LeftUpDownVector':'\u2951','LeftUpTeeVector':'\u2960','LeftUpVector':'\u21BF','LeftUpVectorBar':'\u2958','LeftVector':'\u21BC','LeftVectorBar':'\u2952','leg':'\u22DA','lEg':'\u2A8B','leq':'\u2264','leqq':'\u2266','leqslant':'\u2A7D','les':'\u2A7D','lescc':'\u2AA8','lesdot':'\u2A7F','lesdoto':'\u2A81','lesdotor':'\u2A83','lesg':'\u22DA\uFE00','lesges':'\u2A93','lessapprox':'\u2A85','lessdot':'\u22D6','lesseqgtr':'\u22DA','lesseqqgtr':'\u2A8B','LessEqualGreater':'\u22DA','LessFullEqual':'\u2266','LessGreater':'\u2276','lessgtr':'\u2276','LessLess':'\u2AA1','lesssim':'\u2272','LessSlantEqual':'\u2A7D','LessTilde':'\u2272','lfisht':'\u297C','lfloor':'\u230A','lfr':'\uD835\uDD29','Lfr':'\uD835\uDD0F','lg':'\u2276','lgE':'\u2A91','lHar':'\u2962','lhard':'\u21BD','lharu':'\u21BC','lharul':'\u296A','lhblk':'\u2584','ljcy':'\u0459','LJcy':'\u0409','ll':'\u226A','Ll':'\u22D8','llarr':'\u21C7','llcorner':'\u231E','Lleftarrow':'\u21DA','llhard':'\u296B','lltri':'\u25FA','lmidot':'\u0140','Lmidot':'\u013F','lmoust':'\u23B0','lmoustache':'\u23B0','lnap':'\u2A89','lnapprox':'\u2A89','lne':'\u2A87','lnE':'\u2268','lneq':'\u2A87','lneqq':'\u2268','lnsim':'\u22E6','loang':'\u27EC','loarr':'\u21FD','lobrk':'\u27E6','longleftarrow':'\u27F5','Longleftarrow':'\u27F8','LongLeftArrow':'\u27F5','longleftrightarrow':'\u27F7','Longleftrightarrow':'\u27FA','LongLeftRightArrow':'\u27F7','longmapsto':'\u27FC','longrightarrow':'\u27F6','Longrightarrow':'\u27F9','LongRightArrow':'\u27F6','looparrowleft':'\u21AB','looparrowright':'\u21AC','lopar':'\u2985','lopf':'\uD835\uDD5D','Lopf':'\uD835\uDD43','loplus':'\u2A2D','lotimes':'\u2A34','lowast':'\u2217','lowbar':'_','LowerLeftArrow':'\u2199','LowerRightArrow':'\u2198','loz':'\u25CA','lozenge':'\u25CA','lozf':'\u29EB','lpar':'(','lparlt':'\u2993','lrarr':'\u21C6','lrcorner':'\u231F','lrhar':'\u21CB','lrhard':'\u296D','lrm':'\u200E','lrtri':'\u22BF','lsaquo':'\u2039','lscr':'\uD835\uDCC1','Lscr':'\u2112','lsh':'\u21B0','Lsh':'\u21B0','lsim':'\u2272','lsime':'\u2A8D','lsimg':'\u2A8F','lsqb':'[','lsquo':'\u2018','lsquor':'\u201A','lstrok':'\u0142','Lstrok':'\u0141','lt':'<','Lt':'\u226A','LT':'<','ltcc':'\u2AA6','ltcir':'\u2A79','ltdot':'\u22D6','lthree':'\u22CB','ltimes':'\u22C9','ltlarr':'\u2976','ltquest':'\u2A7B','ltri':'\u25C3','ltrie':'\u22B4','ltrif':'\u25C2','ltrPar':'\u2996','lurdshar':'\u294A','luruhar':'\u2966','lvertneqq':'\u2268\uFE00','lvnE':'\u2268\uFE00','macr':'\xAF','male':'\u2642','malt':'\u2720','maltese':'\u2720','map':'\u21A6','Map':'\u2905','mapsto':'\u21A6','mapstodown':'\u21A7','mapstoleft':'\u21A4','mapstoup':'\u21A5','marker':'\u25AE','mcomma':'\u2A29','mcy':'\u043C','Mcy':'\u041C','mdash':'\u2014','mDDot':'\u223A','measuredangle':'\u2221','MediumSpace':'\u205F','Mellintrf':'\u2133','mfr':'\uD835\uDD2A','Mfr':'\uD835\uDD10','mho':'\u2127','micro':'\xB5','mid':'\u2223','midast':'*','midcir':'\u2AF0','middot':'\xB7','minus':'\u2212','minusb':'\u229F','minusd':'\u2238','minusdu':'\u2A2A','MinusPlus':'\u2213','mlcp':'\u2ADB','mldr':'\u2026','mnplus':'\u2213','models':'\u22A7','mopf':'\uD835\uDD5E','Mopf':'\uD835\uDD44','mp':'\u2213','mscr':'\uD835\uDCC2','Mscr':'\u2133','mstpos':'\u223E','mu':'\u03BC','Mu':'\u039C','multimap':'\u22B8','mumap':'\u22B8','nabla':'\u2207','nacute':'\u0144','Nacute':'\u0143','nang':'\u2220\u20D2','nap':'\u2249','napE':'\u2A70\u0338','napid':'\u224B\u0338','napos':'\u0149','napprox':'\u2249','natur':'\u266E','natural':'\u266E','naturals':'\u2115','nbsp':'\xA0','nbump':'\u224E\u0338','nbumpe':'\u224F\u0338','ncap':'\u2A43','ncaron':'\u0148','Ncaron':'\u0147','ncedil':'\u0146','Ncedil':'\u0145','ncong':'\u2247','ncongdot':'\u2A6D\u0338','ncup':'\u2A42','ncy':'\u043D','Ncy':'\u041D','ndash':'\u2013','ne':'\u2260','nearhk':'\u2924','nearr':'\u2197','neArr':'\u21D7','nearrow':'\u2197','nedot':'\u2250\u0338','NegativeMediumSpace':'\u200B','NegativeThickSpace':'\u200B','NegativeThinSpace':'\u200B','NegativeVeryThinSpace':'\u200B','nequiv':'\u2262','nesear':'\u2928','nesim':'\u2242\u0338','NestedGreaterGreater':'\u226B','NestedLessLess':'\u226A','NewLine':'\n','nexist':'\u2204','nexists':'\u2204','nfr':'\uD835\uDD2B','Nfr':'\uD835\uDD11','nge':'\u2271','ngE':'\u2267\u0338','ngeq':'\u2271','ngeqq':'\u2267\u0338','ngeqslant':'\u2A7E\u0338','nges':'\u2A7E\u0338','nGg':'\u22D9\u0338','ngsim':'\u2275','ngt':'\u226F','nGt':'\u226B\u20D2','ngtr':'\u226F','nGtv':'\u226B\u0338','nharr':'\u21AE','nhArr':'\u21CE','nhpar':'\u2AF2','ni':'\u220B','nis':'\u22FC','nisd':'\u22FA','niv':'\u220B','njcy':'\u045A','NJcy':'\u040A','nlarr':'\u219A','nlArr':'\u21CD','nldr':'\u2025','nle':'\u2270','nlE':'\u2266\u0338','nleftarrow':'\u219A','nLeftarrow':'\u21CD','nleftrightarrow':'\u21AE','nLeftrightarrow':'\u21CE','nleq':'\u2270','nleqq':'\u2266\u0338','nleqslant':'\u2A7D\u0338','nles':'\u2A7D\u0338','nless':'\u226E','nLl':'\u22D8\u0338','nlsim':'\u2274','nlt':'\u226E','nLt':'\u226A\u20D2','nltri':'\u22EA','nltrie':'\u22EC','nLtv':'\u226A\u0338','nmid':'\u2224','NoBreak':'\u2060','NonBreakingSpace':'\xA0','nopf':'\uD835\uDD5F','Nopf':'\u2115','not':'\xAC','Not':'\u2AEC','NotCongruent':'\u2262','NotCupCap':'\u226D','NotDoubleVerticalBar':'\u2226','NotElement':'\u2209','NotEqual':'\u2260','NotEqualTilde':'\u2242\u0338','NotExists':'\u2204','NotGreater':'\u226F','NotGreaterEqual':'\u2271','NotGreaterFullEqual':'\u2267\u0338','NotGreaterGreater':'\u226B\u0338','NotGreaterLess':'\u2279','NotGreaterSlantEqual':'\u2A7E\u0338','NotGreaterTilde':'\u2275','NotHumpDownHump':'\u224E\u0338','NotHumpEqual':'\u224F\u0338','notin':'\u2209','notindot':'\u22F5\u0338','notinE':'\u22F9\u0338','notinva':'\u2209','notinvb':'\u22F7','notinvc':'\u22F6','NotLeftTriangle':'\u22EA','NotLeftTriangleBar':'\u29CF\u0338','NotLeftTriangleEqual':'\u22EC','NotLess':'\u226E','NotLessEqual':'\u2270','NotLessGreater':'\u2278','NotLessLess':'\u226A\u0338','NotLessSlantEqual':'\u2A7D\u0338','NotLessTilde':'\u2274','NotNestedGreaterGreater':'\u2AA2\u0338','NotNestedLessLess':'\u2AA1\u0338','notni':'\u220C','notniva':'\u220C','notnivb':'\u22FE','notnivc':'\u22FD','NotPrecedes':'\u2280','NotPrecedesEqual':'\u2AAF\u0338','NotPrecedesSlantEqual':'\u22E0','NotReverseElement':'\u220C','NotRightTriangle':'\u22EB','NotRightTriangleBar':'\u29D0\u0338','NotRightTriangleEqual':'\u22ED','NotSquareSubset':'\u228F\u0338','NotSquareSubsetEqual':'\u22E2','NotSquareSuperset':'\u2290\u0338','NotSquareSupersetEqual':'\u22E3','NotSubset':'\u2282\u20D2','NotSubsetEqual':'\u2288','NotSucceeds':'\u2281','NotSucceedsEqual':'\u2AB0\u0338','NotSucceedsSlantEqual':'\u22E1','NotSucceedsTilde':'\u227F\u0338','NotSuperset':'\u2283\u20D2','NotSupersetEqual':'\u2289','NotTilde':'\u2241','NotTildeEqual':'\u2244','NotTildeFullEqual':'\u2247','NotTildeTilde':'\u2249','NotVerticalBar':'\u2224','npar':'\u2226','nparallel':'\u2226','nparsl':'\u2AFD\u20E5','npart':'\u2202\u0338','npolint':'\u2A14','npr':'\u2280','nprcue':'\u22E0','npre':'\u2AAF\u0338','nprec':'\u2280','npreceq':'\u2AAF\u0338','nrarr':'\u219B','nrArr':'\u21CF','nrarrc':'\u2933\u0338','nrarrw':'\u219D\u0338','nrightarrow':'\u219B','nRightarrow':'\u21CF','nrtri':'\u22EB','nrtrie':'\u22ED','nsc':'\u2281','nsccue':'\u22E1','nsce':'\u2AB0\u0338','nscr':'\uD835\uDCC3','Nscr':'\uD835\uDCA9','nshortmid':'\u2224','nshortparallel':'\u2226','nsim':'\u2241','nsime':'\u2244','nsimeq':'\u2244','nsmid':'\u2224','nspar':'\u2226','nsqsube':'\u22E2','nsqsupe':'\u22E3','nsub':'\u2284','nsube':'\u2288','nsubE':'\u2AC5\u0338','nsubset':'\u2282\u20D2','nsubseteq':'\u2288','nsubseteqq':'\u2AC5\u0338','nsucc':'\u2281','nsucceq':'\u2AB0\u0338','nsup':'\u2285','nsupe':'\u2289','nsupE':'\u2AC6\u0338','nsupset':'\u2283\u20D2','nsupseteq':'\u2289','nsupseteqq':'\u2AC6\u0338','ntgl':'\u2279','ntilde':'\xF1','Ntilde':'\xD1','ntlg':'\u2278','ntriangleleft':'\u22EA','ntrianglelefteq':'\u22EC','ntriangleright':'\u22EB','ntrianglerighteq':'\u22ED','nu':'\u03BD','Nu':'\u039D','num':'#','numero':'\u2116','numsp':'\u2007','nvap':'\u224D\u20D2','nvdash':'\u22AC','nvDash':'\u22AD','nVdash':'\u22AE','nVDash':'\u22AF','nvge':'\u2265\u20D2','nvgt':'>\u20D2','nvHarr':'\u2904','nvinfin':'\u29DE','nvlArr':'\u2902','nvle':'\u2264\u20D2','nvlt':'<\u20D2','nvltrie':'\u22B4\u20D2','nvrArr':'\u2903','nvrtrie':'\u22B5\u20D2','nvsim':'\u223C\u20D2','nwarhk':'\u2923','nwarr':'\u2196','nwArr':'\u21D6','nwarrow':'\u2196','nwnear':'\u2927','oacute':'\xF3','Oacute':'\xD3','oast':'\u229B','ocir':'\u229A','ocirc':'\xF4','Ocirc':'\xD4','ocy':'\u043E','Ocy':'\u041E','odash':'\u229D','odblac':'\u0151','Odblac':'\u0150','odiv':'\u2A38','odot':'\u2299','odsold':'\u29BC','oelig':'\u0153','OElig':'\u0152','ofcir':'\u29BF','ofr':'\uD835\uDD2C','Ofr':'\uD835\uDD12','ogon':'\u02DB','ograve':'\xF2','Ograve':'\xD2','ogt':'\u29C1','ohbar':'\u29B5','ohm':'\u03A9','oint':'\u222E','olarr':'\u21BA','olcir':'\u29BE','olcross':'\u29BB','oline':'\u203E','olt':'\u29C0','omacr':'\u014D','Omacr':'\u014C','omega':'\u03C9','Omega':'\u03A9','omicron':'\u03BF','Omicron':'\u039F','omid':'\u29B6','ominus':'\u2296','oopf':'\uD835\uDD60','Oopf':'\uD835\uDD46','opar':'\u29B7','OpenCurlyDoubleQuote':'\u201C','OpenCurlyQuote':'\u2018','operp':'\u29B9','oplus':'\u2295','or':'\u2228','Or':'\u2A54','orarr':'\u21BB','ord':'\u2A5D','order':'\u2134','orderof':'\u2134','ordf':'\xAA','ordm':'\xBA','origof':'\u22B6','oror':'\u2A56','orslope':'\u2A57','orv':'\u2A5B','oS':'\u24C8','oscr':'\u2134','Oscr':'\uD835\uDCAA','oslash':'\xF8','Oslash':'\xD8','osol':'\u2298','otilde':'\xF5','Otilde':'\xD5','otimes':'\u2297','Otimes':'\u2A37','otimesas':'\u2A36','ouml':'\xF6','Ouml':'\xD6','ovbar':'\u233D','OverBar':'\u203E','OverBrace':'\u23DE','OverBracket':'\u23B4','OverParenthesis':'\u23DC','par':'\u2225','para':'\xB6','parallel':'\u2225','parsim':'\u2AF3','parsl':'\u2AFD','part':'\u2202','PartialD':'\u2202','pcy':'\u043F','Pcy':'\u041F','percnt':'%','period':'.','permil':'\u2030','perp':'\u22A5','pertenk':'\u2031','pfr':'\uD835\uDD2D','Pfr':'\uD835\uDD13','phi':'\u03C6','Phi':'\u03A6','phiv':'\u03D5','phmmat':'\u2133','phone':'\u260E','pi':'\u03C0','Pi':'\u03A0','pitchfork':'\u22D4','piv':'\u03D6','planck':'\u210F','planckh':'\u210E','plankv':'\u210F','plus':'+','plusacir':'\u2A23','plusb':'\u229E','pluscir':'\u2A22','plusdo':'\u2214','plusdu':'\u2A25','pluse':'\u2A72','PlusMinus':'\xB1','plusmn':'\xB1','plussim':'\u2A26','plustwo':'\u2A27','pm':'\xB1','Poincareplane':'\u210C','pointint':'\u2A15','popf':'\uD835\uDD61','Popf':'\u2119','pound':'\xA3','pr':'\u227A','Pr':'\u2ABB','prap':'\u2AB7','prcue':'\u227C','pre':'\u2AAF','prE':'\u2AB3','prec':'\u227A','precapprox':'\u2AB7','preccurlyeq':'\u227C','Precedes':'\u227A','PrecedesEqual':'\u2AAF','PrecedesSlantEqual':'\u227C','PrecedesTilde':'\u227E','preceq':'\u2AAF','precnapprox':'\u2AB9','precneqq':'\u2AB5','precnsim':'\u22E8','precsim':'\u227E','prime':'\u2032','Prime':'\u2033','primes':'\u2119','prnap':'\u2AB9','prnE':'\u2AB5','prnsim':'\u22E8','prod':'\u220F','Product':'\u220F','profalar':'\u232E','profline':'\u2312','profsurf':'\u2313','prop':'\u221D','Proportion':'\u2237','Proportional':'\u221D','propto':'\u221D','prsim':'\u227E','prurel':'\u22B0','pscr':'\uD835\uDCC5','Pscr':'\uD835\uDCAB','psi':'\u03C8','Psi':'\u03A8','puncsp':'\u2008','qfr':'\uD835\uDD2E','Qfr':'\uD835\uDD14','qint':'\u2A0C','qopf':'\uD835\uDD62','Qopf':'\u211A','qprime':'\u2057','qscr':'\uD835\uDCC6','Qscr':'\uD835\uDCAC','quaternions':'\u210D','quatint':'\u2A16','quest':'?','questeq':'\u225F','quot':'"','QUOT':'"','rAarr':'\u21DB','race':'\u223D\u0331','racute':'\u0155','Racute':'\u0154','radic':'\u221A','raemptyv':'\u29B3','rang':'\u27E9','Rang':'\u27EB','rangd':'\u2992','range':'\u29A5','rangle':'\u27E9','raquo':'\xBB','rarr':'\u2192','rArr':'\u21D2','Rarr':'\u21A0','rarrap':'\u2975','rarrb':'\u21E5','rarrbfs':'\u2920','rarrc':'\u2933','rarrfs':'\u291E','rarrhk':'\u21AA','rarrlp':'\u21AC','rarrpl':'\u2945','rarrsim':'\u2974','rarrtl':'\u21A3','Rarrtl':'\u2916','rarrw':'\u219D','ratail':'\u291A','rAtail':'\u291C','ratio':'\u2236','rationals':'\u211A','rbarr':'\u290D','rBarr':'\u290F','RBarr':'\u2910','rbbrk':'\u2773','rbrace':'}','rbrack':']','rbrke':'\u298C','rbrksld':'\u298E','rbrkslu':'\u2990','rcaron':'\u0159','Rcaron':'\u0158','rcedil':'\u0157','Rcedil':'\u0156','rceil':'\u2309','rcub':'}','rcy':'\u0440','Rcy':'\u0420','rdca':'\u2937','rdldhar':'\u2969','rdquo':'\u201D','rdquor':'\u201D','rdsh':'\u21B3','Re':'\u211C','real':'\u211C','realine':'\u211B','realpart':'\u211C','reals':'\u211D','rect':'\u25AD','reg':'\xAE','REG':'\xAE','ReverseElement':'\u220B','ReverseEquilibrium':'\u21CB','ReverseUpEquilibrium':'\u296F','rfisht':'\u297D','rfloor':'\u230B','rfr':'\uD835\uDD2F','Rfr':'\u211C','rHar':'\u2964','rhard':'\u21C1','rharu':'\u21C0','rharul':'\u296C','rho':'\u03C1','Rho':'\u03A1','rhov':'\u03F1','RightAngleBracket':'\u27E9','rightarrow':'\u2192','Rightarrow':'\u21D2','RightArrow':'\u2192','RightArrowBar':'\u21E5','RightArrowLeftArrow':'\u21C4','rightarrowtail':'\u21A3','RightCeiling':'\u2309','RightDoubleBracket':'\u27E7','RightDownTeeVector':'\u295D','RightDownVector':'\u21C2','RightDownVectorBar':'\u2955','RightFloor':'\u230B','rightharpoondown':'\u21C1','rightharpoonup':'\u21C0','rightleftarrows':'\u21C4','rightleftharpoons':'\u21CC','rightrightarrows':'\u21C9','rightsquigarrow':'\u219D','RightTee':'\u22A2','RightTeeArrow':'\u21A6','RightTeeVector':'\u295B','rightthreetimes':'\u22CC','RightTriangle':'\u22B3','RightTriangleBar':'\u29D0','RightTriangleEqual':'\u22B5','RightUpDownVector':'\u294F','RightUpTeeVector':'\u295C','RightUpVector':'\u21BE','RightUpVectorBar':'\u2954','RightVector':'\u21C0','RightVectorBar':'\u2953','ring':'\u02DA','risingdotseq':'\u2253','rlarr':'\u21C4','rlhar':'\u21CC','rlm':'\u200F','rmoust':'\u23B1','rmoustache':'\u23B1','rnmid':'\u2AEE','roang':'\u27ED','roarr':'\u21FE','robrk':'\u27E7','ropar':'\u2986','ropf':'\uD835\uDD63','Ropf':'\u211D','roplus':'\u2A2E','rotimes':'\u2A35','RoundImplies':'\u2970','rpar':')','rpargt':'\u2994','rppolint':'\u2A12','rrarr':'\u21C9','Rrightarrow':'\u21DB','rsaquo':'\u203A','rscr':'\uD835\uDCC7','Rscr':'\u211B','rsh':'\u21B1','Rsh':'\u21B1','rsqb':']','rsquo':'\u2019','rsquor':'\u2019','rthree':'\u22CC','rtimes':'\u22CA','rtri':'\u25B9','rtrie':'\u22B5','rtrif':'\u25B8','rtriltri':'\u29CE','RuleDelayed':'\u29F4','ruluhar':'\u2968','rx':'\u211E','sacute':'\u015B','Sacute':'\u015A','sbquo':'\u201A','sc':'\u227B','Sc':'\u2ABC','scap':'\u2AB8','scaron':'\u0161','Scaron':'\u0160','sccue':'\u227D','sce':'\u2AB0','scE':'\u2AB4','scedil':'\u015F','Scedil':'\u015E','scirc':'\u015D','Scirc':'\u015C','scnap':'\u2ABA','scnE':'\u2AB6','scnsim':'\u22E9','scpolint':'\u2A13','scsim':'\u227F','scy':'\u0441','Scy':'\u0421','sdot':'\u22C5','sdotb':'\u22A1','sdote':'\u2A66','searhk':'\u2925','searr':'\u2198','seArr':'\u21D8','searrow':'\u2198','sect':'\xA7','semi':';','seswar':'\u2929','setminus':'\u2216','setmn':'\u2216','sext':'\u2736','sfr':'\uD835\uDD30','Sfr':'\uD835\uDD16','sfrown':'\u2322','sharp':'\u266F','shchcy':'\u0449','SHCHcy':'\u0429','shcy':'\u0448','SHcy':'\u0428','ShortDownArrow':'\u2193','ShortLeftArrow':'\u2190','shortmid':'\u2223','shortparallel':'\u2225','ShortRightArrow':'\u2192','ShortUpArrow':'\u2191','shy':'\xAD','sigma':'\u03C3','Sigma':'\u03A3','sigmaf':'\u03C2','sigmav':'\u03C2','sim':'\u223C','simdot':'\u2A6A','sime':'\u2243','simeq':'\u2243','simg':'\u2A9E','simgE':'\u2AA0','siml':'\u2A9D','simlE':'\u2A9F','simne':'\u2246','simplus':'\u2A24','simrarr':'\u2972','slarr':'\u2190','SmallCircle':'\u2218','smallsetminus':'\u2216','smashp':'\u2A33','smeparsl':'\u29E4','smid':'\u2223','smile':'\u2323','smt':'\u2AAA','smte':'\u2AAC','smtes':'\u2AAC\uFE00','softcy':'\u044C','SOFTcy':'\u042C','sol':'/','solb':'\u29C4','solbar':'\u233F','sopf':'\uD835\uDD64','Sopf':'\uD835\uDD4A','spades':'\u2660','spadesuit':'\u2660','spar':'\u2225','sqcap':'\u2293','sqcaps':'\u2293\uFE00','sqcup':'\u2294','sqcups':'\u2294\uFE00','Sqrt':'\u221A','sqsub':'\u228F','sqsube':'\u2291','sqsubset':'\u228F','sqsubseteq':'\u2291','sqsup':'\u2290','sqsupe':'\u2292','sqsupset':'\u2290','sqsupseteq':'\u2292','squ':'\u25A1','square':'\u25A1','Square':'\u25A1','SquareIntersection':'\u2293','SquareSubset':'\u228F','SquareSubsetEqual':'\u2291','SquareSuperset':'\u2290','SquareSupersetEqual':'\u2292','SquareUnion':'\u2294','squarf':'\u25AA','squf':'\u25AA','srarr':'\u2192','sscr':'\uD835\uDCC8','Sscr':'\uD835\uDCAE','ssetmn':'\u2216','ssmile':'\u2323','sstarf':'\u22C6','star':'\u2606','Star':'\u22C6','starf':'\u2605','straightepsilon':'\u03F5','straightphi':'\u03D5','strns':'\xAF','sub':'\u2282','Sub':'\u22D0','subdot':'\u2ABD','sube':'\u2286','subE':'\u2AC5','subedot':'\u2AC3','submult':'\u2AC1','subne':'\u228A','subnE':'\u2ACB','subplus':'\u2ABF','subrarr':'\u2979','subset':'\u2282','Subset':'\u22D0','subseteq':'\u2286','subseteqq':'\u2AC5','SubsetEqual':'\u2286','subsetneq':'\u228A','subsetneqq':'\u2ACB','subsim':'\u2AC7','subsub':'\u2AD5','subsup':'\u2AD3','succ':'\u227B','succapprox':'\u2AB8','succcurlyeq':'\u227D','Succeeds':'\u227B','SucceedsEqual':'\u2AB0','SucceedsSlantEqual':'\u227D','SucceedsTilde':'\u227F','succeq':'\u2AB0','succnapprox':'\u2ABA','succneqq':'\u2AB6','succnsim':'\u22E9','succsim':'\u227F','SuchThat':'\u220B','sum':'\u2211','Sum':'\u2211','sung':'\u266A','sup':'\u2283','Sup':'\u22D1','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','supdot':'\u2ABE','supdsub':'\u2AD8','supe':'\u2287','supE':'\u2AC6','supedot':'\u2AC4','Superset':'\u2283','SupersetEqual':'\u2287','suphsol':'\u27C9','suphsub':'\u2AD7','suplarr':'\u297B','supmult':'\u2AC2','supne':'\u228B','supnE':'\u2ACC','supplus':'\u2AC0','supset':'\u2283','Supset':'\u22D1','supseteq':'\u2287','supseteqq':'\u2AC6','supsetneq':'\u228B','supsetneqq':'\u2ACC','supsim':'\u2AC8','supsub':'\u2AD4','supsup':'\u2AD6','swarhk':'\u2926','swarr':'\u2199','swArr':'\u21D9','swarrow':'\u2199','swnwar':'\u292A','szlig':'\xDF','Tab':'\t','target':'\u2316','tau':'\u03C4','Tau':'\u03A4','tbrk':'\u23B4','tcaron':'\u0165','Tcaron':'\u0164','tcedil':'\u0163','Tcedil':'\u0162','tcy':'\u0442','Tcy':'\u0422','tdot':'\u20DB','telrec':'\u2315','tfr':'\uD835\uDD31','Tfr':'\uD835\uDD17','there4':'\u2234','therefore':'\u2234','Therefore':'\u2234','theta':'\u03B8','Theta':'\u0398','thetasym':'\u03D1','thetav':'\u03D1','thickapprox':'\u2248','thicksim':'\u223C','ThickSpace':'\u205F\u200A','thinsp':'\u2009','ThinSpace':'\u2009','thkap':'\u2248','thksim':'\u223C','thorn':'\xFE','THORN':'\xDE','tilde':'\u02DC','Tilde':'\u223C','TildeEqual':'\u2243','TildeFullEqual':'\u2245','TildeTilde':'\u2248','times':'\xD7','timesb':'\u22A0','timesbar':'\u2A31','timesd':'\u2A30','tint':'\u222D','toea':'\u2928','top':'\u22A4','topbot':'\u2336','topcir':'\u2AF1','topf':'\uD835\uDD65','Topf':'\uD835\uDD4B','topfork':'\u2ADA','tosa':'\u2929','tprime':'\u2034','trade':'\u2122','TRADE':'\u2122','triangle':'\u25B5','triangledown':'\u25BF','triangleleft':'\u25C3','trianglelefteq':'\u22B4','triangleq':'\u225C','triangleright':'\u25B9','trianglerighteq':'\u22B5','tridot':'\u25EC','trie':'\u225C','triminus':'\u2A3A','TripleDot':'\u20DB','triplus':'\u2A39','trisb':'\u29CD','tritime':'\u2A3B','trpezium':'\u23E2','tscr':'\uD835\uDCC9','Tscr':'\uD835\uDCAF','tscy':'\u0446','TScy':'\u0426','tshcy':'\u045B','TSHcy':'\u040B','tstrok':'\u0167','Tstrok':'\u0166','twixt':'\u226C','twoheadleftarrow':'\u219E','twoheadrightarrow':'\u21A0','uacute':'\xFA','Uacute':'\xDA','uarr':'\u2191','uArr':'\u21D1','Uarr':'\u219F','Uarrocir':'\u2949','ubrcy':'\u045E','Ubrcy':'\u040E','ubreve':'\u016D','Ubreve':'\u016C','ucirc':'\xFB','Ucirc':'\xDB','ucy':'\u0443','Ucy':'\u0423','udarr':'\u21C5','udblac':'\u0171','Udblac':'\u0170','udhar':'\u296E','ufisht':'\u297E','ufr':'\uD835\uDD32','Ufr':'\uD835\uDD18','ugrave':'\xF9','Ugrave':'\xD9','uHar':'\u2963','uharl':'\u21BF','uharr':'\u21BE','uhblk':'\u2580','ulcorn':'\u231C','ulcorner':'\u231C','ulcrop':'\u230F','ultri':'\u25F8','umacr':'\u016B','Umacr':'\u016A','uml':'\xA8','UnderBar':'_','UnderBrace':'\u23DF','UnderBracket':'\u23B5','UnderParenthesis':'\u23DD','Union':'\u22C3','UnionPlus':'\u228E','uogon':'\u0173','Uogon':'\u0172','uopf':'\uD835\uDD66','Uopf':'\uD835\uDD4C','uparrow':'\u2191','Uparrow':'\u21D1','UpArrow':'\u2191','UpArrowBar':'\u2912','UpArrowDownArrow':'\u21C5','updownarrow':'\u2195','Updownarrow':'\u21D5','UpDownArrow':'\u2195','UpEquilibrium':'\u296E','upharpoonleft':'\u21BF','upharpoonright':'\u21BE','uplus':'\u228E','UpperLeftArrow':'\u2196','UpperRightArrow':'\u2197','upsi':'\u03C5','Upsi':'\u03D2','upsih':'\u03D2','upsilon':'\u03C5','Upsilon':'\u03A5','UpTee':'\u22A5','UpTeeArrow':'\u21A5','upuparrows':'\u21C8','urcorn':'\u231D','urcorner':'\u231D','urcrop':'\u230E','uring':'\u016F','Uring':'\u016E','urtri':'\u25F9','uscr':'\uD835\uDCCA','Uscr':'\uD835\uDCB0','utdot':'\u22F0','utilde':'\u0169','Utilde':'\u0168','utri':'\u25B5','utrif':'\u25B4','uuarr':'\u21C8','uuml':'\xFC','Uuml':'\xDC','uwangle':'\u29A7','vangrt':'\u299C','varepsilon':'\u03F5','varkappa':'\u03F0','varnothing':'\u2205','varphi':'\u03D5','varpi':'\u03D6','varpropto':'\u221D','varr':'\u2195','vArr':'\u21D5','varrho':'\u03F1','varsigma':'\u03C2','varsubsetneq':'\u228A\uFE00','varsubsetneqq':'\u2ACB\uFE00','varsupsetneq':'\u228B\uFE00','varsupsetneqq':'\u2ACC\uFE00','vartheta':'\u03D1','vartriangleleft':'\u22B2','vartriangleright':'\u22B3','vBar':'\u2AE8','Vbar':'\u2AEB','vBarv':'\u2AE9','vcy':'\u0432','Vcy':'\u0412','vdash':'\u22A2','vDash':'\u22A8','Vdash':'\u22A9','VDash':'\u22AB','Vdashl':'\u2AE6','vee':'\u2228','Vee':'\u22C1','veebar':'\u22BB','veeeq':'\u225A','vellip':'\u22EE','verbar':'|','Verbar':'\u2016','vert':'|','Vert':'\u2016','VerticalBar':'\u2223','VerticalLine':'|','VerticalSeparator':'\u2758','VerticalTilde':'\u2240','VeryThinSpace':'\u200A','vfr':'\uD835\uDD33','Vfr':'\uD835\uDD19','vltri':'\u22B2','vnsub':'\u2282\u20D2','vnsup':'\u2283\u20D2','vopf':'\uD835\uDD67','Vopf':'\uD835\uDD4D','vprop':'\u221D','vrtri':'\u22B3','vscr':'\uD835\uDCCB','Vscr':'\uD835\uDCB1','vsubne':'\u228A\uFE00','vsubnE':'\u2ACB\uFE00','vsupne':'\u228B\uFE00','vsupnE':'\u2ACC\uFE00','Vvdash':'\u22AA','vzigzag':'\u299A','wcirc':'\u0175','Wcirc':'\u0174','wedbar':'\u2A5F','wedge':'\u2227','Wedge':'\u22C0','wedgeq':'\u2259','weierp':'\u2118','wfr':'\uD835\uDD34','Wfr':'\uD835\uDD1A','wopf':'\uD835\uDD68','Wopf':'\uD835\uDD4E','wp':'\u2118','wr':'\u2240','wreath':'\u2240','wscr':'\uD835\uDCCC','Wscr':'\uD835\uDCB2','xcap':'\u22C2','xcirc':'\u25EF','xcup':'\u22C3','xdtri':'\u25BD','xfr':'\uD835\uDD35','Xfr':'\uD835\uDD1B','xharr':'\u27F7','xhArr':'\u27FA','xi':'\u03BE','Xi':'\u039E','xlarr':'\u27F5','xlArr':'\u27F8','xmap':'\u27FC','xnis':'\u22FB','xodot':'\u2A00','xopf':'\uD835\uDD69','Xopf':'\uD835\uDD4F','xoplus':'\u2A01','xotime':'\u2A02','xrarr':'\u27F6','xrArr':'\u27F9','xscr':'\uD835\uDCCD','Xscr':'\uD835\uDCB3','xsqcup':'\u2A06','xuplus':'\u2A04','xutri':'\u25B3','xvee':'\u22C1','xwedge':'\u22C0','yacute':'\xFD','Yacute':'\xDD','yacy':'\u044F','YAcy':'\u042F','ycirc':'\u0177','Ycirc':'\u0176','ycy':'\u044B','Ycy':'\u042B','yen':'\xA5','yfr':'\uD835\uDD36','Yfr':'\uD835\uDD1C','yicy':'\u0457','YIcy':'\u0407','yopf':'\uD835\uDD6A','Yopf':'\uD835\uDD50','yscr':'\uD835\uDCCE','Yscr':'\uD835\uDCB4','yucy':'\u044E','YUcy':'\u042E','yuml':'\xFF','Yuml':'\u0178','zacute':'\u017A','Zacute':'\u0179','zcaron':'\u017E','Zcaron':'\u017D','zcy':'\u0437','Zcy':'\u0417','zdot':'\u017C','Zdot':'\u017B','zeetrf':'\u2128','ZeroWidthSpace':'\u200B','zeta':'\u03B6','Zeta':'\u0396','zfr':'\uD835\uDD37','Zfr':'\u2128','zhcy':'\u0436','ZHcy':'\u0416','zigrarr':'\u21DD','zopf':'\uD835\uDD6B','Zopf':'\u2124','zscr':'\uD835\uDCCF','Zscr':'\uD835\uDCB5','zwj':'\u200D','zwnj':'\u200C'};
			var decodeMapLegacy = {'aacute':'\xE1','Aacute':'\xC1','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','aelig':'\xE6','AElig':'\xC6','agrave':'\xE0','Agrave':'\xC0','amp':'&','AMP':'&','aring':'\xE5','Aring':'\xC5','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','brvbar':'\xA6','ccedil':'\xE7','Ccedil':'\xC7','cedil':'\xB8','cent':'\xA2','copy':'\xA9','COPY':'\xA9','curren':'\xA4','deg':'\xB0','divide':'\xF7','eacute':'\xE9','Eacute':'\xC9','ecirc':'\xEA','Ecirc':'\xCA','egrave':'\xE8','Egrave':'\xC8','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','frac12':'\xBD','frac14':'\xBC','frac34':'\xBE','gt':'>','GT':'>','iacute':'\xED','Iacute':'\xCD','icirc':'\xEE','Icirc':'\xCE','iexcl':'\xA1','igrave':'\xEC','Igrave':'\xCC','iquest':'\xBF','iuml':'\xEF','Iuml':'\xCF','laquo':'\xAB','lt':'<','LT':'<','macr':'\xAF','micro':'\xB5','middot':'\xB7','nbsp':'\xA0','not':'\xAC','ntilde':'\xF1','Ntilde':'\xD1','oacute':'\xF3','Oacute':'\xD3','ocirc':'\xF4','Ocirc':'\xD4','ograve':'\xF2','Ograve':'\xD2','ordf':'\xAA','ordm':'\xBA','oslash':'\xF8','Oslash':'\xD8','otilde':'\xF5','Otilde':'\xD5','ouml':'\xF6','Ouml':'\xD6','para':'\xB6','plusmn':'\xB1','pound':'\xA3','quot':'"','QUOT':'"','raquo':'\xBB','reg':'\xAE','REG':'\xAE','sect':'\xA7','shy':'\xAD','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','szlig':'\xDF','thorn':'\xFE','THORN':'\xDE','times':'\xD7','uacute':'\xFA','Uacute':'\xDA','ucirc':'\xFB','Ucirc':'\xDB','ugrave':'\xF9','Ugrave':'\xD9','uml':'\xA8','uuml':'\xFC','Uuml':'\xDC','yacute':'\xFD','Yacute':'\xDD','yen':'\xA5','yuml':'\xFF'};
			var decodeMapNumeric = {'0':'\uFFFD','128':'\u20AC','130':'\u201A','131':'\u0192','132':'\u201E','133':'\u2026','134':'\u2020','135':'\u2021','136':'\u02C6','137':'\u2030','138':'\u0160','139':'\u2039','140':'\u0152','142':'\u017D','145':'\u2018','146':'\u2019','147':'\u201C','148':'\u201D','149':'\u2022','150':'\u2013','151':'\u2014','152':'\u02DC','153':'\u2122','154':'\u0161','155':'\u203A','156':'\u0153','158':'\u017E','159':'\u0178'};
			var invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];

			/*--------------------------------------------------------------------------*/

			var stringFromCharCode = String.fromCharCode;

			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			var has = function(object, propertyName) {
				return hasOwnProperty.call(object, propertyName);
			};

			var contains = function(array, value) {
				var index = -1;
				var length = array.length;
				while (++index < length) {
					if (array[index] == value) {
						return true;
					}
				}
				return false;
			};

			var merge = function(options, defaults) {
				if (!options) {
					return defaults;
				}
				var result = {};
				var key;
				for (key in defaults) {
					// A `hasOwnProperty` check is not needed here, since only recognized
					// option names are used anyway. Any others are ignored.
					result[key] = has(options, key) ? options[key] : defaults[key];
				}
				return result;
			};

			// Modified version of `ucs2encode`; see https://mths.be/punycode.
			var codePointToSymbol = function(codePoint, strict) {
				var output = '';
				if ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {
					// See issue #4:
					// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
					// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
					// REPLACEMENT CHARACTER.”
					if (strict) {
						parseError('character reference outside the permissible Unicode range');
					}
					return '\uFFFD';
				}
				if (has(decodeMapNumeric, codePoint)) {
					if (strict) {
						parseError('disallowed character reference');
					}
					return decodeMapNumeric[codePoint];
				}
				if (strict && contains(invalidReferenceCodePoints, codePoint)) {
					parseError('disallowed character reference');
				}
				if (codePoint > 0xFFFF) {
					codePoint -= 0x10000;
					output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
					codePoint = 0xDC00 | codePoint & 0x3FF;
				}
				output += stringFromCharCode(codePoint);
				return output;
			};

			var hexEscape = function(codePoint) {
				return '&#x' + codePoint.toString(16).toUpperCase() + ';';
			};

			var decEscape = function(codePoint) {
				return '&#' + codePoint + ';';
			};

			var parseError = function(message) {
				throw Error('Parse error: ' + message);
			};

			/*--------------------------------------------------------------------------*/

			var encode = function(string, options) {
				options = merge(options, encode.options);
				var strict = options.strict;
				if (strict && regexInvalidRawCodePoint.test(string)) {
					parseError('forbidden code point');
				}
				var encodeEverything = options.encodeEverything;
				var useNamedReferences = options.useNamedReferences;
				var allowUnsafeSymbols = options.allowUnsafeSymbols;
				var escapeCodePoint = options.decimal ? decEscape : hexEscape;

				var escapeBmpSymbol = function(symbol) {
					return escapeCodePoint(symbol.charCodeAt(0));
				};

				if (encodeEverything) {
					// Encode ASCII symbols.
					string = string.replace(regexAsciiWhitelist, function(symbol) {
						// Use named references if requested & possible.
						if (useNamedReferences && has(encodeMap, symbol)) {
							return '&' + encodeMap[symbol] + ';';
						}
						return escapeBmpSymbol(symbol);
					});
					// Shorten a few escapes that represent two symbols, of which at least one
					// is within the ASCII range.
					if (useNamedReferences) {
						string = string
							.replace(/&gt;\u20D2/g, '&nvgt;')
							.replace(/&lt;\u20D2/g, '&nvlt;')
							.replace(/&#x66;&#x6A;/g, '&fjlig;');
					}
					// Encode non-ASCII symbols.
					if (useNamedReferences) {
						// Encode non-ASCII symbols that can be replaced with a named reference.
						string = string.replace(regexEncodeNonAscii, function(string) {
							// Note: there is no need to check `has(encodeMap, string)` here.
							return '&' + encodeMap[string] + ';';
						});
					}
					// Note: any remaining non-ASCII symbols are handled outside of the `if`.
				} else if (useNamedReferences) {
					// Apply named character references.
					// Encode `<>"'&` using named character references.
					if (!allowUnsafeSymbols) {
						string = string.replace(regexEscape, function(string) {
							return '&' + encodeMap[string] + ';'; // no need to check `has()` here
						});
					}
					// Shorten escapes that represent two symbols, of which at least one is
					// `<>"'&`.
					string = string
						.replace(/&gt;\u20D2/g, '&nvgt;')
						.replace(/&lt;\u20D2/g, '&nvlt;');
					// Encode non-ASCII symbols that can be replaced with a named reference.
					string = string.replace(regexEncodeNonAscii, function(string) {
						// Note: there is no need to check `has(encodeMap, string)` here.
						return '&' + encodeMap[string] + ';';
					});
				} else if (!allowUnsafeSymbols) {
					// Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
					// using named character references.
					string = string.replace(regexEscape, escapeBmpSymbol);
				}
				return string
					// Encode astral symbols.
					.replace(regexAstralSymbols, function($0) {
						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						var high = $0.charCodeAt(0);
						var low = $0.charCodeAt(1);
						var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
						return escapeCodePoint(codePoint);
					})
					// Encode any remaining BMP symbols that are not printable ASCII symbols
					// using a hexadecimal escape.
					.replace(regexBmpWhitelist, escapeBmpSymbol);
			};
			// Expose default options (so they can be overridden globally).
			encode.options = {
				'allowUnsafeSymbols': false,
				'encodeEverything': false,
				'strict': false,
				'useNamedReferences': false,
				'decimal' : false
			};

			var decode = function(html, options) {
				options = merge(options, decode.options);
				var strict = options.strict;
				if (strict && regexInvalidEntity.test(html)) {
					parseError('malformed character reference');
				}
				return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
					var codePoint;
					var semicolon;
					var decDigits;
					var hexDigits;
					var reference;
					var next;

					if ($1) {
						reference = $1;
						// Note: there is no need to check `has(decodeMap, reference)`.
						return decodeMap[reference];
					}

					if ($2) {
						// Decode named character references without trailing `;`, e.g. `&amp`.
						// This is only a parse error if it gets converted to `&`, or if it is
						// followed by `=` in an attribute context.
						reference = $2;
						next = $3;
						if (next && options.isAttributeValue) {
							if (strict && next == '=') {
								parseError('`&` did not start a character reference');
							}
							return $0;
						} else {
							if (strict) {
								parseError(
									'named character reference was not terminated by a semicolon'
								);
							}
							// Note: there is no need to check `has(decodeMapLegacy, reference)`.
							return decodeMapLegacy[reference] + (next || '');
						}
					}

					if ($4) {
						// Decode decimal escapes, e.g. `&#119558;`.
						decDigits = $4;
						semicolon = $5;
						if (strict && !semicolon) {
							parseError('character reference was not terminated by a semicolon');
						}
						codePoint = parseInt(decDigits, 10);
						return codePointToSymbol(codePoint, strict);
					}

					if ($6) {
						// Decode hexadecimal escapes, e.g. `&#x1D306;`.
						hexDigits = $6;
						semicolon = $7;
						if (strict && !semicolon) {
							parseError('character reference was not terminated by a semicolon');
						}
						codePoint = parseInt(hexDigits, 16);
						return codePointToSymbol(codePoint, strict);
					}

					// If we’re still here, `if ($7)` is implied; it’s an ambiguous
					// ampersand for sure. https://mths.be/notes/ambiguous-ampersands
					if (strict) {
						parseError(
							'named character reference was not terminated by a semicolon'
						);
					}
					return $0;
				});
			};
			// Expose default options (so they can be overridden globally).
			decode.options = {
				'isAttributeValue': false,
				'strict': false
			};

			var escape = function(string) {
				return string.replace(regexEscape, function($0) {
					// Note: there is no need to check `has(escapeMap, $0)` here.
					return escapeMap[$0];
				});
			};

			/*--------------------------------------------------------------------------*/

			var he = {
				'version': '1.2.0',
				'encode': encode,
				'decode': decode,
				'escape': escape,
				'unescape': decode
			};

			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (freeExports && !freeExports.nodeType) {
				if (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+
					freeModule.exports = he;
				} else { // in Narwhal or RingoJS v0.7.0-
					for (var key in he) {
						has(he, key) && (freeExports[key] = he[key]);
					}
				}
			} else { // in Rhino or a web browser
				root.he = he;
			}

		}(commonjsGlobal)); 
	} (he$1, he$1.exports));

	var heExports = he$1.exports;
	var he = /*@__PURE__*/getDefaultExportFromCjs(heExports);

	var makeLengthClass,export$$f;
	makeLengthClass = function(generator){
	  return (function(){
	    var g, unitsSp; constructor.prototype;
	    g = generator;
	    constructor.prototype._value = 0;
	    constructor.prototype._unit = "";
	    unitsSp = new Map([["sp", 1], ["pt", 65536], ["bp", 65536 * 72.27 / 72], ["pc", 65536 * 12], ["dd", 65536 * 1238 / 1157], ["cc", 65536 * 1238 / 1157 * 12], ["in", 65536 * 72.27], ["px", 65536 * 72.27 / 96], ["mm", 65536 * 7227 / 2540], ["cm", 65536 * 7227 / 254]]);
	    constructor.zero = new constructor(0, "sp");
	    function constructor(value, unit){
	      if (!typeof value === "number") {
	        g.error("Length CTOR: value needs to be a number!");
	      }
	      this._value = value;
	      this._unit = unit;
	      if (unitsSp.has(unit)) {
	        this._value = value * unitsSp.get(unit);
	        this._unit = "sp";
	      }
	    }
	    Object.defineProperty(constructor.prototype, 'value', {
	      get: function(){
	        if (this._unit === "sp") {
	          return g.round(this._value / unitsSp.get("px")) + "px";
	        } else {
	          return g.round(this._value) + this._unit;
	        }
	      },
	      configurable: true,
	      enumerable: true
	    });
	    Object.defineProperty(constructor.prototype, 'px', {
	      get: function(){
	        if (this._unit === "sp") {
	          return g.round(this._value / unitsSp.get("px"));
	        } else {
	          return g.error("Length.px() called on relative length!");
	        }
	      },
	      configurable: true,
	      enumerable: true
	    });
	    Object.defineProperty(constructor.prototype, 'pxpct', {
	      get: function(){
	        if (this._unit === "sp") {
	          return g.round(this._value / unitsSp.get("px"));
	        } else {
	          return g.round(this._value) + this._unit;
	        }
	      },
	      configurable: true,
	      enumerable: true
	    });
	    Object.defineProperty(constructor.prototype, 'unit', {
	      get: function(){
	        return this._unit;
	      },
	      configurable: true,
	      enumerable: true
	    });
	    constructor.prototype.cmp = function(l){
	      if (this._unit !== l._unit) {
	        g.error("Length.cmp(): incompatible lengths! (" + this._unit + " and " + l._unit + ")");
	      }
	      if (this._value < l._value) {
	        return -1;
	      }
	      if (this._value === l._value) {
	        return 0;
	      }
	      return 1;
	    };
	    constructor.prototype.add = function(l){
	      if (this._unit !== l._unit) {
	        g.error("Length.add(): incompatible lengths! (" + this._unit + " and " + l._unit + ")");
	      }
	      return new g.Length(this._value + l._value, this._unit);
	    };
	    constructor.prototype.sub = function(l){
	      if (this._unit !== l._unit) {
	        g.error("Length.sub: incompatible lengths! (" + this._unit + " and " + l._unit + ")");
	      }
	      return new g.Length(this._value - l._value, this._unit);
	    };
	    constructor.prototype.mul = function(s){
	      return new g.Length(this._value * s, this._unit);
	    };
	    constructor.prototype.div = function(s){
	      return new g.Length(this._value / s, this._unit);
	    };
	    constructor.prototype.abs = function(){
	      return new g.Length(Math.abs(this._value), this._unit);
	    };
	    constructor.prototype.ratio = function(l){
	      if (this._unit !== l._unit) {
	        g.error("Length.ratio: incompatible lengths! (" + this._unit + " and " + l._unit + ")");
	      }
	      return this._value / l._value;
	    };
	    constructor.prototype.norm = function(l){
	      if (this._unit !== l._unit) {
	        g.error("Length.norm: incompatible lengths! (" + this._unit + " and " + l._unit + ")");
	      }
	      return new g.Length(Math.sqrt(Math.pow(this._value, 2) + Math.pow(l._value, 2)), this._unit);
	    };
	    constructor.min = function(){
	      return Array.from(arguments).reduce(function(a, b){
	        if (a.cmp(b) < 0) {
	          return a;
	        } else {
	          return b;
	        }
	      });
	    };
	    constructor.max = function(){
	      return Array.from(arguments).reduce(function(a, b){
	        if (a.cmp(b) > 0) {
	          return a;
	        } else {
	          return b;
	        }
	      });
	    };
	    return constructor;
	  }());
	};
	export$$f = (function(){
	  Vector.displayName = 'Vector';
	  Vector.prototype;
	  Vector.prototype._x = null;
	  Vector.prototype._y = null;
	  function Vector(x, y){
	    this._x = x;
	    this._y = y;
	  }
	  Object.defineProperty(Vector.prototype, 'x', {
	    get: function(){
	      return this._x;
	    },
	    configurable: true,
	    enumerable: true
	  });
	  Object.defineProperty(Vector.prototype, 'y', {
	    get: function(){
	      return this._y;
	    },
	    configurable: true,
	    enumerable: true
	  });
	  Vector.prototype.add = function(v){
	    return new Vector(this._x.add(v.x), this._y.add(v.y));
	  };
	  Vector.prototype.sub = function(v){
	    return new Vector(this._x.sub(v.x), this._y.sub(v.y));
	  };
	  Vector.prototype.mul = function(s){
	    return new Vector(this._x.mul(s), this._y.mul(s));
	  };
	  Vector.prototype.shift_start = function(l){
	    var x, y, msq, imsq, dir_x, dir_y, sx, sy;
	    if (this._x.unit !== this._y.unit) {
	      throw new Error("Vector.shift_start: incompatible lengths! (" + this._x.unit + " and " + this._y.unit + ")");
	    }
	    x = this._x._value;
	    y = this._y._value;
	    msq = Math.sqrt(1 + y * y / (x * x));
	    imsq = Math.sqrt(1 + x * x / (y * y));
	    dir_x = x < 0 ? -1 : 1;
	    dir_y = y < 0 ? -1 : 1;
	    if (x !== 0 && y !== 0) {
	      sx = l.div(msq).mul(-dir_x);
	      sy = l.div(imsq).mul(-dir_y);
	    } else if (y === 0) {
	      sx = l.mul(-dir_x);
	      sy = this._y.mul(0);
	    } else {
	      sx = this._x.mul(0);
	      sy = l.mul(-dir_y);
	    }
	    return new Vector(sx, sy);
	  };
	  Vector.prototype.shift_end = function(l){
	    var x, y, msq, imsq, dir_x, dir_y, ex, ey;
	    if (this._x.unit !== this._y.unit) {
	      throw new Error("Vector.shift_end: incompatible lengths! (" + this._x.unit + " and " + this._y.unit + ")");
	    }
	    x = this._x._value;
	    y = this._y._value;
	    msq = Math.sqrt(1 + y * y / (x * x));
	    imsq = Math.sqrt(1 + x * x / (y * y));
	    dir_x = x < 0 ? -1 : 1;
	    dir_y = y < 0 ? -1 : 1;
	    if (x !== 0 && y !== 0) {
	      ex = this._x.add(l.div(msq).mul(dir_x));
	      ey = this._y.add(l.div(imsq).mul(dir_y));
	    } else if (y === 0) {
	      ex = this._x.add(l.mul(dir_x));
	      ey = this._y;
	    } else {
	      ex = this._x;
	      ey = this._y.add(l.mul(dir_y));
	    }
	    return new Vector(ex, ey);
	  };
	  Vector.prototype.norm = function(){
	    return this._x.norm(this._y);
	  };
	  return Vector;
	}());

	var types = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get Vector () { return export$$f; },
		get makeLengthClass () { return makeLengthClass; }
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(types);

	var latexParser_pegjs = /*
	 * Generated by PEG.js 0.10.0.
	 *
	 * http://pegjs.org/
	 */
	(function() {

	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }

	  function peg$SyntaxError(message, expected, found, location) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.location = location;
	    this.name     = "SyntaxError";

	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, peg$SyntaxError);
	    }
	  }

	  peg$subclass(peg$SyntaxError, Error);

	  peg$SyntaxError.buildMessage = function(expected, found) {
	    var DESCRIBE_EXPECTATION_FNS = {
	          literal: function(expectation) {
	            return "\"" + literalEscape(expectation.text) + "\"";
	          },

	          "class": function(expectation) {
	            var escapedParts = "",
	                i;

	            for (i = 0; i < expectation.parts.length; i++) {
	              escapedParts += expectation.parts[i] instanceof Array
	                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
	                : classEscape(expectation.parts[i]);
	            }

	            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
	          },

	          any: function(expectation) {
	            return "any character";
	          },

	          end: function(expectation) {
	            return "end of input";
	          },

	          other: function(expectation) {
	            return expectation.description;
	          }
	        };

	    function hex(ch) {
	      return ch.charCodeAt(0).toString(16).toUpperCase();
	    }

	    function literalEscape(s) {
	      return s
	        .replace(/\\/g, '\\\\')
	        .replace(/"/g,  '\\"')
	        .replace(/\0/g, '\\0')
	        .replace(/\t/g, '\\t')
	        .replace(/\n/g, '\\n')
	        .replace(/\r/g, '\\r')
	        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	    }

	    function classEscape(s) {
	      return s
	        .replace(/\\/g, '\\\\')
	        .replace(/\]/g, '\\]')
	        .replace(/\^/g, '\\^')
	        .replace(/-/g,  '\\-')
	        .replace(/\0/g, '\\0')
	        .replace(/\t/g, '\\t')
	        .replace(/\n/g, '\\n')
	        .replace(/\r/g, '\\r')
	        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	    }

	    function describeExpectation(expectation) {
	      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	    }

	    function describeExpected(expected) {
	      var descriptions = new Array(expected.length),
	          i, j;

	      for (i = 0; i < expected.length; i++) {
	        descriptions[i] = describeExpectation(expected[i]);
	      }

	      descriptions.sort();

	      if (descriptions.length > 0) {
	        for (i = 1, j = 1; i < descriptions.length; i++) {
	          if (descriptions[i - 1] !== descriptions[i]) {
	            descriptions[j] = descriptions[i];
	            j++;
	          }
	        }
	        descriptions.length = j;
	      }

	      switch (descriptions.length) {
	        case 1:
	          return descriptions[0];

	        case 2:
	          return descriptions[0] + " or " + descriptions[1];

	        default:
	          return descriptions.slice(0, -1).join(", ")
	            + ", or "
	            + descriptions[descriptions.length - 1];
	      }
	    }

	    function describeFound(found) {
	      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	    }

	    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	  };

	  function peg$parse(input, options) {
	    options = options !== void 0 ? options : {};

	    var peg$FAILED = {},

	        peg$startRuleFunctions = { latex: peg$parselatex },
	        peg$startRuleFunction  = peg$parselatex,

	        peg$c0 = function() { error("expected \\begin{document}"); },
	        peg$c1 = function() { error("\\end{document} missing"); },
	        peg$c2 = peg$anyExpectation(),
	        peg$c3 = function() { return g; },
	        peg$c4 = function() { g.macro("documentclass", [null, g.documentClass, null]); return true; },
	        peg$c5 = "document",
	        peg$c6 = peg$literalExpectation("document", false),
	        peg$c7 = function() { g.startBalanced(); g.enterGroup(); return true; },
	        peg$c8 = function(pars) {
	                g.exitGroup();
	                g.isBalanced() || error("groups need to be balanced!");
	                var l = g.endBalanced();
	                // this error should be impossible, it's just to be safe
	                l == 1 && g.isBalanced() || error("grammar error: " + l + " levels of balancing are remaining, or the last level is unbalanced!");

	                g.createDocument(pars);
	                g.logUndefinedRefs();
	                return g;
	            },
	        peg$c9 = function(bb, n, txt, be) {
	                bb.length > 0 && g.break();
	                var p = g.create(g.par, txt, n ? "noindent" : "");
	                be && g.break();
	                return p;
	            },
	        peg$c10 = function() { return g.create(g.linebreak); },
	        peg$c11 = function() { return undefined; },
	        peg$c12 = function() { return g.createText(g.sp); },
	        peg$c13 = peg$otherExpectation("text"),
	        peg$c14 = function(p) { return g.createText(p.join("")); },
	        peg$c15 = function(m) { return m; },
	        peg$c16 = function() { g.enterGroup(true); return true; },
	        peg$c17 = function(s) { return g.createText(s); },
	        peg$c18 = function() { if (!g.isBalanced()) { g.exitGroup(); return true; } },
	        peg$c19 = peg$otherExpectation("primitive"),
	        peg$c20 = function() { return g.sp; },
	        peg$c21 = function(b) { return !g.isBalanced() },
	        peg$c22 = function(b) { return b; },
	        peg$c23 = function(e) { return e; },
	        peg$c24 = function(m) { g.break(); return m; },
	        peg$c25 = function(id) { return g.isPreamble(id); },
	        peg$c26 = function(id) { return g.isVmode(id); },
	        peg$c27 = function(id) { return g.isHmode(id); },
	        peg$c28 = function(id) { return g.isHVmode(id); },
	        peg$c29 = function(id) { return g.isHmode(id) || g.isHVmode(id); },
	        peg$c30 = function(name) { if (g.hasMacro(name)) { g.beginArgs(name); return true; } },
	        peg$c31 = function(name) {
	                var args = g.parsedArgs();
	                g.endArgs();
	                return g.createFragment(g.macro(name, args));
	            },
	        peg$c32 = function(m) { error("macro only allowed in preamble: " + m); },
	        peg$c33 = function(m) { error("unknown macro: \\" + m); },
	        peg$c34 = peg$otherExpectation("identifier"),
	        peg$c35 = /^[\-$&_\/@]/,
	        peg$c36 = peg$classExpectation(["-", "$", "&", "_", "/", "@"], false, false),
	        peg$c37 = /^[=,]/,
	        peg$c38 = peg$classExpectation(["=", ","], false, false),
	        peg$c39 = peg$otherExpectation("key=value"),
	        peg$c40 = "=",
	        peg$c41 = peg$literalExpectation("=", false),
	        peg$c42 = function(k) { error("value expected"); },
	        peg$c43 = function(k, v) { return v.trim(); },
	        peg$c44 = function(k, v) { return [k.trim(), v == null ? true : v ]; },
	        peg$c45 = function() { return g.nextArg("X") },
	        peg$c46 = function() { g.preExecMacro(); },
	        peg$c47 = function() { return g.nextArg("g") },
	        peg$c48 = function() { g.argError("group argument expected"); },
	        peg$c49 = function(a) { g.addParsedArg(a); },
	        peg$c50 = function() { return g.nextArg("hg") },
	        peg$c51 = function() { return g.nextArg("h") },
	        peg$c52 = function() { g.argError("horizontal material expected"); },
	        peg$c53 = function(h) { g.addParsedArg(h); },
	        peg$c54 = function() { return g.nextArg("o?") },
	        peg$c55 = function(o) { g.addParsedArg(o); },
	        peg$c56 = function() { return g.nextArg("i") },
	        peg$c57 = function() { g.argError("id group argument expected"); },
	        peg$c58 = function(i) { g.addParsedArg(i); },
	        peg$c59 = function() { return g.nextArg("ie") },
	        peg$c60 = function() { g.argError("id or empty group arg expected"); },
	        peg$c61 = function() { return g.nextArg("i?") },
	        peg$c62 = function() { return g.nextArg("k") },
	        peg$c63 = function() { g.argError("key group argument expected"); },
	        peg$c64 = function(k) { g.addParsedArg(k); },
	        peg$c65 = function() { return g.nextArg("k?") },
	        peg$c66 = function() { return g.nextArg("kv?") },
	        peg$c67 = function() { return g.nextArg("csv") },
	        peg$c68 = function() { g.argError("comma-sep. values group expected"); },
	        peg$c69 = function(v) { g.addParsedArg(v); },
	        peg$c70 = function() { return g.nextArg("n") },
	        peg$c71 = function() { g.argError("num group argument expected"); },
	        peg$c72 = function(n) { g.addParsedArg(n); },
	        peg$c73 = function() { return g.nextArg("n?") },
	        peg$c74 = function() { return g.nextArg("l") },
	        peg$c75 = function() { g.argError("length group argument expected"); },
	        peg$c76 = function(l) { g.addParsedArg(l); },
	        peg$c77 = function() { return g.nextArg("lg?") },
	        peg$c78 = function() { return g.nextArg("l?") },
	        peg$c79 = function() { return g.nextArg("m") },
	        peg$c80 = function() { g.argError("macro group argument expected"); },
	        peg$c81 = function(m) { g.addParsedArg(m); },
	        peg$c82 = function() { return g.nextArg("u") },
	        peg$c83 = function() { g.argError("url group argument expected"); },
	        peg$c84 = function(u) { g.addParsedArg(u); },
	        peg$c85 = function() { return g.nextArg("c") },
	        peg$c86 = function() { g.argError("color group expected"); },
	        peg$c87 = function(c) { g.addParsedArg(c); },
	        peg$c88 = function() { return g.nextArg("c-ml") },
	        peg$c89 = function() { g.argError("color model list expected"); },
	        peg$c90 = function() { return g.nextArg("c-ml?") },
	        peg$c91 = function() { return g.nextArg("c-ssp") },
	        peg$c92 = function() { g.argError("color set spec expected"); },
	        peg$c93 = function() { return g.nextArg("c-spl") },
	        peg$c94 = function() { g.argError("color spec list expected"); },
	        peg$c95 = function() { return g.nextArg("cl") },
	        peg$c96 = function() { g.argError("coordinate/length group expected"); },
	        peg$c97 = function() { return g.nextArg("cl?") },
	        peg$c98 = function() { return g.nextArg("v") },
	        peg$c99 = function() { g.argError("coordinate pair expected"); },
	        peg$c100 = function() { return g.nextArg("v?") },
	        peg$c101 = function() { return g.nextArg("cols") },
	        peg$c102 = function() { g.argError("column specification missing"); },
	        peg$c103 = function() { return g.nextArg("is") },
	        peg$c104 = function() { return g.nextArg("items") },
	        peg$c105 = function() { return g.nextArg("enumitems") },
	        peg$c106 = function() { return g.selectArgsBranch("[") },
	        peg$c107 = function() { return g.selectArgsBranch("{") /* requirement in pegjs: balance } */ },
	        peg$c108 = function() { return g.nextArg("s") },
	        peg$c109 = "*",
	        peg$c110 = peg$literalExpectation("*", false),
	        peg$c111 = function(s) { g.addParsedArg(!!s); return !!s; },
	        peg$c112 = function(id) { return id; },
	        peg$c113 = function(k) { return k; },
	        peg$c114 = ",",
	        peg$c115 = peg$literalExpectation(",", false),
	        peg$c116 = function() {return null;},
	        peg$c117 = function(kv) {return kv;},
	        peg$c118 = function(kv_list) {
	                                return new Map(kv_list.filter(kv => kv != null));
	                            },
	        peg$c119 = function(v) {return v.trim();},
	        peg$c120 = function(v_list) {
	                                return v_list.filter(v => v != null);
	                            },
	        peg$c121 = "sp",
	        peg$c122 = peg$literalExpectation("sp", false),
	        peg$c123 = "pt",
	        peg$c124 = peg$literalExpectation("pt", false),
	        peg$c125 = "px",
	        peg$c126 = peg$literalExpectation("px", false),
	        peg$c127 = "dd",
	        peg$c128 = peg$literalExpectation("dd", false),
	        peg$c129 = "mm",
	        peg$c130 = peg$literalExpectation("mm", false),
	        peg$c131 = "pc",
	        peg$c132 = peg$literalExpectation("pc", false),
	        peg$c133 = "cc",
	        peg$c134 = peg$literalExpectation("cc", false),
	        peg$c135 = "cm",
	        peg$c136 = peg$literalExpectation("cm", false),
	        peg$c137 = "in",
	        peg$c138 = peg$literalExpectation("in", false),
	        peg$c139 = "ex",
	        peg$c140 = peg$literalExpectation("ex", false),
	        peg$c141 = "em",
	        peg$c142 = peg$literalExpectation("em", false),
	        peg$c143 = function(u) { return u; },
	        peg$c144 = function(l, u) { return new g.Length(l, u); },
	        peg$c145 = function(l) { return l; },
	        peg$c146 = function(n) { return n; },
	        peg$c148 = function(f) { return g.length("unitlength").mul(f) },
	        peg$c149 = function(c) { return c; },
	        peg$c150 = "(",
	        peg$c151 = peg$literalExpectation("(", false),
	        peg$c152 = ")",
	        peg$c153 = peg$literalExpectation(")", false),
	        peg$c154 = function(x, y) { return new Vector(x, y); },
	        peg$c155 = "%",
	        peg$c156 = peg$literalExpectation("%", false),
	        peg$c157 = function(p) { return p; },
	        peg$c158 = /^[\-._~:\/?#[\]@!$&()*+,;=]/,
	        peg$c159 = peg$classExpectation(["-", ".", "_", "~", ":", "/", "?", "#", "[", "]", "@", "!", "$", "&", "(", ")", "*", "+", ",", ";", "="], false, false),
	        peg$c160 = "'",
	        peg$c161 = peg$literalExpectation("'", false),
	        peg$c162 = function() { error("illegal char in url given"); },
	        peg$c163 = function(c) {return c;},
	        peg$c164 = function(url) { return url.join(""); },
	        peg$c165 = function() { g.enterGroup(); g.startBalanced(); return true; },
	        peg$c166 = function(s, p) {
	                                g.isBalanced() || error("groups inside an argument need to be balanced!");
	                                g.endBalanced();
	                                g.exitGroup();

	                                s != undefined && p.unshift(g.createText(s));
	                                return g.createFragment(p);
	                            },
	        peg$c167 = function(l) { return g.createFragment(l); },
	        peg$c168 = function(s, h) {
	                                g.isBalanced() || error("groups inside an argument need to be balanced!");
	                                g.endBalanced();
	                                g.exitGroup();
	                                return g.createFragment(g.createText(s), h);
	                            },
	        peg$c169 = function(p) { return g.isBalanced(); },
	        peg$c170 = function(p) {
	                                g.isBalanced() || error("groups inside an optional argument need to be balanced!");
	                                g.endBalanced();
	                                g.exitGroup();
	                                return g.createFragment(p);
	                            },
	        peg$c171 = "value",
	        peg$c172 = peg$literalExpectation("value", false),
	        peg$c173 = "real",
	        peg$c174 = peg$literalExpectation("real", false),
	        peg$c175 = function(f) { return f; },
	        peg$c176 = function(expr) { return expr; },
	        peg$c177 = function(c) { return g.counter(c); },
	        peg$c178 = "+",
	        peg$c179 = peg$literalExpectation("+", false),
	        peg$c180 = "-",
	        peg$c181 = peg$literalExpectation("-", false),
	        peg$c182 = function(s, n) { return s == "-" ? -n : n; },
	        peg$c183 = "/",
	        peg$c184 = peg$literalExpectation("/", false),
	        peg$c185 = function(head, tail) {
	                            var result = head, i;

	                            for (i = 0; i < tail.length; i++) {
	                                if (tail[i][1] === "*") { result = Math.trunc(result * tail[i][3]); }
	                                if (tail[i][1] === "/") { result = Math.trunc(result / tail[i][3]); }
	                            }

	                            return Math.trunc(result);
	                        },
	        peg$c186 = function(head, tail) {
	                            var result = head, i;

	                            for (i = 0; i < tail.length; i++) {
	                                if (tail[i][1] === "+") { result += tail[i][3]; }
	                                if (tail[i][1] === "-") { result -= tail[i][3]; }
	                            }

	                            return result;
	                        },
	        peg$c187 = function(ml) { return ml; },
	        peg$c188 = function(cssp) { return cssp; },
	        peg$c189 = function(csl) { return csl; },
	        peg$c190 = ":",
	        peg$c191 = peg$literalExpectation(":", false),
	        peg$c192 = ";",
	        peg$c193 = peg$literalExpectation(";", false),
	        peg$c194 = "!",
	        peg$c195 = peg$literalExpectation("!", false),
	        peg$c196 = ">",
	        peg$c197 = peg$literalExpectation(">", false),
	        peg$c198 = "wheel",
	        peg$c199 = peg$literalExpectation("wheel", false),
	        peg$c200 = "twheel",
	        peg$c201 = peg$literalExpectation("twheel", false),
	        peg$c202 = function(m) { return m.length % 2 == 0; },
	        peg$c203 = ".",
	        peg$c204 = peg$literalExpectation(".", false),
	        peg$c205 = "!!",
	        peg$c206 = peg$literalExpectation("!!", false),
	        peg$c207 = "[",
	        peg$c208 = peg$literalExpectation("[", false),
	        peg$c209 = "]",
	        peg$c210 = peg$literalExpectation("]", false),
	        peg$c211 = "rgb",
	        peg$c212 = peg$literalExpectation("rgb", false),
	        peg$c213 = "cmyk",
	        peg$c214 = peg$literalExpectation("cmyk", false),
	        peg$c215 = "cmy",
	        peg$c216 = peg$literalExpectation("cmy", false),
	        peg$c217 = "hsb",
	        peg$c218 = peg$literalExpectation("hsb", false),
	        peg$c219 = "gray",
	        peg$c220 = peg$literalExpectation("gray", false),
	        peg$c221 = "RBG",
	        peg$c222 = peg$literalExpectation("RBG", false),
	        peg$c223 = "HTML",
	        peg$c224 = peg$literalExpectation("HTML", false),
	        peg$c225 = "HSB",
	        peg$c226 = peg$literalExpectation("HSB", false),
	        peg$c227 = "Gray",
	        peg$c228 = peg$literalExpectation("Gray", false),
	        peg$c229 = "Hsb",
	        peg$c230 = peg$literalExpectation("Hsb", false),
	        peg$c231 = "tHsb",
	        peg$c232 = peg$literalExpectation("tHsb", false),
	        peg$c233 = "wave",
	        peg$c234 = peg$literalExpectation("wave", false),
	        peg$c235 = "named",
	        peg$c236 = peg$literalExpectation("named", false),
	        peg$c239 = function(core, cm, cml) {
	                            if (core) core = core[0];

	                            var list = [ cm ];
	                            cml.forEach(m => list.push(m[1]));

	                            return {
	                                core: core,
	                                models: list
	                            }
	                        },
	        peg$c240 = function(f, fl) { var list = [ f ]; fl.forEach(f => list.push(f[1])); return list; },
	        peg$c241 = function(cs, csl) {
	                            var list = [ cs ];
	                            csl.forEach(s => list.push(s[1]));
	                            return list;
	                        },
	        peg$c242 = function(n, s, sl) {
	                            var list = [ { name: n, speclist: s } ];

	                            sl.forEach(s => list.push({
	                                name: s[2],
	                                speclist: s[4]
	                            }));

	                            return list;
	                        },
	        peg$c243 = function(s, _c, _s) { return Array.isArray(_c) ? _c.concat(_s) : [_c].concat(_s); },
	        peg$c244 = function(s, c) {
	                return c.reduce(function(a, b) { return a.concat(b); }, s)
	            },
	        peg$c245 = "l",
	        peg$c246 = peg$literalExpectation("l", false),
	        peg$c247 = "c",
	        peg$c248 = peg$literalExpectation("c", false),
	        peg$c249 = "r",
	        peg$c250 = peg$literalExpectation("r", false),
	        peg$c251 = "p",
	        peg$c252 = peg$literalExpectation("p", false),
	        peg$c253 = function(c) {
	                return c;
	            },
	        peg$c254 = function(reps, c) {
	                var result = [];
	                for (var i = 0; i < reps; i++) {
	                    result = result.concat(c.slice());
	                }
	                return result
	            },
	        peg$c255 = "|",
	        peg$c256 = peg$literalExpectation("|", false),
	        peg$c257 = "@",
	        peg$c258 = peg$literalExpectation("@", false),
	        peg$c259 = function(a) { return a; },
	        peg$c260 = function(s) {
	                return {
	                    type: "separator",
	                    content: s
	                }
	            },
	        peg$c261 = "vspace",
	        peg$c262 = peg$literalExpectation("vspace", false),
	        peg$c263 = function(l) { return g.createVSpaceInline(l); },
	        peg$c264 = function(l) { return g.createVSpace(l); },
	        peg$c265 = "small",
	        peg$c266 = peg$literalExpectation("small", false),
	        peg$c267 = "med",
	        peg$c268 = peg$literalExpectation("med", false),
	        peg$c269 = "big",
	        peg$c270 = peg$literalExpectation("big", false),
	        peg$c271 = "skip",
	        peg$c272 = peg$literalExpectation("skip", false),
	        peg$c273 = function(s) { return g.createVSpaceSkipInline(s + "skip"); },
	        peg$c274 = function(s) { return g.createVSpaceSkip(s + "skip"); },
	        peg$c275 = "verb",
	        peg$c276 = peg$literalExpectation("verb", false),
	        peg$c277 = function(s, b, t) { return b == t; },
	        peg$c278 = function(s, b, v, e) {
	                                b == e || error("\\verb is missing its end delimiter: " + b);
	                                if (s)
	                                    v = v.replace(/ /g, g.visp);

	                                return g.create(g.verb, g.createVerbatim(v, true));
	                            },
	        peg$c279 = peg$otherExpectation("\\begin"),
	        peg$c280 = function(id) { g.begin(id); return id; },
	        peg$c281 = function(id, s) {
	                return { id, end: id + (s ? "*" : "") };
	            },
	        peg$c282 = peg$otherExpectation("\\end"),
	        peg$c283 = function(id, s) {
	                return id + (s ? "*" : "");
	            },
	        peg$c284 = function(id) { return g.macro(id.id, g.endArgs()); },
	        peg$c285 = function(id, node, s) {return g.createText(s); },
	        peg$c286 = function(id, node, sb, p, end_id, s) {return g.createText(s); },
	        peg$c287 = function(id, node, sb, p, end_id, se) {
	                var end = g.end(id.end, end_id);

	                // if nodes are created by macro, add content as children to the last element
	                // if node is a text node, just add it
	                // potential spaces after \begin and \end have to be added explicitely

	                var pf = g.createFragment(p);
	                if (pf && node && node.length > 0 && node[node.length - 1].nodeType === 1) {
	                    node[node.length - 1].appendChild(sb);
	                    node[node.length - 1].appendChild(pf);
	                    return g.createFragment(node, end, se);
	                }

	                return g.createFragment(node, sb, pf, end, se);     // use pf, fragments in p are now empty!!
	            },
	        peg$c288 = function(id) { g.break(); },
	        peg$c289 = function(id, node, p, end_id) {
	                var end = g.end(id.end, end_id);

	                // if nodes are created by macro, add content as children to the last element
	                // if node is a text node, just add it

	                var pf = g.createFragment(p);
	                if (pf && node && node.length > 0 && node[node.length - 1].nodeType === 1) {
	                    node[node.length - 1].appendChild(pf);
	                    return g.createFragment(node, end);
	                }
	                return g.createFragment(node, pf, end);
	            },
	        peg$c290 = "item",
	        peg$c291 = peg$literalExpectation("item", false),
	        peg$c292 = function() { g.break(); },
	        peg$c293 = function(og) { return og; },
	        peg$c294 = function(label, p) { return p; },
	        peg$c295 = function(label, pars) {
	                    return {
	                        label: label,
	                        text: g.createFragment(pars)
	                    };
	                },
	        peg$c296 = function(label) {
	                    // null is no opt_group (\item ...)
	                    // undefined is an empty one (\item[] ...)
	                    if (label === null) {
	                        var itemCounter = "enum" + g.roman(g.counter("@enumdepth"));
	                        var itemId = "item-" + g.nextId();
	                        g.stepCounter(itemCounter);
	                        g.refCounter(itemCounter, itemId);
	                        return {
	                            id:   itemId,
	                            node: g.macro("label" + itemCounter)
	                        };
	                    }
	                    return {
	                        id: undefined,
	                        node: label
	                    };
	                },
	        peg$c297 = peg$otherExpectation("comment environment"),
	        peg$c298 = "\\begin",
	        peg$c299 = peg$literalExpectation("\\begin", false),
	        peg$c300 = "{comment}",
	        peg$c301 = peg$literalExpectation("{comment}", false),
	        peg$c302 = function() { g.break(); return undefined; },
	        peg$c303 = "\\end",
	        peg$c304 = peg$literalExpectation("\\end", false),
	        peg$c305 = function(m) { return g.parseMath(m, false); },
	        peg$c306 = function(m) { return g.parseMath(m, true); },
	        peg$c307 = "begin",
	        peg$c308 = peg$literalExpectation("begin", false),
	        peg$c309 = function() {},
	        peg$c310 = "end",
	        peg$c311 = peg$literalExpectation("end", false),
	        peg$c312 = "par",
	        peg$c313 = peg$literalExpectation("par", false),
	        peg$c314 = "noindent",
	        peg$c315 = peg$literalExpectation("noindent", false),
	        peg$c316 = "plus",
	        peg$c317 = peg$literalExpectation("plus", false),
	        peg$c318 = "minus",
	        peg$c319 = peg$literalExpectation("minus", false),
	        peg$c320 = "endinput",
	        peg$c321 = peg$literalExpectation("endinput", false),
	        peg$c322 = "\\",
	        peg$c323 = peg$literalExpectation("\\", false),
	        peg$c324 = "{",
	        peg$c325 = peg$literalExpectation("{", false),
	        peg$c326 = "}",
	        peg$c327 = peg$literalExpectation("}", false),
	        peg$c328 = peg$otherExpectation("math"),
	        peg$c329 = "$",
	        peg$c330 = peg$literalExpectation("$", false),
	        peg$c331 = "&",
	        peg$c332 = peg$literalExpectation("&", false),
	        peg$c333 = peg$otherExpectation("parameter"),
	        peg$c334 = "#",
	        peg$c335 = peg$literalExpectation("#", false),
	        peg$c336 = "^",
	        peg$c337 = peg$literalExpectation("^", false),
	        peg$c338 = "_",
	        peg$c339 = peg$literalExpectation("_", false),
	        peg$c340 = "\0",
	        peg$c341 = peg$literalExpectation("\0", false),
	        peg$c342 = peg$otherExpectation("EOF"),
	        peg$c343 = peg$otherExpectation("newline"),
	        peg$c344 = "\n",
	        peg$c345 = peg$literalExpectation("\n", false),
	        peg$c346 = "\r\n",
	        peg$c347 = peg$literalExpectation("\r\n", false),
	        peg$c348 = "\r",
	        peg$c349 = peg$literalExpectation("\r", false),
	        peg$c350 = "\u2028",
	        peg$c351 = peg$literalExpectation("\u2028", false),
	        peg$c352 = "\u2029",
	        peg$c353 = peg$literalExpectation("\u2029", false),
	        peg$c354 = peg$otherExpectation("whitespace"),
	        peg$c355 = /^[ \t]/,
	        peg$c356 = peg$classExpectation([" ", "\t"], false, false),
	        peg$c357 = peg$otherExpectation("comment"),
	        peg$c358 = peg$otherExpectation("spaces"),
	        peg$c359 = function() { return g.brsp; },
	        peg$c360 = peg$otherExpectation("control space"),
	        peg$c361 = peg$otherExpectation("non-brk space"),
	        peg$c362 = "~",
	        peg$c363 = peg$literalExpectation("~", false),
	        peg$c364 = function() { return g.nbsp; },
	        peg$c365 = peg$otherExpectation("paragraph break"),
	        peg$c366 = function() { return true; },
	        peg$c367 = peg$otherExpectation("linebreak"),
	        peg$c368 = function(l) {return l;},
	        peg$c369 = function(l) {
	                                          if (l) return g.createBreakSpace(l);
	                                          else   return g.create(g.linebreak);
	                                      },
	        peg$c370 = "put",
	        peg$c371 = peg$literalExpectation("put", false),
	        peg$c372 = "newline",
	        peg$c373 = peg$literalExpectation("newline", false),
	        peg$c374 = peg$otherExpectation("letter"),
	        peg$c375 = /^[a-z]/i,
	        peg$c376 = peg$classExpectation([["a", "z"]], false, true),
	        peg$c377 = function(c) { return g.character(c); },
	        peg$c378 = peg$otherExpectation("digit"),
	        peg$c379 = /^[0-9]/,
	        peg$c380 = peg$classExpectation([["0", "9"]], false, false),
	        peg$c381 = function(n) { return g.character(n); },
	        peg$c382 = peg$otherExpectation("punctuation"),
	        peg$c383 = /^[.,;:*\/()!?=+<>]/,
	        peg$c384 = peg$classExpectation([".", ",", ";", ":", "*", "/", "(", ")", "!", "?", "=", "+", "<", ">"], false, false),
	        peg$c385 = function(p) { return g.character(p); },
	        peg$c386 = peg$otherExpectation("quotes"),
	        peg$c387 = /^[`']/,
	        peg$c388 = peg$classExpectation(["`", "'"], false, false),
	        peg$c389 = function(q) { return g.textquote(q); },
	        peg$c390 = peg$otherExpectation("left bracket"),
	        peg$c391 = function(b) { return g.character(b); },
	        peg$c392 = peg$otherExpectation("right bracket"),
	        peg$c393 = peg$otherExpectation("utf8 char"),
	        peg$c394 = function(u) { return g.character(u); },
	        peg$c395 = peg$otherExpectation("hyphen"),
	        peg$c396 = function() { return g.hyphen(); },
	        peg$c397 = peg$otherExpectation("ligature"),
	        peg$c398 = "ffi",
	        peg$c399 = peg$literalExpectation("ffi", false),
	        peg$c400 = "ffl",
	        peg$c401 = peg$literalExpectation("ffl", false),
	        peg$c402 = "ff",
	        peg$c403 = peg$literalExpectation("ff", false),
	        peg$c404 = "fi",
	        peg$c405 = peg$literalExpectation("fi", false),
	        peg$c406 = "fl",
	        peg$c407 = peg$literalExpectation("fl", false),
	        peg$c408 = "---",
	        peg$c409 = peg$literalExpectation("---", false),
	        peg$c410 = "--",
	        peg$c411 = peg$literalExpectation("--", false),
	        peg$c412 = "``",
	        peg$c413 = peg$literalExpectation("``", false),
	        peg$c414 = "''",
	        peg$c415 = peg$literalExpectation("''", false),
	        peg$c416 = "!\xB4",
	        peg$c417 = peg$literalExpectation("!\xB4", false),
	        peg$c418 = "?\xB4",
	        peg$c419 = peg$literalExpectation("?\xB4", false),
	        peg$c420 = "<<",
	        peg$c421 = peg$literalExpectation("<<", false),
	        peg$c422 = ">>",
	        peg$c423 = peg$literalExpectation(">>", false),
	        peg$c424 = function(l) { return g.ligature(l); },
	        peg$c425 = peg$otherExpectation("control symbol"),
	        peg$c426 = /^[$%#&{}_\-,\/@]/,
	        peg$c427 = peg$classExpectation(["$", "%", "#", "&", "{", "}", "_", "-", ",", "/", "@"], false, false),
	        peg$c428 = function(c) { return g.controlSymbol(c); },
	        peg$c429 = peg$otherExpectation("symbol macro"),
	        peg$c430 = function(name) { return g.hasSymbol(name); },
	        peg$c431 = function(name) {
	                return g.symbol(name);
	            },
	        peg$c432 = peg$otherExpectation("diacritic macro"),
	        peg$c433 = function(d) { return g.hasDiacritic(d); },
	        peg$c434 = function(d, c, s) { return g.diacritic(d, c) + (s ? s:""); },
	        peg$c435 = function(d, c) { return g.diacritic(d, c); },
	        peg$c436 = function(d, c) {
	                return c;
	            },
	        peg$c437 = "symbol",
	        peg$c438 = peg$literalExpectation("symbol", false),
	        peg$c439 = function(i) { return String.fromCharCode(i); },
	        peg$c440 = "char",
	        peg$c441 = peg$literalExpectation("char", false),
	        peg$c442 = "^^^^",
	        peg$c443 = peg$literalExpectation("^^^^", false),
	        peg$c444 = "^^",
	        peg$c445 = peg$literalExpectation("^^", false),
	        peg$c446 = function(c) { c = c.charCodeAt(0);
	                                                                          return String.fromCharCode(c < 64 ? c + 64 : c - 64); },
	        peg$c447 = function(i) { return parseInt(i, 10); },
	        peg$c448 = function(o) { return parseInt(o, 8); },
	        peg$c449 = "\"",
	        peg$c450 = peg$literalExpectation("\"", false),
	        peg$c451 = function(h) { return h; },
	        peg$c452 = peg$otherExpectation("8bit hex value"),
	        peg$c453 = function(h) { return parseInt(h, 16); },
	        peg$c454 = peg$otherExpectation("16bit hex value"),
	        peg$c455 = peg$otherExpectation("integer value"),
	        peg$c456 = peg$otherExpectation("octal value"),
	        peg$c457 = /^[0-7]/,
	        peg$c458 = peg$classExpectation([["0", "7"]], false, false),
	        peg$c459 = peg$otherExpectation("hex digit"),
	        peg$c460 = /^[a-f0-9]/i,
	        peg$c461 = peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
	        peg$c462 = peg$otherExpectation("float value"),
	        peg$c463 = /^[+\-]/,
	        peg$c464 = peg$classExpectation(["+", "-"], false, false),
	        peg$c465 = function(f) { return parseFloat(f); },
	        peg$c466 = "the",
	        peg$c467 = peg$literalExpectation("the", false),
	        peg$c468 = function(c) { return g.hasCounter(c);},
	        peg$c469 = function(c) { return g.createText("" + g.counter(c)); },
	        peg$c470 = function(id) { return g.theLength(id); },
	        peg$c471 = function(t) { return t; },
	        peg$c472 = "showthe",
	        peg$c473 = peg$literalExpectation("showthe", false),
	        peg$c474 = function(c) { console.log(g.counter(c)); },
	        peg$c475 = function(l) { console.log(g.length(l)); },
	        peg$c476 = "message",
	        peg$c477 = peg$literalExpectation("message", false),
	        peg$c478 = function(m) { console.log(m.textContent); },

	        peg$currPos          = 0,
	        peg$savedPos         = 0,
	        peg$posDetailsCache  = [{ line: 1, column: 1 }],
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,

	        peg$result;

	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }

	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }

	    function location() {
	      return peg$computeLocation(peg$savedPos, peg$currPos);
	    }

	    function error(message, location) {
	      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

	      throw peg$buildSimpleError(message, location);
	    }

	    function peg$literalExpectation(text, ignoreCase) {
	      return { type: "literal", text: text, ignoreCase: ignoreCase };
	    }

	    function peg$classExpectation(parts, inverted, ignoreCase) {
	      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	    }

	    function peg$anyExpectation() {
	      return { type: "any" };
	    }

	    function peg$endExpectation() {
	      return { type: "end" };
	    }

	    function peg$otherExpectation(description) {
	      return { type: "other", description: description };
	    }

	    function peg$computePosDetails(pos) {
	      var details = peg$posDetailsCache[pos], p;

	      if (details) {
	        return details;
	      } else {
	        p = pos - 1;
	        while (!peg$posDetailsCache[p]) {
	          p--;
	        }

	        details = peg$posDetailsCache[p];
	        details = {
	          line:   details.line,
	          column: details.column
	        };

	        while (p < pos) {
	          if (input.charCodeAt(p) === 10) {
	            details.line++;
	            details.column = 1;
	          } else {
	            details.column++;
	          }

	          p++;
	        }

	        peg$posDetailsCache[pos] = details;
	        return details;
	      }
	    }

	    function peg$computeLocation(startPos, endPos) {
	      var startPosDetails = peg$computePosDetails(startPos),
	          endPosDetails   = peg$computePosDetails(endPos);

	      return {
	        start: {
	          offset: startPos,
	          line:   startPosDetails.line,
	          column: startPosDetails.column
	        },
	        end: {
	          offset: endPos,
	          line:   endPosDetails.line,
	          column: endPosDetails.column
	        }
	      };
	    }

	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }

	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }

	      peg$maxFailExpected.push(expected);
	    }

	    function peg$buildSimpleError(message, location) {
	      return new peg$SyntaxError(message, null, null, location);
	    }

	    function peg$buildStructuredError(expected, found, location) {
	      return new peg$SyntaxError(
	        peg$SyntaxError.buildMessage(expected, found),
	        expected,
	        found,
	        location
	      );
	    }

	    function peg$parselatex() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      peg$silentFails++;
	      s2 = peg$parsewith_preamble();
	      peg$silentFails--;
	      if (s2 !== peg$FAILED) {
	        peg$currPos = s1;
	        s1 = void 0;
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$parseskip_all_space();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parseescape();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseis_hvmode();
	            peg$silentFails--;
	            if (s7 !== peg$FAILED) {
	              peg$currPos = s6;
	              s6 = void 0;
	            } else {
	              s6 = peg$FAILED;
	            }
	            if (s6 === peg$FAILED) {
	              s6 = peg$currPos;
	              peg$silentFails++;
	              s7 = peg$parseis_preamble();
	              peg$silentFails--;
	              if (s7 !== peg$FAILED) {
	                peg$currPos = s6;
	                s6 = void 0;
	              } else {
	                s6 = peg$FAILED;
	              }
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parsemacro();
	              if (s7 !== peg$FAILED) {
	                s4 = [s4, s5, s6, s7];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$parseskip_all_space();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseescape();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$currPos;
	              peg$silentFails++;
	              s7 = peg$parseis_hvmode();
	              peg$silentFails--;
	              if (s7 !== peg$FAILED) {
	                peg$currPos = s6;
	                s6 = void 0;
	              } else {
	                s6 = peg$FAILED;
	              }
	              if (s6 === peg$FAILED) {
	                s6 = peg$currPos;
	                peg$silentFails++;
	                s7 = peg$parseis_preamble();
	                peg$silentFails--;
	                if (s7 !== peg$FAILED) {
	                  peg$currPos = s6;
	                  s6 = void 0;
	                } else {
	                  s6 = peg$FAILED;
	                }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parsemacro();
	                if (s7 !== peg$FAILED) {
	                  s4 = [s4, s5, s6, s7];
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_all_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebegin_doc();
	            if (s4 === peg$FAILED) {
	              peg$savedPos = peg$currPos;
	              s4 = peg$c0();
	              if (s4) {
	                s4 = void 0;
	              } else {
	                s4 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsedocument();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_doc();
	                if (s6 === peg$FAILED) {
	                  peg$savedPos = peg$currPos;
	                  s6 = peg$c1();
	                  if (s6) {
	                    s6 = void 0;
	                  } else {
	                    s6 = peg$FAILED;
	                  }
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = [];
	                  if (input.length > peg$currPos) {
	                    s8 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s8 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                  }
	                  while (s8 !== peg$FAILED) {
	                    s7.push(s8);
	                    if (input.length > peg$currPos) {
	                      s8 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                    }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    s8 = peg$parseEOF();
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c3();
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$currPos;
	        peg$silentFails++;
	        s2 = peg$parsewith_preamble();
	        peg$silentFails--;
	        if (s2 === peg$FAILED) {
	          s1 = void 0;
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s2 = peg$c4();
	          if (s2) {
	            s2 = void 0;
	          } else {
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parsedocument();
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parseEOF();
	              if (s4 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c3();
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsewith_preamble() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_all_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseescape();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parseis_preamble();
	          peg$silentFails--;
	          if (s4 !== peg$FAILED) {
	            peg$currPos = s3;
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s1 = [s1, s2, s3];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsebegin_doc() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebegin_group();
	            if (s4 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 8) === peg$c5) {
	                s5 = peg$c5;
	                peg$currPos += 8;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c6); }
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  s1 = [s1, s2, s3, s4, s5, s6];
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseend_doc() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseend();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebegin_group();
	            if (s4 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 8) === peg$c5) {
	                s5 = peg$c5;
	                peg$currPos += 8;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c6); }
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  s1 = [s1, s2, s3, s4, s5, s6];
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsedocument() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      peg$savedPos = peg$currPos;
	      s1 = peg$c7();
	      if (s1) {
	        s1 = void 0;
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_all_space();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$parseparagraph();
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$parseparagraph();
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_all_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c8(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseparagraph() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$parsevmode_macro();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = [];
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        s4 = peg$parseescape();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsenoindent();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parsebreak();
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$currPos;
	          s4 = peg$parseescape();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsenoindent();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebreak();
	            if (s4 !== peg$FAILED) {
	              s3 = [s3, s4];
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseskip_space();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            s4 = peg$parseescape();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsenoindent();
	              if (s5 !== peg$FAILED) {
	                s4 = [s4, s5];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = null;
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = [];
	              s5 = peg$parsetext();
	              if (s5 !== peg$FAILED) {
	                while (s5 !== peg$FAILED) {
	                  s4.push(s5);
	                  s5 = peg$parsetext();
	                }
	              } else {
	                s4 = peg$FAILED;
	              }
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parsebreak();
	                if (s5 === peg$FAILED) {
	                  s5 = null;
	                }
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c9(s1, s3, s4, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parseparagraph_with_linebreak() {
	      var s0, s1;

	      s0 = peg$parsetext();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsevmode_macro();
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$parsebreak();
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c10();
	          }
	          s0 = s1;
	        }
	      }

	      return s0;
	    }

	    function peg$parseline() {
	      var s0, s1;

	      s0 = peg$currPos;
	      s1 = peg$parselinebreak();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsebreak();
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c12();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsetext();
	        }
	      }

	      return s0;
	    }

	    function peg$parsetext() {
	      var s0, s1, s2, s3, s4;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parseligature();
	      if (s2 === peg$FAILED) {
	        s2 = peg$parseprimitive();
	        if (s2 === peg$FAILED) {
	          s2 = peg$currPos;
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parsebreak();
	          peg$silentFails--;
	          if (s4 === peg$FAILED) {
	            s3 = void 0;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsecomment();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s2;
	              s3 = peg$c11();
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parseligature();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parseprimitive();
	            if (s2 === peg$FAILED) {
	              s2 = peg$currPos;
	              s3 = peg$currPos;
	              peg$silentFails++;
	              s4 = peg$parsebreak();
	              peg$silentFails--;
	              if (s4 === peg$FAILED) {
	                s3 = void 0;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 !== peg$FAILED) {
	                s4 = peg$parsecomment();
	                if (s4 !== peg$FAILED) {
	                  peg$savedPos = s2;
	                  s3 = peg$c11();
	                  s2 = s3;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c14(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$parselinebreak();
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$currPos;
	          s2 = peg$currPos;
	          peg$silentFails++;
	          s3 = peg$parseunskip_macro();
	          peg$silentFails--;
	          if (s3 !== peg$FAILED) {
	            peg$currPos = s2;
	            s2 = void 0;
	          } else {
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parseskip_space();
	            if (s3 !== peg$FAILED) {
	              s2 = [s2, s3];
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	          if (s1 === peg$FAILED) {
	            s1 = null;
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parsehmode_macro();
	            if (s2 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c15(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsemath();
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parsebegin_group();
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s2 = peg$c16();
	                if (s2) {
	                  s2 = void 0;
	                } else {
	                  s2 = peg$FAILED;
	                }
	                if (s2 !== peg$FAILED) {
	                  s3 = peg$parsespace();
	                  if (s3 === peg$FAILED) {
	                    s3 = null;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c17(s3);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseend_group();
	                if (s1 !== peg$FAILED) {
	                  peg$savedPos = peg$currPos;
	                  s2 = peg$c18();
	                  if (s2) {
	                    s2 = void 0;
	                  } else {
	                    s2 = peg$FAILED;
	                  }
	                  if (s2 !== peg$FAILED) {
	                    s3 = peg$parsespace();
	                    if (s3 === peg$FAILED) {
	                      s3 = null;
	                    }
	                    if (s3 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c17(s3);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              }
	            }
	          }
	        }
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c13); }
	      }

	      return s0;
	    }

	    function peg$parseprimitive() {
	      var s0, s1, s2, s3;

	      peg$silentFails++;
	      s0 = peg$parsechar();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsespace();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$currPos;
	          peg$silentFails++;
	          s3 = peg$parseunskip_macro();
	          peg$silentFails--;
	          if (s3 === peg$FAILED) {
	            s2 = void 0;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c20();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsehyphen();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsedigit();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parsepunctuation();
	              if (s0 === peg$FAILED) {
	                s0 = peg$parsequotes();
	                if (s0 === peg$FAILED) {
	                  s0 = peg$parseleft_br();
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    s1 = peg$parseright_br();
	                    if (s1 !== peg$FAILED) {
	                      peg$savedPos = peg$currPos;
	                      s2 = peg$c21();
	                      if (s2) {
	                        s2 = void 0;
	                      } else {
	                        s2 = peg$FAILED;
	                      }
	                      if (s2 !== peg$FAILED) {
	                        peg$savedPos = s0;
	                        s1 = peg$c22(s1);
	                        s0 = s1;
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                    if (s0 === peg$FAILED) {
	                      s0 = peg$parsenbsp();
	                      if (s0 === peg$FAILED) {
	                        s0 = peg$parsectrl_space();
	                        if (s0 === peg$FAILED) {
	                          s0 = peg$parsediacritic();
	                          if (s0 === peg$FAILED) {
	                            s0 = peg$parsectrl_sym();
	                            if (s0 === peg$FAILED) {
	                              s0 = peg$parsesymbol();
	                              if (s0 === peg$FAILED) {
	                                s0 = peg$parsecharsym();
	                                if (s0 === peg$FAILED) {
	                                  s0 = peg$parseutf8_char();
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c19); }
	      }

	      return s0;
	    }

	    function peg$parsehv_macro() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        peg$silentFails++;
	        s4 = peg$parseis_hvmode();
	        peg$silentFails--;
	        if (s4 !== peg$FAILED) {
	          peg$currPos = s3;
	          s3 = void 0;
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parsemacro();
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 === peg$FAILED) {
	          s2 = peg$parselogging();
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c11();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsehmode_macro() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$parsehv_macro();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseescape();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$currPos;
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parseis_hmode();
	          peg$silentFails--;
	          if (s4 !== peg$FAILED) {
	            peg$currPos = s3;
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsemacro();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s2;
	              s3 = peg$c15(s4);
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	          if (s2 === peg$FAILED) {
	            s2 = peg$currPos;
	            s3 = peg$currPos;
	            peg$silentFails++;
	            s4 = peg$parseis_hmode_env();
	            peg$silentFails--;
	            if (s4 !== peg$FAILED) {
	              peg$currPos = s3;
	              s3 = void 0;
	            } else {
	              s3 = peg$FAILED;
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parseh_environment();
	              if (s4 !== peg$FAILED) {
	                peg$savedPos = s2;
	                s3 = peg$c23(s4);
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	            if (s2 === peg$FAILED) {
	              s2 = peg$parsenoindent();
	              if (s2 === peg$FAILED) {
	                s2 = peg$parsesmbskip_hmode();
	                if (s2 === peg$FAILED) {
	                  s2 = peg$parsevspace_hmode();
	                  if (s2 === peg$FAILED) {
	                    s2 = peg$parsethe();
	                    if (s2 === peg$FAILED) {
	                      s2 = peg$parseverb();
	                      if (s2 === peg$FAILED) {
	                        s2 = peg$currPos;
	                        s3 = peg$currPos;
	                        peg$silentFails++;
	                        s4 = peg$parseis_preamble();
	                        peg$silentFails--;
	                        if (s4 !== peg$FAILED) {
	                          peg$currPos = s3;
	                          s3 = void 0;
	                        } else {
	                          s3 = peg$FAILED;
	                        }
	                        if (s3 !== peg$FAILED) {
	                          s4 = peg$parseonly_preamble();
	                          if (s4 !== peg$FAILED) {
	                            s3 = [s3, s4];
	                            s2 = s3;
	                          } else {
	                            peg$currPos = s2;
	                            s2 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s2;
	                          s2 = peg$FAILED;
	                        }
	                        if (s2 === peg$FAILED) {
	                          s2 = peg$currPos;
	                          s3 = peg$currPos;
	                          peg$silentFails++;
	                          s4 = peg$parsebegin();
	                          peg$silentFails--;
	                          if (s4 === peg$FAILED) {
	                            s3 = void 0;
	                          } else {
	                            peg$currPos = s3;
	                            s3 = peg$FAILED;
	                          }
	                          if (s3 !== peg$FAILED) {
	                            s4 = peg$currPos;
	                            peg$silentFails++;
	                            s5 = peg$parseend();
	                            peg$silentFails--;
	                            if (s5 === peg$FAILED) {
	                              s4 = void 0;
	                            } else {
	                              peg$currPos = s4;
	                              s4 = peg$FAILED;
	                            }
	                            if (s4 !== peg$FAILED) {
	                              s5 = peg$currPos;
	                              peg$silentFails++;
	                              s6 = peg$parseis_vmode();
	                              peg$silentFails--;
	                              if (s6 === peg$FAILED) {
	                                s5 = void 0;
	                              } else {
	                                peg$currPos = s5;
	                                s5 = peg$FAILED;
	                              }
	                              if (s5 !== peg$FAILED) {
	                                s6 = peg$parseunknown_macro();
	                                if (s6 !== peg$FAILED) {
	                                  s3 = [s3, s4, s5, s6];
	                                  s2 = s3;
	                                } else {
	                                  peg$currPos = s2;
	                                  s2 = peg$FAILED;
	                                }
	                              } else {
	                                peg$currPos = s2;
	                                s2 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s2;
	                              s2 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s2;
	                            s2 = peg$FAILED;
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c15(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsevmode_macro() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_all_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsehv_macro();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c11();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseskip_all_space();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseescape();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            s4 = peg$currPos;
	            peg$silentFails++;
	            s5 = peg$parseis_vmode();
	            peg$silentFails--;
	            if (s5 !== peg$FAILED) {
	              peg$currPos = s4;
	              s4 = void 0;
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsemacro();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s3;
	                s4 = peg$c24(s5);
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            if (s3 === peg$FAILED) {
	              s3 = peg$currPos;
	              s4 = peg$currPos;
	              peg$silentFails++;
	              s5 = peg$parseis_vmode_env();
	              peg$silentFails--;
	              if (s5 !== peg$FAILED) {
	                peg$currPos = s4;
	                s4 = void 0;
	              } else {
	                s4 = peg$FAILED;
	              }
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parseenvironment();
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s3;
	                  s4 = peg$c23(s5);
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 === peg$FAILED) {
	                s3 = peg$parsevspace_vmode();
	                if (s3 === peg$FAILED) {
	                  s3 = peg$parsesmbskip_vmode();
	                }
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c15(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parseis_preamble() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = peg$currPos;
	        s2 = peg$c25(s1);
	        if (s2) {
	          s2 = void 0;
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseis_vmode() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = peg$currPos;
	        s2 = peg$c26(s1);
	        if (s2) {
	          s2 = void 0;
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseis_hmode() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = peg$currPos;
	        s2 = peg$c27(s1);
	        if (s2) {
	          s2 = void 0;
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseis_hvmode() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = peg$currPos;
	        s2 = peg$c28(s1);
	        if (s2) {
	          s2 = void 0;
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseis_vmode_env() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parsebegin();
	      if (s1 === peg$FAILED) {
	        s1 = peg$parseend();
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseidentifier();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = peg$currPos;
	            s4 = peg$c26(s3);
	            if (s4) {
	              s4 = void 0;
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseis_hmode_env() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parsebegin();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseidentifier();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = peg$currPos;
	            s4 = peg$c29(s3);
	            if (s4) {
	              s4 = void 0;
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsemacro() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_space();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c30(s1);
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsemacro_args();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c31(s1);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseonly_preamble() {
	      var s0, s1;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c32(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseunknown_macro() {
	      var s0, s1;

	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c33(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseidentifier() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c34); }
	      }

	      return s0;
	    }

	    function peg$parsekey() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 === peg$FAILED) {
	        s2 = peg$parsedigit();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parsesp();
	          if (s2 === peg$FAILED) {
	            if (peg$c35.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c36); }
	            }
	            if (s2 === peg$FAILED) {
	              s2 = peg$currPos;
	              s3 = peg$currPos;
	              peg$silentFails++;
	              if (peg$c37.test(input.charAt(peg$currPos))) {
	                s4 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c38); }
	              }
	              peg$silentFails--;
	              if (s4 === peg$FAILED) {
	                s3 = void 0;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 !== peg$FAILED) {
	                s4 = peg$parseutf8_char();
	                if (s4 !== peg$FAILED) {
	                  s3 = [s3, s4];
	                  s2 = s3;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            }
	          }
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parsedigit();
	            if (s2 === peg$FAILED) {
	              s2 = peg$parsesp();
	              if (s2 === peg$FAILED) {
	                if (peg$c35.test(input.charAt(peg$currPos))) {
	                  s2 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s2 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
	                }
	                if (s2 === peg$FAILED) {
	                  s2 = peg$currPos;
	                  s3 = peg$currPos;
	                  peg$silentFails++;
	                  if (peg$c37.test(input.charAt(peg$currPos))) {
	                    s4 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s4 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
	                  }
	                  peg$silentFails--;
	                  if (s4 === peg$FAILED) {
	                    s3 = void 0;
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s4 = peg$parseutf8_char();
	                    if (s4 !== peg$FAILED) {
	                      s3 = [s3, s4];
	                      s2 = s3;
	                    } else {
	                      peg$currPos = s2;
	                      s2 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s2;
	                    s2 = peg$FAILED;
	                  }
	                }
	              }
	            }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }

	      return s0;
	    }

	    function peg$parsekey_val() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parsekey();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = peg$parseskip_space();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 61) {
	            s4 = peg$c40;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c41); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseskip_space();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsekey();
	              if (s6 === peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s6 = peg$c42();
	                if (s6) {
	                  s6 = void 0;
	                } else {
	                  s6 = peg$FAILED;
	                }
	              }
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s2;
	                s3 = peg$c43(s1, s6);
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c44(s1, s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c39); }
	      }

	      return s0;
	    }

	    function peg$parsemacro_args() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = [];
	      s1 = peg$currPos;
	      peg$savedPos = peg$currPos;
	      s2 = peg$c45();
	      if (s2) {
	        s2 = void 0;
	      } else {
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s1;
	        s2 = peg$c46();
	      }
	      s1 = s2;
	      if (s1 === peg$FAILED) {
	        s1 = peg$parsenextArgStar();
	        if (s1 === peg$FAILED) {
	          s1 = peg$currPos;
	          peg$savedPos = peg$currPos;
	          s2 = peg$c47();
	          if (s2) {
	            s2 = void 0;
	          } else {
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parsearg_group();
	            if (s3 === peg$FAILED) {
	              peg$savedPos = peg$currPos;
	              s3 = peg$c48();
	              if (s3) {
	                s3 = void 0;
	              } else {
	                s3 = peg$FAILED;
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s1;
	              s2 = peg$c49(s3);
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	          if (s1 === peg$FAILED) {
	            s1 = peg$currPos;
	            peg$savedPos = peg$currPos;
	            s2 = peg$c50();
	            if (s2) {
	              s2 = void 0;
	            } else {
	              s2 = peg$FAILED;
	            }
	            if (s2 !== peg$FAILED) {
	              s3 = peg$parsearg_hgroup();
	              if (s3 === peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s3 = peg$c48();
	                if (s3) {
	                  s3 = void 0;
	                } else {
	                  s3 = peg$FAILED;
	                }
	              }
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s1;
	                s2 = peg$c49(s3);
	                s1 = s2;
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	            if (s1 === peg$FAILED) {
	              s1 = peg$currPos;
	              peg$savedPos = peg$currPos;
	              s2 = peg$c51();
	              if (s2) {
	                s2 = void 0;
	              } else {
	                s2 = peg$FAILED;
	              }
	              if (s2 !== peg$FAILED) {
	                s3 = peg$parsehorizontal();
	                if (s3 === peg$FAILED) {
	                  peg$savedPos = peg$currPos;
	                  s3 = peg$c52();
	                  if (s3) {
	                    s3 = void 0;
	                  } else {
	                    s3 = peg$FAILED;
	                  }
	                }
	                if (s3 !== peg$FAILED) {
	                  peg$savedPos = s1;
	                  s2 = peg$c53(s3);
	                  s1 = s2;
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	              if (s1 === peg$FAILED) {
	                s1 = peg$currPos;
	                peg$savedPos = peg$currPos;
	                s2 = peg$c54();
	                if (s2) {
	                  s2 = void 0;
	                } else {
	                  s2 = peg$FAILED;
	                }
	                if (s2 !== peg$FAILED) {
	                  s3 = peg$parseopt_group();
	                  if (s3 === peg$FAILED) {
	                    s3 = null;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    peg$savedPos = s1;
	                    s2 = peg$c55(s3);
	                    s1 = s2;
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	                if (s1 === peg$FAILED) {
	                  s1 = peg$currPos;
	                  peg$savedPos = peg$currPos;
	                  s2 = peg$c56();
	                  if (s2) {
	                    s2 = void 0;
	                  } else {
	                    s2 = peg$FAILED;
	                  }
	                  if (s2 !== peg$FAILED) {
	                    s3 = peg$parseid_group();
	                    if (s3 === peg$FAILED) {
	                      peg$savedPos = peg$currPos;
	                      s3 = peg$c57();
	                      if (s3) {
	                        s3 = void 0;
	                      } else {
	                        s3 = peg$FAILED;
	                      }
	                    }
	                    if (s3 !== peg$FAILED) {
	                      peg$savedPos = s1;
	                      s2 = peg$c58(s3);
	                      s1 = s2;
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                  if (s1 === peg$FAILED) {
	                    s1 = peg$currPos;
	                    peg$savedPos = peg$currPos;
	                    s2 = peg$c59();
	                    if (s2) {
	                      s2 = void 0;
	                    } else {
	                      s2 = peg$FAILED;
	                    }
	                    if (s2 !== peg$FAILED) {
	                      s3 = peg$parseide_group();
	                      if (s3 === peg$FAILED) {
	                        peg$savedPos = peg$currPos;
	                        s3 = peg$c60();
	                        if (s3) {
	                          s3 = void 0;
	                        } else {
	                          s3 = peg$FAILED;
	                        }
	                      }
	                      if (s3 !== peg$FAILED) {
	                        peg$savedPos = s1;
	                        s2 = peg$c58(s3);
	                        s1 = s2;
	                      } else {
	                        peg$currPos = s1;
	                        s1 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                    if (s1 === peg$FAILED) {
	                      s1 = peg$currPos;
	                      peg$savedPos = peg$currPos;
	                      s2 = peg$c61();
	                      if (s2) {
	                        s2 = void 0;
	                      } else {
	                        s2 = peg$FAILED;
	                      }
	                      if (s2 !== peg$FAILED) {
	                        s3 = peg$parseid_optgroup();
	                        if (s3 === peg$FAILED) {
	                          s3 = null;
	                        }
	                        if (s3 !== peg$FAILED) {
	                          peg$savedPos = s1;
	                          s2 = peg$c58(s3);
	                          s1 = s2;
	                        } else {
	                          peg$currPos = s1;
	                          s1 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s1;
	                        s1 = peg$FAILED;
	                      }
	                      if (s1 === peg$FAILED) {
	                        s1 = peg$currPos;
	                        peg$savedPos = peg$currPos;
	                        s2 = peg$c62();
	                        if (s2) {
	                          s2 = void 0;
	                        } else {
	                          s2 = peg$FAILED;
	                        }
	                        if (s2 !== peg$FAILED) {
	                          s3 = peg$parsekey_group();
	                          if (s3 === peg$FAILED) {
	                            peg$savedPos = peg$currPos;
	                            s3 = peg$c63();
	                            if (s3) {
	                              s3 = void 0;
	                            } else {
	                              s3 = peg$FAILED;
	                            }
	                          }
	                          if (s3 !== peg$FAILED) {
	                            peg$savedPos = s1;
	                            s2 = peg$c64(s3);
	                            s1 = s2;
	                          } else {
	                            peg$currPos = s1;
	                            s1 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s1;
	                          s1 = peg$FAILED;
	                        }
	                        if (s1 === peg$FAILED) {
	                          s1 = peg$currPos;
	                          peg$savedPos = peg$currPos;
	                          s2 = peg$c65();
	                          if (s2) {
	                            s2 = void 0;
	                          } else {
	                            s2 = peg$FAILED;
	                          }
	                          if (s2 !== peg$FAILED) {
	                            s3 = peg$parsekey_optgroup();
	                            if (s3 === peg$FAILED) {
	                              s3 = null;
	                            }
	                            if (s3 !== peg$FAILED) {
	                              peg$savedPos = s1;
	                              s2 = peg$c64(s3);
	                              s1 = s2;
	                            } else {
	                              peg$currPos = s1;
	                              s1 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s1;
	                            s1 = peg$FAILED;
	                          }
	                          if (s1 === peg$FAILED) {
	                            s1 = peg$currPos;
	                            peg$savedPos = peg$currPos;
	                            s2 = peg$c66();
	                            if (s2) {
	                              s2 = void 0;
	                            } else {
	                              s2 = peg$FAILED;
	                            }
	                            if (s2 !== peg$FAILED) {
	                              s3 = peg$parsekeyval_optgroup();
	                              if (s3 === peg$FAILED) {
	                                s3 = null;
	                              }
	                              if (s3 !== peg$FAILED) {
	                                peg$savedPos = s1;
	                                s2 = peg$c64(s3);
	                                s1 = s2;
	                              } else {
	                                peg$currPos = s1;
	                                s1 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s1;
	                              s1 = peg$FAILED;
	                            }
	                            if (s1 === peg$FAILED) {
	                              s1 = peg$currPos;
	                              peg$savedPos = peg$currPos;
	                              s2 = peg$c67();
	                              if (s2) {
	                                s2 = void 0;
	                              } else {
	                                s2 = peg$FAILED;
	                              }
	                              if (s2 !== peg$FAILED) {
	                                s3 = peg$parsecsv_group();
	                                if (s3 === peg$FAILED) {
	                                  peg$savedPos = peg$currPos;
	                                  s3 = peg$c68();
	                                  if (s3) {
	                                    s3 = void 0;
	                                  } else {
	                                    s3 = peg$FAILED;
	                                  }
	                                }
	                                if (s3 !== peg$FAILED) {
	                                  peg$savedPos = s1;
	                                  s2 = peg$c69(s3);
	                                  s1 = s2;
	                                } else {
	                                  peg$currPos = s1;
	                                  s1 = peg$FAILED;
	                                }
	                              } else {
	                                peg$currPos = s1;
	                                s1 = peg$FAILED;
	                              }
	                              if (s1 === peg$FAILED) {
	                                s1 = peg$currPos;
	                                peg$savedPos = peg$currPos;
	                                s2 = peg$c70();
	                                if (s2) {
	                                  s2 = void 0;
	                                } else {
	                                  s2 = peg$FAILED;
	                                }
	                                if (s2 !== peg$FAILED) {
	                                  s3 = peg$parseexpr_group();
	                                  if (s3 === peg$FAILED) {
	                                    peg$savedPos = peg$currPos;
	                                    s3 = peg$c71();
	                                    if (s3) {
	                                      s3 = void 0;
	                                    } else {
	                                      s3 = peg$FAILED;
	                                    }
	                                  }
	                                  if (s3 !== peg$FAILED) {
	                                    peg$savedPos = s1;
	                                    s2 = peg$c72(s3);
	                                    s1 = s2;
	                                  } else {
	                                    peg$currPos = s1;
	                                    s1 = peg$FAILED;
	                                  }
	                                } else {
	                                  peg$currPos = s1;
	                                  s1 = peg$FAILED;
	                                }
	                                if (s1 === peg$FAILED) {
	                                  s1 = peg$currPos;
	                                  peg$savedPos = peg$currPos;
	                                  s2 = peg$c73();
	                                  if (s2) {
	                                    s2 = void 0;
	                                  } else {
	                                    s2 = peg$FAILED;
	                                  }
	                                  if (s2 !== peg$FAILED) {
	                                    s3 = peg$parseexpr_optgroup();
	                                    if (s3 === peg$FAILED) {
	                                      s3 = null;
	                                    }
	                                    if (s3 !== peg$FAILED) {
	                                      peg$savedPos = s1;
	                                      s2 = peg$c72(s3);
	                                      s1 = s2;
	                                    } else {
	                                      peg$currPos = s1;
	                                      s1 = peg$FAILED;
	                                    }
	                                  } else {
	                                    peg$currPos = s1;
	                                    s1 = peg$FAILED;
	                                  }
	                                  if (s1 === peg$FAILED) {
	                                    s1 = peg$currPos;
	                                    peg$savedPos = peg$currPos;
	                                    s2 = peg$c74();
	                                    if (s2) {
	                                      s2 = void 0;
	                                    } else {
	                                      s2 = peg$FAILED;
	                                    }
	                                    if (s2 !== peg$FAILED) {
	                                      s3 = peg$parselength_group();
	                                      if (s3 === peg$FAILED) {
	                                        peg$savedPos = peg$currPos;
	                                        s3 = peg$c75();
	                                        if (s3) {
	                                          s3 = void 0;
	                                        } else {
	                                          s3 = peg$FAILED;
	                                        }
	                                      }
	                                      if (s3 !== peg$FAILED) {
	                                        peg$savedPos = s1;
	                                        s2 = peg$c76(s3);
	                                        s1 = s2;
	                                      } else {
	                                        peg$currPos = s1;
	                                        s1 = peg$FAILED;
	                                      }
	                                    } else {
	                                      peg$currPos = s1;
	                                      s1 = peg$FAILED;
	                                    }
	                                    if (s1 === peg$FAILED) {
	                                      s1 = peg$currPos;
	                                      peg$savedPos = peg$currPos;
	                                      s2 = peg$c77();
	                                      if (s2) {
	                                        s2 = void 0;
	                                      } else {
	                                        s2 = peg$FAILED;
	                                      }
	                                      if (s2 !== peg$FAILED) {
	                                        s3 = peg$parselength_group();
	                                        if (s3 === peg$FAILED) {
	                                          s3 = null;
	                                        }
	                                        if (s3 !== peg$FAILED) {
	                                          peg$savedPos = s1;
	                                          s2 = peg$c76(s3);
	                                          s1 = s2;
	                                        } else {
	                                          peg$currPos = s1;
	                                          s1 = peg$FAILED;
	                                        }
	                                      } else {
	                                        peg$currPos = s1;
	                                        s1 = peg$FAILED;
	                                      }
	                                      if (s1 === peg$FAILED) {
	                                        s1 = peg$currPos;
	                                        peg$savedPos = peg$currPos;
	                                        s2 = peg$c78();
	                                        if (s2) {
	                                          s2 = void 0;
	                                        } else {
	                                          s2 = peg$FAILED;
	                                        }
	                                        if (s2 !== peg$FAILED) {
	                                          s3 = peg$parselength_optgroup();
	                                          if (s3 === peg$FAILED) {
	                                            s3 = null;
	                                          }
	                                          if (s3 !== peg$FAILED) {
	                                            peg$savedPos = s1;
	                                            s2 = peg$c76(s3);
	                                            s1 = s2;
	                                          } else {
	                                            peg$currPos = s1;
	                                            s1 = peg$FAILED;
	                                          }
	                                        } else {
	                                          peg$currPos = s1;
	                                          s1 = peg$FAILED;
	                                        }
	                                        if (s1 === peg$FAILED) {
	                                          s1 = peg$currPos;
	                                          peg$savedPos = peg$currPos;
	                                          s2 = peg$c79();
	                                          if (s2) {
	                                            s2 = void 0;
	                                          } else {
	                                            s2 = peg$FAILED;
	                                          }
	                                          if (s2 !== peg$FAILED) {
	                                            s3 = peg$parsemacro_group();
	                                            if (s3 === peg$FAILED) {
	                                              peg$savedPos = peg$currPos;
	                                              s3 = peg$c80();
	                                              if (s3) {
	                                                s3 = void 0;
	                                              } else {
	                                                s3 = peg$FAILED;
	                                              }
	                                            }
	                                            if (s3 !== peg$FAILED) {
	                                              peg$savedPos = s1;
	                                              s2 = peg$c81(s3);
	                                              s1 = s2;
	                                            } else {
	                                              peg$currPos = s1;
	                                              s1 = peg$FAILED;
	                                            }
	                                          } else {
	                                            peg$currPos = s1;
	                                            s1 = peg$FAILED;
	                                          }
	                                          if (s1 === peg$FAILED) {
	                                            s1 = peg$currPos;
	                                            peg$savedPos = peg$currPos;
	                                            s2 = peg$c82();
	                                            if (s2) {
	                                              s2 = void 0;
	                                            } else {
	                                              s2 = peg$FAILED;
	                                            }
	                                            if (s2 !== peg$FAILED) {
	                                              s3 = peg$parseurl_group();
	                                              if (s3 === peg$FAILED) {
	                                                peg$savedPos = peg$currPos;
	                                                s3 = peg$c83();
	                                                if (s3) {
	                                                  s3 = void 0;
	                                                } else {
	                                                  s3 = peg$FAILED;
	                                                }
	                                              }
	                                              if (s3 !== peg$FAILED) {
	                                                peg$savedPos = s1;
	                                                s2 = peg$c84(s3);
	                                                s1 = s2;
	                                              } else {
	                                                peg$currPos = s1;
	                                                s1 = peg$FAILED;
	                                              }
	                                            } else {
	                                              peg$currPos = s1;
	                                              s1 = peg$FAILED;
	                                            }
	                                            if (s1 === peg$FAILED) {
	                                              s1 = peg$currPos;
	                                              peg$savedPos = peg$currPos;
	                                              s2 = peg$c85();
	                                              if (s2) {
	                                                s2 = void 0;
	                                              } else {
	                                                s2 = peg$FAILED;
	                                              }
	                                              if (s2 !== peg$FAILED) {
	                                                s3 = peg$parsecolor_group();
	                                                if (s3 === peg$FAILED) {
	                                                  peg$savedPos = peg$currPos;
	                                                  s3 = peg$c86();
	                                                  if (s3) {
	                                                    s3 = void 0;
	                                                  } else {
	                                                    s3 = peg$FAILED;
	                                                  }
	                                                }
	                                                if (s3 !== peg$FAILED) {
	                                                  peg$savedPos = s1;
	                                                  s2 = peg$c87(s3);
	                                                  s1 = s2;
	                                                } else {
	                                                  peg$currPos = s1;
	                                                  s1 = peg$FAILED;
	                                                }
	                                              } else {
	                                                peg$currPos = s1;
	                                                s1 = peg$FAILED;
	                                              }
	                                              if (s1 === peg$FAILED) {
	                                                s1 = peg$currPos;
	                                                peg$savedPos = peg$currPos;
	                                                s2 = peg$c88();
	                                                if (s2) {
	                                                  s2 = void 0;
	                                                } else {
	                                                  s2 = peg$FAILED;
	                                                }
	                                                if (s2 !== peg$FAILED) {
	                                                  s3 = peg$parsecolor_modellist_group();
	                                                  if (s3 === peg$FAILED) {
	                                                    peg$savedPos = peg$currPos;
	                                                    s3 = peg$c89();
	                                                    if (s3) {
	                                                      s3 = void 0;
	                                                    } else {
	                                                      s3 = peg$FAILED;
	                                                    }
	                                                  }
	                                                  if (s3 !== peg$FAILED) {
	                                                    peg$savedPos = s1;
	                                                    s2 = peg$c87(s3);
	                                                    s1 = s2;
	                                                  } else {
	                                                    peg$currPos = s1;
	                                                    s1 = peg$FAILED;
	                                                  }
	                                                } else {
	                                                  peg$currPos = s1;
	                                                  s1 = peg$FAILED;
	                                                }
	                                                if (s1 === peg$FAILED) {
	                                                  s1 = peg$currPos;
	                                                  peg$savedPos = peg$currPos;
	                                                  s2 = peg$c90();
	                                                  if (s2) {
	                                                    s2 = void 0;
	                                                  } else {
	                                                    s2 = peg$FAILED;
	                                                  }
	                                                  if (s2 !== peg$FAILED) {
	                                                    s3 = peg$parsecolor_modellist_optgroup();
	                                                    if (s3 === peg$FAILED) {
	                                                      s3 = null;
	                                                    }
	                                                    if (s3 !== peg$FAILED) {
	                                                      peg$savedPos = s1;
	                                                      s2 = peg$c87(s3);
	                                                      s1 = s2;
	                                                    } else {
	                                                      peg$currPos = s1;
	                                                      s1 = peg$FAILED;
	                                                    }
	                                                  } else {
	                                                    peg$currPos = s1;
	                                                    s1 = peg$FAILED;
	                                                  }
	                                                  if (s1 === peg$FAILED) {
	                                                    s1 = peg$currPos;
	                                                    peg$savedPos = peg$currPos;
	                                                    s2 = peg$c91();
	                                                    if (s2) {
	                                                      s2 = void 0;
	                                                    } else {
	                                                      s2 = peg$FAILED;
	                                                    }
	                                                    if (s2 !== peg$FAILED) {
	                                                      s3 = peg$parsecolor_setspec_group();
	                                                      if (s3 === peg$FAILED) {
	                                                        peg$savedPos = peg$currPos;
	                                                        s3 = peg$c92();
	                                                        if (s3) {
	                                                          s3 = void 0;
	                                                        } else {
	                                                          s3 = peg$FAILED;
	                                                        }
	                                                      }
	                                                      if (s3 !== peg$FAILED) {
	                                                        peg$savedPos = s1;
	                                                        s2 = peg$c87(s3);
	                                                        s1 = s2;
	                                                      } else {
	                                                        peg$currPos = s1;
	                                                        s1 = peg$FAILED;
	                                                      }
	                                                    } else {
	                                                      peg$currPos = s1;
	                                                      s1 = peg$FAILED;
	                                                    }
	                                                    if (s1 === peg$FAILED) {
	                                                      s1 = peg$currPos;
	                                                      peg$savedPos = peg$currPos;
	                                                      s2 = peg$c93();
	                                                      if (s2) {
	                                                        s2 = void 0;
	                                                      } else {
	                                                        s2 = peg$FAILED;
	                                                      }
	                                                      if (s2 !== peg$FAILED) {
	                                                        s3 = peg$parsecolor_speclist_group();
	                                                        if (s3 === peg$FAILED) {
	                                                          peg$savedPos = peg$currPos;
	                                                          s3 = peg$c94();
	                                                          if (s3) {
	                                                            s3 = void 0;
	                                                          } else {
	                                                            s3 = peg$FAILED;
	                                                          }
	                                                        }
	                                                        if (s3 !== peg$FAILED) {
	                                                          peg$savedPos = s1;
	                                                          s2 = peg$c87(s3);
	                                                          s1 = s2;
	                                                        } else {
	                                                          peg$currPos = s1;
	                                                          s1 = peg$FAILED;
	                                                        }
	                                                      } else {
	                                                        peg$currPos = s1;
	                                                        s1 = peg$FAILED;
	                                                      }
	                                                      if (s1 === peg$FAILED) {
	                                                        s1 = peg$currPos;
	                                                        peg$savedPos = peg$currPos;
	                                                        s2 = peg$c95();
	                                                        if (s2) {
	                                                          s2 = void 0;
	                                                        } else {
	                                                          s2 = peg$FAILED;
	                                                        }
	                                                        if (s2 !== peg$FAILED) {
	                                                          s3 = peg$parsecoord_group();
	                                                          if (s3 === peg$FAILED) {
	                                                            peg$savedPos = peg$currPos;
	                                                            s3 = peg$c96();
	                                                            if (s3) {
	                                                              s3 = void 0;
	                                                            } else {
	                                                              s3 = peg$FAILED;
	                                                            }
	                                                          }
	                                                          if (s3 !== peg$FAILED) {
	                                                            peg$savedPos = s1;
	                                                            s2 = peg$c87(s3);
	                                                            s1 = s2;
	                                                          } else {
	                                                            peg$currPos = s1;
	                                                            s1 = peg$FAILED;
	                                                          }
	                                                        } else {
	                                                          peg$currPos = s1;
	                                                          s1 = peg$FAILED;
	                                                        }
	                                                        if (s1 === peg$FAILED) {
	                                                          s1 = peg$currPos;
	                                                          peg$savedPos = peg$currPos;
	                                                          s2 = peg$c97();
	                                                          if (s2) {
	                                                            s2 = void 0;
	                                                          } else {
	                                                            s2 = peg$FAILED;
	                                                          }
	                                                          if (s2 !== peg$FAILED) {
	                                                            s3 = peg$parsecoord_optgroup();
	                                                            if (s3 === peg$FAILED) {
	                                                              s3 = null;
	                                                            }
	                                                            if (s3 !== peg$FAILED) {
	                                                              peg$savedPos = s1;
	                                                              s2 = peg$c87(s3);
	                                                              s1 = s2;
	                                                            } else {
	                                                              peg$currPos = s1;
	                                                              s1 = peg$FAILED;
	                                                            }
	                                                          } else {
	                                                            peg$currPos = s1;
	                                                            s1 = peg$FAILED;
	                                                          }
	                                                          if (s1 === peg$FAILED) {
	                                                            s1 = peg$currPos;
	                                                            peg$savedPos = peg$currPos;
	                                                            s2 = peg$c98();
	                                                            if (s2) {
	                                                              s2 = void 0;
	                                                            } else {
	                                                              s2 = peg$FAILED;
	                                                            }
	                                                            if (s2 !== peg$FAILED) {
	                                                              s3 = peg$parsevector();
	                                                              if (s3 === peg$FAILED) {
	                                                                peg$savedPos = peg$currPos;
	                                                                s3 = peg$c99();
	                                                                if (s3) {
	                                                                  s3 = void 0;
	                                                                } else {
	                                                                  s3 = peg$FAILED;
	                                                                }
	                                                              }
	                                                              if (s3 !== peg$FAILED) {
	                                                                peg$savedPos = s1;
	                                                                s2 = peg$c69(s3);
	                                                                s1 = s2;
	                                                              } else {
	                                                                peg$currPos = s1;
	                                                                s1 = peg$FAILED;
	                                                              }
	                                                            } else {
	                                                              peg$currPos = s1;
	                                                              s1 = peg$FAILED;
	                                                            }
	                                                            if (s1 === peg$FAILED) {
	                                                              s1 = peg$currPos;
	                                                              peg$savedPos = peg$currPos;
	                                                              s2 = peg$c100();
	                                                              if (s2) {
	                                                                s2 = void 0;
	                                                              } else {
	                                                                s2 = peg$FAILED;
	                                                              }
	                                                              if (s2 !== peg$FAILED) {
	                                                                s3 = peg$parsevector();
	                                                                if (s3 === peg$FAILED) {
	                                                                  s3 = null;
	                                                                }
	                                                                if (s3 !== peg$FAILED) {
	                                                                  peg$savedPos = s1;
	                                                                  s2 = peg$c69(s3);
	                                                                  s1 = s2;
	                                                                } else {
	                                                                  peg$currPos = s1;
	                                                                  s1 = peg$FAILED;
	                                                                }
	                                                              } else {
	                                                                peg$currPos = s1;
	                                                                s1 = peg$FAILED;
	                                                              }
	                                                              if (s1 === peg$FAILED) {
	                                                                s1 = peg$currPos;
	                                                                peg$savedPos = peg$currPos;
	                                                                s2 = peg$c101();
	                                                                if (s2) {
	                                                                  s2 = void 0;
	                                                                } else {
	                                                                  s2 = peg$FAILED;
	                                                                }
	                                                                if (s2 !== peg$FAILED) {
	                                                                  s3 = peg$parsecolumns();
	                                                                  if (s3 === peg$FAILED) {
	                                                                    peg$savedPos = peg$currPos;
	                                                                    s3 = peg$c102();
	                                                                    if (s3) {
	                                                                      s3 = void 0;
	                                                                    } else {
	                                                                      s3 = peg$FAILED;
	                                                                    }
	                                                                  }
	                                                                  if (s3 !== peg$FAILED) {
	                                                                    peg$savedPos = s1;
	                                                                    s2 = peg$c87(s3);
	                                                                    s1 = s2;
	                                                                  } else {
	                                                                    peg$currPos = s1;
	                                                                    s1 = peg$FAILED;
	                                                                  }
	                                                                } else {
	                                                                  peg$currPos = s1;
	                                                                  s1 = peg$FAILED;
	                                                                }
	                                                                if (s1 === peg$FAILED) {
	                                                                  s1 = peg$currPos;
	                                                                  peg$savedPos = peg$currPos;
	                                                                  s2 = peg$c103();
	                                                                  if (s2) {
	                                                                    s2 = void 0;
	                                                                  } else {
	                                                                    s2 = peg$FAILED;
	                                                                  }
	                                                                  if (s2 !== peg$FAILED) {
	                                                                    s3 = peg$parseskip_space();
	                                                                    if (s3 !== peg$FAILED) {
	                                                                      s2 = [s2, s3];
	                                                                      s1 = s2;
	                                                                    } else {
	                                                                      peg$currPos = s1;
	                                                                      s1 = peg$FAILED;
	                                                                    }
	                                                                  } else {
	                                                                    peg$currPos = s1;
	                                                                    s1 = peg$FAILED;
	                                                                  }
	                                                                  if (s1 === peg$FAILED) {
	                                                                    s1 = peg$currPos;
	                                                                    peg$savedPos = peg$currPos;
	                                                                    s2 = peg$c104();
	                                                                    if (s2) {
	                                                                      s2 = void 0;
	                                                                    } else {
	                                                                      s2 = peg$FAILED;
	                                                                    }
	                                                                    if (s2 !== peg$FAILED) {
	                                                                      s3 = peg$parseitems();
	                                                                      if (s3 !== peg$FAILED) {
	                                                                        peg$savedPos = s1;
	                                                                        s2 = peg$c58(s3);
	                                                                        s1 = s2;
	                                                                      } else {
	                                                                        peg$currPos = s1;
	                                                                        s1 = peg$FAILED;
	                                                                      }
	                                                                    } else {
	                                                                      peg$currPos = s1;
	                                                                      s1 = peg$FAILED;
	                                                                    }
	                                                                    if (s1 === peg$FAILED) {
	                                                                      s1 = peg$currPos;
	                                                                      peg$savedPos = peg$currPos;
	                                                                      s2 = peg$c105();
	                                                                      if (s2) {
	                                                                        s2 = void 0;
	                                                                      } else {
	                                                                        s2 = peg$FAILED;
	                                                                      }
	                                                                      if (s2 !== peg$FAILED) {
	                                                                        s3 = peg$parseenumitems();
	                                                                        if (s3 !== peg$FAILED) {
	                                                                          peg$savedPos = s1;
	                                                                          s2 = peg$c58(s3);
	                                                                          s1 = s2;
	                                                                        } else {
	                                                                          peg$currPos = s1;
	                                                                          s1 = peg$FAILED;
	                                                                        }
	                                                                      } else {
	                                                                        peg$currPos = s1;
	                                                                        s1 = peg$FAILED;
	                                                                      }
	                                                                      if (s1 === peg$FAILED) {
	                                                                        s1 = peg$currPos;
	                                                                        s2 = peg$currPos;
	                                                                        peg$silentFails++;
	                                                                        s3 = peg$currPos;
	                                                                        s4 = peg$parseskip_space();
	                                                                        if (s4 !== peg$FAILED) {
	                                                                          s5 = peg$parsebegin_optgroup();
	                                                                          if (s5 !== peg$FAILED) {
	                                                                            s4 = [s4, s5];
	                                                                            s3 = s4;
	                                                                          } else {
	                                                                            peg$currPos = s3;
	                                                                            s3 = peg$FAILED;
	                                                                          }
	                                                                        } else {
	                                                                          peg$currPos = s3;
	                                                                          s3 = peg$FAILED;
	                                                                        }
	                                                                        peg$silentFails--;
	                                                                        if (s3 !== peg$FAILED) {
	                                                                          peg$currPos = s2;
	                                                                          s2 = void 0;
	                                                                        } else {
	                                                                          s2 = peg$FAILED;
	                                                                        }
	                                                                        if (s2 !== peg$FAILED) {
	                                                                          peg$savedPos = peg$currPos;
	                                                                          s3 = peg$c106();
	                                                                          if (s3) {
	                                                                            s3 = void 0;
	                                                                          } else {
	                                                                            s3 = peg$FAILED;
	                                                                          }
	                                                                          if (s3 !== peg$FAILED) {
	                                                                            s2 = [s2, s3];
	                                                                            s1 = s2;
	                                                                          } else {
	                                                                            peg$currPos = s1;
	                                                                            s1 = peg$FAILED;
	                                                                          }
	                                                                        } else {
	                                                                          peg$currPos = s1;
	                                                                          s1 = peg$FAILED;
	                                                                        }
	                                                                        if (s1 === peg$FAILED) {
	                                                                          s1 = peg$currPos;
	                                                                          s2 = peg$currPos;
	                                                                          peg$silentFails++;
	                                                                          s3 = peg$currPos;
	                                                                          s4 = peg$parseskip_space();
	                                                                          if (s4 !== peg$FAILED) {
	                                                                            s5 = peg$parsebegin_group();
	                                                                            if (s5 !== peg$FAILED) {
	                                                                              s4 = [s4, s5];
	                                                                              s3 = s4;
	                                                                            } else {
	                                                                              peg$currPos = s3;
	                                                                              s3 = peg$FAILED;
	                                                                            }
	                                                                          } else {
	                                                                            peg$currPos = s3;
	                                                                            s3 = peg$FAILED;
	                                                                          }
	                                                                          peg$silentFails--;
	                                                                          if (s3 !== peg$FAILED) {
	                                                                            peg$currPos = s2;
	                                                                            s2 = void 0;
	                                                                          } else {
	                                                                            s2 = peg$FAILED;
	                                                                          }
	                                                                          if (s2 !== peg$FAILED) {
	                                                                            peg$savedPos = peg$currPos;
	                                                                            s3 = peg$c107();
	                                                                            if (s3) {
	                                                                              s3 = void 0;
	                                                                            } else {
	                                                                              s3 = peg$FAILED;
	                                                                            }
	                                                                            if (s3 !== peg$FAILED) {
	                                                                              s2 = [s2, s3];
	                                                                              s1 = s2;
	                                                                            } else {
	                                                                              peg$currPos = s1;
	                                                                              s1 = peg$FAILED;
	                                                                            }
	                                                                          } else {
	                                                                            peg$currPos = s1;
	                                                                            s1 = peg$FAILED;
	                                                                          }
	                                                                        }
	                                                                      }
	                                                                    }
	                                                                  }
	                                                                }
	                                                              }
	                                                            }
	                                                          }
	                                                        }
	                                                      }
	                                                    }
	                                                  }
	                                                }
	                                              }
	                                            }
	                                          }
	                                        }
	                                      }
	                                    }
	                                  }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        s1 = peg$currPos;
	        peg$savedPos = peg$currPos;
	        s2 = peg$c45();
	        if (s2) {
	          s2 = void 0;
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s1;
	          s2 = peg$c46();
	        }
	        s1 = s2;
	        if (s1 === peg$FAILED) {
	          s1 = peg$parsenextArgStar();
	          if (s1 === peg$FAILED) {
	            s1 = peg$currPos;
	            peg$savedPos = peg$currPos;
	            s2 = peg$c47();
	            if (s2) {
	              s2 = void 0;
	            } else {
	              s2 = peg$FAILED;
	            }
	            if (s2 !== peg$FAILED) {
	              s3 = peg$parsearg_group();
	              if (s3 === peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s3 = peg$c48();
	                if (s3) {
	                  s3 = void 0;
	                } else {
	                  s3 = peg$FAILED;
	                }
	              }
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s1;
	                s2 = peg$c49(s3);
	                s1 = s2;
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	            if (s1 === peg$FAILED) {
	              s1 = peg$currPos;
	              peg$savedPos = peg$currPos;
	              s2 = peg$c50();
	              if (s2) {
	                s2 = void 0;
	              } else {
	                s2 = peg$FAILED;
	              }
	              if (s2 !== peg$FAILED) {
	                s3 = peg$parsearg_hgroup();
	                if (s3 === peg$FAILED) {
	                  peg$savedPos = peg$currPos;
	                  s3 = peg$c48();
	                  if (s3) {
	                    s3 = void 0;
	                  } else {
	                    s3 = peg$FAILED;
	                  }
	                }
	                if (s3 !== peg$FAILED) {
	                  peg$savedPos = s1;
	                  s2 = peg$c49(s3);
	                  s1 = s2;
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	              if (s1 === peg$FAILED) {
	                s1 = peg$currPos;
	                peg$savedPos = peg$currPos;
	                s2 = peg$c51();
	                if (s2) {
	                  s2 = void 0;
	                } else {
	                  s2 = peg$FAILED;
	                }
	                if (s2 !== peg$FAILED) {
	                  s3 = peg$parsehorizontal();
	                  if (s3 === peg$FAILED) {
	                    peg$savedPos = peg$currPos;
	                    s3 = peg$c52();
	                    if (s3) {
	                      s3 = void 0;
	                    } else {
	                      s3 = peg$FAILED;
	                    }
	                  }
	                  if (s3 !== peg$FAILED) {
	                    peg$savedPos = s1;
	                    s2 = peg$c53(s3);
	                    s1 = s2;
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	                if (s1 === peg$FAILED) {
	                  s1 = peg$currPos;
	                  peg$savedPos = peg$currPos;
	                  s2 = peg$c54();
	                  if (s2) {
	                    s2 = void 0;
	                  } else {
	                    s2 = peg$FAILED;
	                  }
	                  if (s2 !== peg$FAILED) {
	                    s3 = peg$parseopt_group();
	                    if (s3 === peg$FAILED) {
	                      s3 = null;
	                    }
	                    if (s3 !== peg$FAILED) {
	                      peg$savedPos = s1;
	                      s2 = peg$c55(s3);
	                      s1 = s2;
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                  if (s1 === peg$FAILED) {
	                    s1 = peg$currPos;
	                    peg$savedPos = peg$currPos;
	                    s2 = peg$c56();
	                    if (s2) {
	                      s2 = void 0;
	                    } else {
	                      s2 = peg$FAILED;
	                    }
	                    if (s2 !== peg$FAILED) {
	                      s3 = peg$parseid_group();
	                      if (s3 === peg$FAILED) {
	                        peg$savedPos = peg$currPos;
	                        s3 = peg$c57();
	                        if (s3) {
	                          s3 = void 0;
	                        } else {
	                          s3 = peg$FAILED;
	                        }
	                      }
	                      if (s3 !== peg$FAILED) {
	                        peg$savedPos = s1;
	                        s2 = peg$c58(s3);
	                        s1 = s2;
	                      } else {
	                        peg$currPos = s1;
	                        s1 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                    if (s1 === peg$FAILED) {
	                      s1 = peg$currPos;
	                      peg$savedPos = peg$currPos;
	                      s2 = peg$c59();
	                      if (s2) {
	                        s2 = void 0;
	                      } else {
	                        s2 = peg$FAILED;
	                      }
	                      if (s2 !== peg$FAILED) {
	                        s3 = peg$parseide_group();
	                        if (s3 === peg$FAILED) {
	                          peg$savedPos = peg$currPos;
	                          s3 = peg$c60();
	                          if (s3) {
	                            s3 = void 0;
	                          } else {
	                            s3 = peg$FAILED;
	                          }
	                        }
	                        if (s3 !== peg$FAILED) {
	                          peg$savedPos = s1;
	                          s2 = peg$c58(s3);
	                          s1 = s2;
	                        } else {
	                          peg$currPos = s1;
	                          s1 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s1;
	                        s1 = peg$FAILED;
	                      }
	                      if (s1 === peg$FAILED) {
	                        s1 = peg$currPos;
	                        peg$savedPos = peg$currPos;
	                        s2 = peg$c61();
	                        if (s2) {
	                          s2 = void 0;
	                        } else {
	                          s2 = peg$FAILED;
	                        }
	                        if (s2 !== peg$FAILED) {
	                          s3 = peg$parseid_optgroup();
	                          if (s3 === peg$FAILED) {
	                            s3 = null;
	                          }
	                          if (s3 !== peg$FAILED) {
	                            peg$savedPos = s1;
	                            s2 = peg$c58(s3);
	                            s1 = s2;
	                          } else {
	                            peg$currPos = s1;
	                            s1 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s1;
	                          s1 = peg$FAILED;
	                        }
	                        if (s1 === peg$FAILED) {
	                          s1 = peg$currPos;
	                          peg$savedPos = peg$currPos;
	                          s2 = peg$c62();
	                          if (s2) {
	                            s2 = void 0;
	                          } else {
	                            s2 = peg$FAILED;
	                          }
	                          if (s2 !== peg$FAILED) {
	                            s3 = peg$parsekey_group();
	                            if (s3 === peg$FAILED) {
	                              peg$savedPos = peg$currPos;
	                              s3 = peg$c63();
	                              if (s3) {
	                                s3 = void 0;
	                              } else {
	                                s3 = peg$FAILED;
	                              }
	                            }
	                            if (s3 !== peg$FAILED) {
	                              peg$savedPos = s1;
	                              s2 = peg$c64(s3);
	                              s1 = s2;
	                            } else {
	                              peg$currPos = s1;
	                              s1 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s1;
	                            s1 = peg$FAILED;
	                          }
	                          if (s1 === peg$FAILED) {
	                            s1 = peg$currPos;
	                            peg$savedPos = peg$currPos;
	                            s2 = peg$c65();
	                            if (s2) {
	                              s2 = void 0;
	                            } else {
	                              s2 = peg$FAILED;
	                            }
	                            if (s2 !== peg$FAILED) {
	                              s3 = peg$parsekey_optgroup();
	                              if (s3 === peg$FAILED) {
	                                s3 = null;
	                              }
	                              if (s3 !== peg$FAILED) {
	                                peg$savedPos = s1;
	                                s2 = peg$c64(s3);
	                                s1 = s2;
	                              } else {
	                                peg$currPos = s1;
	                                s1 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s1;
	                              s1 = peg$FAILED;
	                            }
	                            if (s1 === peg$FAILED) {
	                              s1 = peg$currPos;
	                              peg$savedPos = peg$currPos;
	                              s2 = peg$c66();
	                              if (s2) {
	                                s2 = void 0;
	                              } else {
	                                s2 = peg$FAILED;
	                              }
	                              if (s2 !== peg$FAILED) {
	                                s3 = peg$parsekeyval_optgroup();
	                                if (s3 === peg$FAILED) {
	                                  s3 = null;
	                                }
	                                if (s3 !== peg$FAILED) {
	                                  peg$savedPos = s1;
	                                  s2 = peg$c64(s3);
	                                  s1 = s2;
	                                } else {
	                                  peg$currPos = s1;
	                                  s1 = peg$FAILED;
	                                }
	                              } else {
	                                peg$currPos = s1;
	                                s1 = peg$FAILED;
	                              }
	                              if (s1 === peg$FAILED) {
	                                s1 = peg$currPos;
	                                peg$savedPos = peg$currPos;
	                                s2 = peg$c67();
	                                if (s2) {
	                                  s2 = void 0;
	                                } else {
	                                  s2 = peg$FAILED;
	                                }
	                                if (s2 !== peg$FAILED) {
	                                  s3 = peg$parsecsv_group();
	                                  if (s3 === peg$FAILED) {
	                                    peg$savedPos = peg$currPos;
	                                    s3 = peg$c68();
	                                    if (s3) {
	                                      s3 = void 0;
	                                    } else {
	                                      s3 = peg$FAILED;
	                                    }
	                                  }
	                                  if (s3 !== peg$FAILED) {
	                                    peg$savedPos = s1;
	                                    s2 = peg$c69(s3);
	                                    s1 = s2;
	                                  } else {
	                                    peg$currPos = s1;
	                                    s1 = peg$FAILED;
	                                  }
	                                } else {
	                                  peg$currPos = s1;
	                                  s1 = peg$FAILED;
	                                }
	                                if (s1 === peg$FAILED) {
	                                  s1 = peg$currPos;
	                                  peg$savedPos = peg$currPos;
	                                  s2 = peg$c70();
	                                  if (s2) {
	                                    s2 = void 0;
	                                  } else {
	                                    s2 = peg$FAILED;
	                                  }
	                                  if (s2 !== peg$FAILED) {
	                                    s3 = peg$parseexpr_group();
	                                    if (s3 === peg$FAILED) {
	                                      peg$savedPos = peg$currPos;
	                                      s3 = peg$c71();
	                                      if (s3) {
	                                        s3 = void 0;
	                                      } else {
	                                        s3 = peg$FAILED;
	                                      }
	                                    }
	                                    if (s3 !== peg$FAILED) {
	                                      peg$savedPos = s1;
	                                      s2 = peg$c72(s3);
	                                      s1 = s2;
	                                    } else {
	                                      peg$currPos = s1;
	                                      s1 = peg$FAILED;
	                                    }
	                                  } else {
	                                    peg$currPos = s1;
	                                    s1 = peg$FAILED;
	                                  }
	                                  if (s1 === peg$FAILED) {
	                                    s1 = peg$currPos;
	                                    peg$savedPos = peg$currPos;
	                                    s2 = peg$c73();
	                                    if (s2) {
	                                      s2 = void 0;
	                                    } else {
	                                      s2 = peg$FAILED;
	                                    }
	                                    if (s2 !== peg$FAILED) {
	                                      s3 = peg$parseexpr_optgroup();
	                                      if (s3 === peg$FAILED) {
	                                        s3 = null;
	                                      }
	                                      if (s3 !== peg$FAILED) {
	                                        peg$savedPos = s1;
	                                        s2 = peg$c72(s3);
	                                        s1 = s2;
	                                      } else {
	                                        peg$currPos = s1;
	                                        s1 = peg$FAILED;
	                                      }
	                                    } else {
	                                      peg$currPos = s1;
	                                      s1 = peg$FAILED;
	                                    }
	                                    if (s1 === peg$FAILED) {
	                                      s1 = peg$currPos;
	                                      peg$savedPos = peg$currPos;
	                                      s2 = peg$c74();
	                                      if (s2) {
	                                        s2 = void 0;
	                                      } else {
	                                        s2 = peg$FAILED;
	                                      }
	                                      if (s2 !== peg$FAILED) {
	                                        s3 = peg$parselength_group();
	                                        if (s3 === peg$FAILED) {
	                                          peg$savedPos = peg$currPos;
	                                          s3 = peg$c75();
	                                          if (s3) {
	                                            s3 = void 0;
	                                          } else {
	                                            s3 = peg$FAILED;
	                                          }
	                                        }
	                                        if (s3 !== peg$FAILED) {
	                                          peg$savedPos = s1;
	                                          s2 = peg$c76(s3);
	                                          s1 = s2;
	                                        } else {
	                                          peg$currPos = s1;
	                                          s1 = peg$FAILED;
	                                        }
	                                      } else {
	                                        peg$currPos = s1;
	                                        s1 = peg$FAILED;
	                                      }
	                                      if (s1 === peg$FAILED) {
	                                        s1 = peg$currPos;
	                                        peg$savedPos = peg$currPos;
	                                        s2 = peg$c77();
	                                        if (s2) {
	                                          s2 = void 0;
	                                        } else {
	                                          s2 = peg$FAILED;
	                                        }
	                                        if (s2 !== peg$FAILED) {
	                                          s3 = peg$parselength_group();
	                                          if (s3 === peg$FAILED) {
	                                            s3 = null;
	                                          }
	                                          if (s3 !== peg$FAILED) {
	                                            peg$savedPos = s1;
	                                            s2 = peg$c76(s3);
	                                            s1 = s2;
	                                          } else {
	                                            peg$currPos = s1;
	                                            s1 = peg$FAILED;
	                                          }
	                                        } else {
	                                          peg$currPos = s1;
	                                          s1 = peg$FAILED;
	                                        }
	                                        if (s1 === peg$FAILED) {
	                                          s1 = peg$currPos;
	                                          peg$savedPos = peg$currPos;
	                                          s2 = peg$c78();
	                                          if (s2) {
	                                            s2 = void 0;
	                                          } else {
	                                            s2 = peg$FAILED;
	                                          }
	                                          if (s2 !== peg$FAILED) {
	                                            s3 = peg$parselength_optgroup();
	                                            if (s3 === peg$FAILED) {
	                                              s3 = null;
	                                            }
	                                            if (s3 !== peg$FAILED) {
	                                              peg$savedPos = s1;
	                                              s2 = peg$c76(s3);
	                                              s1 = s2;
	                                            } else {
	                                              peg$currPos = s1;
	                                              s1 = peg$FAILED;
	                                            }
	                                          } else {
	                                            peg$currPos = s1;
	                                            s1 = peg$FAILED;
	                                          }
	                                          if (s1 === peg$FAILED) {
	                                            s1 = peg$currPos;
	                                            peg$savedPos = peg$currPos;
	                                            s2 = peg$c79();
	                                            if (s2) {
	                                              s2 = void 0;
	                                            } else {
	                                              s2 = peg$FAILED;
	                                            }
	                                            if (s2 !== peg$FAILED) {
	                                              s3 = peg$parsemacro_group();
	                                              if (s3 === peg$FAILED) {
	                                                peg$savedPos = peg$currPos;
	                                                s3 = peg$c80();
	                                                if (s3) {
	                                                  s3 = void 0;
	                                                } else {
	                                                  s3 = peg$FAILED;
	                                                }
	                                              }
	                                              if (s3 !== peg$FAILED) {
	                                                peg$savedPos = s1;
	                                                s2 = peg$c81(s3);
	                                                s1 = s2;
	                                              } else {
	                                                peg$currPos = s1;
	                                                s1 = peg$FAILED;
	                                              }
	                                            } else {
	                                              peg$currPos = s1;
	                                              s1 = peg$FAILED;
	                                            }
	                                            if (s1 === peg$FAILED) {
	                                              s1 = peg$currPos;
	                                              peg$savedPos = peg$currPos;
	                                              s2 = peg$c82();
	                                              if (s2) {
	                                                s2 = void 0;
	                                              } else {
	                                                s2 = peg$FAILED;
	                                              }
	                                              if (s2 !== peg$FAILED) {
	                                                s3 = peg$parseurl_group();
	                                                if (s3 === peg$FAILED) {
	                                                  peg$savedPos = peg$currPos;
	                                                  s3 = peg$c83();
	                                                  if (s3) {
	                                                    s3 = void 0;
	                                                  } else {
	                                                    s3 = peg$FAILED;
	                                                  }
	                                                }
	                                                if (s3 !== peg$FAILED) {
	                                                  peg$savedPos = s1;
	                                                  s2 = peg$c84(s3);
	                                                  s1 = s2;
	                                                } else {
	                                                  peg$currPos = s1;
	                                                  s1 = peg$FAILED;
	                                                }
	                                              } else {
	                                                peg$currPos = s1;
	                                                s1 = peg$FAILED;
	                                              }
	                                              if (s1 === peg$FAILED) {
	                                                s1 = peg$currPos;
	                                                peg$savedPos = peg$currPos;
	                                                s2 = peg$c85();
	                                                if (s2) {
	                                                  s2 = void 0;
	                                                } else {
	                                                  s2 = peg$FAILED;
	                                                }
	                                                if (s2 !== peg$FAILED) {
	                                                  s3 = peg$parsecolor_group();
	                                                  if (s3 === peg$FAILED) {
	                                                    peg$savedPos = peg$currPos;
	                                                    s3 = peg$c86();
	                                                    if (s3) {
	                                                      s3 = void 0;
	                                                    } else {
	                                                      s3 = peg$FAILED;
	                                                    }
	                                                  }
	                                                  if (s3 !== peg$FAILED) {
	                                                    peg$savedPos = s1;
	                                                    s2 = peg$c87(s3);
	                                                    s1 = s2;
	                                                  } else {
	                                                    peg$currPos = s1;
	                                                    s1 = peg$FAILED;
	                                                  }
	                                                } else {
	                                                  peg$currPos = s1;
	                                                  s1 = peg$FAILED;
	                                                }
	                                                if (s1 === peg$FAILED) {
	                                                  s1 = peg$currPos;
	                                                  peg$savedPos = peg$currPos;
	                                                  s2 = peg$c88();
	                                                  if (s2) {
	                                                    s2 = void 0;
	                                                  } else {
	                                                    s2 = peg$FAILED;
	                                                  }
	                                                  if (s2 !== peg$FAILED) {
	                                                    s3 = peg$parsecolor_modellist_group();
	                                                    if (s3 === peg$FAILED) {
	                                                      peg$savedPos = peg$currPos;
	                                                      s3 = peg$c89();
	                                                      if (s3) {
	                                                        s3 = void 0;
	                                                      } else {
	                                                        s3 = peg$FAILED;
	                                                      }
	                                                    }
	                                                    if (s3 !== peg$FAILED) {
	                                                      peg$savedPos = s1;
	                                                      s2 = peg$c87(s3);
	                                                      s1 = s2;
	                                                    } else {
	                                                      peg$currPos = s1;
	                                                      s1 = peg$FAILED;
	                                                    }
	                                                  } else {
	                                                    peg$currPos = s1;
	                                                    s1 = peg$FAILED;
	                                                  }
	                                                  if (s1 === peg$FAILED) {
	                                                    s1 = peg$currPos;
	                                                    peg$savedPos = peg$currPos;
	                                                    s2 = peg$c90();
	                                                    if (s2) {
	                                                      s2 = void 0;
	                                                    } else {
	                                                      s2 = peg$FAILED;
	                                                    }
	                                                    if (s2 !== peg$FAILED) {
	                                                      s3 = peg$parsecolor_modellist_optgroup();
	                                                      if (s3 === peg$FAILED) {
	                                                        s3 = null;
	                                                      }
	                                                      if (s3 !== peg$FAILED) {
	                                                        peg$savedPos = s1;
	                                                        s2 = peg$c87(s3);
	                                                        s1 = s2;
	                                                      } else {
	                                                        peg$currPos = s1;
	                                                        s1 = peg$FAILED;
	                                                      }
	                                                    } else {
	                                                      peg$currPos = s1;
	                                                      s1 = peg$FAILED;
	                                                    }
	                                                    if (s1 === peg$FAILED) {
	                                                      s1 = peg$currPos;
	                                                      peg$savedPos = peg$currPos;
	                                                      s2 = peg$c91();
	                                                      if (s2) {
	                                                        s2 = void 0;
	                                                      } else {
	                                                        s2 = peg$FAILED;
	                                                      }
	                                                      if (s2 !== peg$FAILED) {
	                                                        s3 = peg$parsecolor_setspec_group();
	                                                        if (s3 === peg$FAILED) {
	                                                          peg$savedPos = peg$currPos;
	                                                          s3 = peg$c92();
	                                                          if (s3) {
	                                                            s3 = void 0;
	                                                          } else {
	                                                            s3 = peg$FAILED;
	                                                          }
	                                                        }
	                                                        if (s3 !== peg$FAILED) {
	                                                          peg$savedPos = s1;
	                                                          s2 = peg$c87(s3);
	                                                          s1 = s2;
	                                                        } else {
	                                                          peg$currPos = s1;
	                                                          s1 = peg$FAILED;
	                                                        }
	                                                      } else {
	                                                        peg$currPos = s1;
	                                                        s1 = peg$FAILED;
	                                                      }
	                                                      if (s1 === peg$FAILED) {
	                                                        s1 = peg$currPos;
	                                                        peg$savedPos = peg$currPos;
	                                                        s2 = peg$c93();
	                                                        if (s2) {
	                                                          s2 = void 0;
	                                                        } else {
	                                                          s2 = peg$FAILED;
	                                                        }
	                                                        if (s2 !== peg$FAILED) {
	                                                          s3 = peg$parsecolor_speclist_group();
	                                                          if (s3 === peg$FAILED) {
	                                                            peg$savedPos = peg$currPos;
	                                                            s3 = peg$c94();
	                                                            if (s3) {
	                                                              s3 = void 0;
	                                                            } else {
	                                                              s3 = peg$FAILED;
	                                                            }
	                                                          }
	                                                          if (s3 !== peg$FAILED) {
	                                                            peg$savedPos = s1;
	                                                            s2 = peg$c87(s3);
	                                                            s1 = s2;
	                                                          } else {
	                                                            peg$currPos = s1;
	                                                            s1 = peg$FAILED;
	                                                          }
	                                                        } else {
	                                                          peg$currPos = s1;
	                                                          s1 = peg$FAILED;
	                                                        }
	                                                        if (s1 === peg$FAILED) {
	                                                          s1 = peg$currPos;
	                                                          peg$savedPos = peg$currPos;
	                                                          s2 = peg$c95();
	                                                          if (s2) {
	                                                            s2 = void 0;
	                                                          } else {
	                                                            s2 = peg$FAILED;
	                                                          }
	                                                          if (s2 !== peg$FAILED) {
	                                                            s3 = peg$parsecoord_group();
	                                                            if (s3 === peg$FAILED) {
	                                                              peg$savedPos = peg$currPos;
	                                                              s3 = peg$c96();
	                                                              if (s3) {
	                                                                s3 = void 0;
	                                                              } else {
	                                                                s3 = peg$FAILED;
	                                                              }
	                                                            }
	                                                            if (s3 !== peg$FAILED) {
	                                                              peg$savedPos = s1;
	                                                              s2 = peg$c87(s3);
	                                                              s1 = s2;
	                                                            } else {
	                                                              peg$currPos = s1;
	                                                              s1 = peg$FAILED;
	                                                            }
	                                                          } else {
	                                                            peg$currPos = s1;
	                                                            s1 = peg$FAILED;
	                                                          }
	                                                          if (s1 === peg$FAILED) {
	                                                            s1 = peg$currPos;
	                                                            peg$savedPos = peg$currPos;
	                                                            s2 = peg$c97();
	                                                            if (s2) {
	                                                              s2 = void 0;
	                                                            } else {
	                                                              s2 = peg$FAILED;
	                                                            }
	                                                            if (s2 !== peg$FAILED) {
	                                                              s3 = peg$parsecoord_optgroup();
	                                                              if (s3 === peg$FAILED) {
	                                                                s3 = null;
	                                                              }
	                                                              if (s3 !== peg$FAILED) {
	                                                                peg$savedPos = s1;
	                                                                s2 = peg$c87(s3);
	                                                                s1 = s2;
	                                                              } else {
	                                                                peg$currPos = s1;
	                                                                s1 = peg$FAILED;
	                                                              }
	                                                            } else {
	                                                              peg$currPos = s1;
	                                                              s1 = peg$FAILED;
	                                                            }
	                                                            if (s1 === peg$FAILED) {
	                                                              s1 = peg$currPos;
	                                                              peg$savedPos = peg$currPos;
	                                                              s2 = peg$c98();
	                                                              if (s2) {
	                                                                s2 = void 0;
	                                                              } else {
	                                                                s2 = peg$FAILED;
	                                                              }
	                                                              if (s2 !== peg$FAILED) {
	                                                                s3 = peg$parsevector();
	                                                                if (s3 === peg$FAILED) {
	                                                                  peg$savedPos = peg$currPos;
	                                                                  s3 = peg$c99();
	                                                                  if (s3) {
	                                                                    s3 = void 0;
	                                                                  } else {
	                                                                    s3 = peg$FAILED;
	                                                                  }
	                                                                }
	                                                                if (s3 !== peg$FAILED) {
	                                                                  peg$savedPos = s1;
	                                                                  s2 = peg$c69(s3);
	                                                                  s1 = s2;
	                                                                } else {
	                                                                  peg$currPos = s1;
	                                                                  s1 = peg$FAILED;
	                                                                }
	                                                              } else {
	                                                                peg$currPos = s1;
	                                                                s1 = peg$FAILED;
	                                                              }
	                                                              if (s1 === peg$FAILED) {
	                                                                s1 = peg$currPos;
	                                                                peg$savedPos = peg$currPos;
	                                                                s2 = peg$c100();
	                                                                if (s2) {
	                                                                  s2 = void 0;
	                                                                } else {
	                                                                  s2 = peg$FAILED;
	                                                                }
	                                                                if (s2 !== peg$FAILED) {
	                                                                  s3 = peg$parsevector();
	                                                                  if (s3 === peg$FAILED) {
	                                                                    s3 = null;
	                                                                  }
	                                                                  if (s3 !== peg$FAILED) {
	                                                                    peg$savedPos = s1;
	                                                                    s2 = peg$c69(s3);
	                                                                    s1 = s2;
	                                                                  } else {
	                                                                    peg$currPos = s1;
	                                                                    s1 = peg$FAILED;
	                                                                  }
	                                                                } else {
	                                                                  peg$currPos = s1;
	                                                                  s1 = peg$FAILED;
	                                                                }
	                                                                if (s1 === peg$FAILED) {
	                                                                  s1 = peg$currPos;
	                                                                  peg$savedPos = peg$currPos;
	                                                                  s2 = peg$c101();
	                                                                  if (s2) {
	                                                                    s2 = void 0;
	                                                                  } else {
	                                                                    s2 = peg$FAILED;
	                                                                  }
	                                                                  if (s2 !== peg$FAILED) {
	                                                                    s3 = peg$parsecolumns();
	                                                                    if (s3 === peg$FAILED) {
	                                                                      peg$savedPos = peg$currPos;
	                                                                      s3 = peg$c102();
	                                                                      if (s3) {
	                                                                        s3 = void 0;
	                                                                      } else {
	                                                                        s3 = peg$FAILED;
	                                                                      }
	                                                                    }
	                                                                    if (s3 !== peg$FAILED) {
	                                                                      peg$savedPos = s1;
	                                                                      s2 = peg$c87(s3);
	                                                                      s1 = s2;
	                                                                    } else {
	                                                                      peg$currPos = s1;
	                                                                      s1 = peg$FAILED;
	                                                                    }
	                                                                  } else {
	                                                                    peg$currPos = s1;
	                                                                    s1 = peg$FAILED;
	                                                                  }
	                                                                  if (s1 === peg$FAILED) {
	                                                                    s1 = peg$currPos;
	                                                                    peg$savedPos = peg$currPos;
	                                                                    s2 = peg$c103();
	                                                                    if (s2) {
	                                                                      s2 = void 0;
	                                                                    } else {
	                                                                      s2 = peg$FAILED;
	                                                                    }
	                                                                    if (s2 !== peg$FAILED) {
	                                                                      s3 = peg$parseskip_space();
	                                                                      if (s3 !== peg$FAILED) {
	                                                                        s2 = [s2, s3];
	                                                                        s1 = s2;
	                                                                      } else {
	                                                                        peg$currPos = s1;
	                                                                        s1 = peg$FAILED;
	                                                                      }
	                                                                    } else {
	                                                                      peg$currPos = s1;
	                                                                      s1 = peg$FAILED;
	                                                                    }
	                                                                    if (s1 === peg$FAILED) {
	                                                                      s1 = peg$currPos;
	                                                                      peg$savedPos = peg$currPos;
	                                                                      s2 = peg$c104();
	                                                                      if (s2) {
	                                                                        s2 = void 0;
	                                                                      } else {
	                                                                        s2 = peg$FAILED;
	                                                                      }
	                                                                      if (s2 !== peg$FAILED) {
	                                                                        s3 = peg$parseitems();
	                                                                        if (s3 !== peg$FAILED) {
	                                                                          peg$savedPos = s1;
	                                                                          s2 = peg$c58(s3);
	                                                                          s1 = s2;
	                                                                        } else {
	                                                                          peg$currPos = s1;
	                                                                          s1 = peg$FAILED;
	                                                                        }
	                                                                      } else {
	                                                                        peg$currPos = s1;
	                                                                        s1 = peg$FAILED;
	                                                                      }
	                                                                      if (s1 === peg$FAILED) {
	                                                                        s1 = peg$currPos;
	                                                                        peg$savedPos = peg$currPos;
	                                                                        s2 = peg$c105();
	                                                                        if (s2) {
	                                                                          s2 = void 0;
	                                                                        } else {
	                                                                          s2 = peg$FAILED;
	                                                                        }
	                                                                        if (s2 !== peg$FAILED) {
	                                                                          s3 = peg$parseenumitems();
	                                                                          if (s3 !== peg$FAILED) {
	                                                                            peg$savedPos = s1;
	                                                                            s2 = peg$c58(s3);
	                                                                            s1 = s2;
	                                                                          } else {
	                                                                            peg$currPos = s1;
	                                                                            s1 = peg$FAILED;
	                                                                          }
	                                                                        } else {
	                                                                          peg$currPos = s1;
	                                                                          s1 = peg$FAILED;
	                                                                        }
	                                                                        if (s1 === peg$FAILED) {
	                                                                          s1 = peg$currPos;
	                                                                          s2 = peg$currPos;
	                                                                          peg$silentFails++;
	                                                                          s3 = peg$currPos;
	                                                                          s4 = peg$parseskip_space();
	                                                                          if (s4 !== peg$FAILED) {
	                                                                            s5 = peg$parsebegin_optgroup();
	                                                                            if (s5 !== peg$FAILED) {
	                                                                              s4 = [s4, s5];
	                                                                              s3 = s4;
	                                                                            } else {
	                                                                              peg$currPos = s3;
	                                                                              s3 = peg$FAILED;
	                                                                            }
	                                                                          } else {
	                                                                            peg$currPos = s3;
	                                                                            s3 = peg$FAILED;
	                                                                          }
	                                                                          peg$silentFails--;
	                                                                          if (s3 !== peg$FAILED) {
	                                                                            peg$currPos = s2;
	                                                                            s2 = void 0;
	                                                                          } else {
	                                                                            s2 = peg$FAILED;
	                                                                          }
	                                                                          if (s2 !== peg$FAILED) {
	                                                                            peg$savedPos = peg$currPos;
	                                                                            s3 = peg$c106();
	                                                                            if (s3) {
	                                                                              s3 = void 0;
	                                                                            } else {
	                                                                              s3 = peg$FAILED;
	                                                                            }
	                                                                            if (s3 !== peg$FAILED) {
	                                                                              s2 = [s2, s3];
	                                                                              s1 = s2;
	                                                                            } else {
	                                                                              peg$currPos = s1;
	                                                                              s1 = peg$FAILED;
	                                                                            }
	                                                                          } else {
	                                                                            peg$currPos = s1;
	                                                                            s1 = peg$FAILED;
	                                                                          }
	                                                                          if (s1 === peg$FAILED) {
	                                                                            s1 = peg$currPos;
	                                                                            s2 = peg$currPos;
	                                                                            peg$silentFails++;
	                                                                            s3 = peg$currPos;
	                                                                            s4 = peg$parseskip_space();
	                                                                            if (s4 !== peg$FAILED) {
	                                                                              s5 = peg$parsebegin_group();
	                                                                              if (s5 !== peg$FAILED) {
	                                                                                s4 = [s4, s5];
	                                                                                s3 = s4;
	                                                                              } else {
	                                                                                peg$currPos = s3;
	                                                                                s3 = peg$FAILED;
	                                                                              }
	                                                                            } else {
	                                                                              peg$currPos = s3;
	                                                                              s3 = peg$FAILED;
	                                                                            }
	                                                                            peg$silentFails--;
	                                                                            if (s3 !== peg$FAILED) {
	                                                                              peg$currPos = s2;
	                                                                              s2 = void 0;
	                                                                            } else {
	                                                                              s2 = peg$FAILED;
	                                                                            }
	                                                                            if (s2 !== peg$FAILED) {
	                                                                              peg$savedPos = peg$currPos;
	                                                                              s3 = peg$c107();
	                                                                              if (s3) {
	                                                                                s3 = void 0;
	                                                                              } else {
	                                                                                s3 = peg$FAILED;
	                                                                              }
	                                                                              if (s3 !== peg$FAILED) {
	                                                                                s2 = [s2, s3];
	                                                                                s1 = s2;
	                                                                              } else {
	                                                                                peg$currPos = s1;
	                                                                                s1 = peg$FAILED;
	                                                                              }
	                                                                            } else {
	                                                                              peg$currPos = s1;
	                                                                              s1 = peg$FAILED;
	                                                                            }
	                                                                          }
	                                                                        }
	                                                                      }
	                                                                    }
	                                                                  }
	                                                                }
	                                                              }
	                                                            }
	                                                          }
	                                                        }
	                                                      }
	                                                    }
	                                                  }
	                                                }
	                                              }
	                                            }
	                                          }
	                                        }
	                                      }
	                                    }
	                                  }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsenextArgStar() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      peg$savedPos = peg$currPos;
	      s1 = peg$c108();
	      if (s1) {
	        s1 = void 0;
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_space();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 42) {
	            s3 = peg$c109;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c110); }
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c111(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseid_group() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseidentifier();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c112(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseide_group() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseidentifier();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c112(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsemacro_group() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseescape();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseidentifier();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseend_group();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c112(s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseid_optgroup() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseidentifier();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_optgroup();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c112(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsekey_group() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsekey();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c113(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsekey_optgroup() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsekey();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_optgroup();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c113(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsekeyval_optgroup() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$currPos;
	          s5 = peg$parseskip_space();
	          if (s5 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 44) {
	              s6 = peg$c114;
	              peg$currPos++;
	            } else {
	              s6 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c115); }
	            }
	            if (s6 !== peg$FAILED) {
	              peg$savedPos = s4;
	              s5 = peg$c116();
	              s4 = s5;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 === peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$parseskip_space();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsekey_val();
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s4;
	                s5 = peg$c117(s6);
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          }
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$currPos;
	            s5 = peg$parseskip_space();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s6 = peg$c114;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c115); }
	              }
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s4;
	                s5 = peg$c116();
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = peg$currPos;
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsekey_val();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s4;
	                  s5 = peg$c117(s6);
	                  s4 = s5;
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_optgroup();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c118(s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecsv_group() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = peg$parseskip_space();
	            if (s6 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s7 = peg$c114;
	                peg$currPos++;
	              } else {
	                s7 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c115); }
	              }
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c116();
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            if (s5 === peg$FAILED) {
	              s5 = peg$currPos;
	              s6 = peg$parseskip_space();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parsekey();
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s5;
	                  s6 = peg$c119(s7);
	                  s5 = s6;
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$currPos;
	              s6 = peg$parseskip_space();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 44) {
	                  s7 = peg$c114;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
	                }
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s5;
	                  s6 = peg$c116();
	                  s5 = s6;
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = peg$currPos;
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parsekey();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s5;
	                    s6 = peg$c119(s7);
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c120(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parselength_unit() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 2) === peg$c121) {
	          s2 = peg$c121;
	          peg$currPos += 2;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c122); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c123) {
	            s2 = peg$c123;
	            peg$currPos += 2;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c124); }
	          }
	          if (s2 === peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c125) {
	              s2 = peg$c125;
	              peg$currPos += 2;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c126); }
	            }
	            if (s2 === peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c127) {
	                s2 = peg$c127;
	                peg$currPos += 2;
	              } else {
	                s2 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c128); }
	              }
	              if (s2 === peg$FAILED) {
	                if (input.substr(peg$currPos, 2) === peg$c129) {
	                  s2 = peg$c129;
	                  peg$currPos += 2;
	                } else {
	                  s2 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c130); }
	                }
	                if (s2 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 2) === peg$c131) {
	                    s2 = peg$c131;
	                    peg$currPos += 2;
	                  } else {
	                    s2 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
	                  }
	                  if (s2 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 2) === peg$c133) {
	                      s2 = peg$c133;
	                      peg$currPos += 2;
	                    } else {
	                      s2 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c134); }
	                    }
	                    if (s2 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 2) === peg$c135) {
	                        s2 = peg$c135;
	                        peg$currPos += 2;
	                      } else {
	                        s2 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c136); }
	                      }
	                      if (s2 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 2) === peg$c137) {
	                          s2 = peg$c137;
	                          peg$currPos += 2;
	                        } else {
	                          s2 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c138); }
	                        }
	                        if (s2 === peg$FAILED) {
	                          if (input.substr(peg$currPos, 2) === peg$c139) {
	                            s2 = peg$c139;
	                            peg$currPos += 2;
	                          } else {
	                            s2 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
	                          }
	                          if (s2 === peg$FAILED) {
	                            if (input.substr(peg$currPos, 2) === peg$c141) {
	                              s2 = peg$c141;
	                              peg$currPos += 2;
	                            } else {
	                              s2 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c142); }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parsechar();
	          peg$silentFails--;
	          if (s4 === peg$FAILED) {
	            s3 = void 0;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c143(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parselength() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parsefloat();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parselength_unit();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$parseplus();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsefloat();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parselength_unit();
	              if (s6 !== peg$FAILED) {
	                s4 = [s4, s5, s6];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$parseminus();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsefloat();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parselength_unit();
	                if (s7 !== peg$FAILED) {
	                  s5 = [s5, s6, s7];
	                  s4 = s5;
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c144(s1, s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parselength_group() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parselength();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_group();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c145(s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parselength_optgroup() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parselength();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_optgroup();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c145(s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseexpr_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenum_expr();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c146(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseexpr_optgroup() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenum_expr();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_optgroup();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c146(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecoordinate() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parselength();
	        if (s2 === peg$FAILED) {
	          s2 = peg$currPos;
	          s3 = peg$parsefloat();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s2;
	            s3 = peg$c148(s3);
	          }
	          s2 = s3;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c149(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsevector() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 40) {
	          s2 = peg$c150;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c151); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecoordinate();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 44) {
	              s4 = peg$c114;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c115); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsecoordinate();
	              if (s5 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 41) {
	                  s6 = peg$c152;
	                  peg$currPos++;
	                } else {
	                  s6 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseskip_space();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c154(s3, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecoord_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecoordinate();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c149(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecoord_optgroup() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecoordinate();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_optgroup();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c149(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseurl_pct_encoded() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 37) {
	          s4 = peg$c155;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c156); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehex();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parsehex();
	            if (s6 !== peg$FAILED) {
	              s4 = [s4, s5, s6];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          s2 = input.substring(s2, peg$currPos);
	        } else {
	          s2 = s3;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c157(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseurl_char() {
	      var s0;

	      s0 = peg$parsechar();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsedigit();
	        if (s0 === peg$FAILED) {
	          if (peg$c158.test(input.charAt(peg$currPos))) {
	            s0 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c159); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 39) {
	              s0 = peg$c160;
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c161); }
	            }
	            if (s0 === peg$FAILED) {
	              s0 = peg$parseurl_pct_encoded();
	              if (s0 === peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s0 = peg$c162();
	                if (s0) {
	                  s0 = void 0;
	                } else {
	                  s0 = peg$FAILED;
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseurl_group() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$currPos;
	            s8 = peg$parseskip_space();
	            if (s8 !== peg$FAILED) {
	              s9 = peg$parseend_group();
	              if (s9 !== peg$FAILED) {
	                s8 = [s8, s9];
	                s7 = s8;
	              } else {
	                peg$currPos = s7;
	                s7 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s7;
	              s7 = peg$FAILED;
	            }
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseurl_char();
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c163(s7);
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            if (s5 !== peg$FAILED) {
	              while (s5 !== peg$FAILED) {
	                s4.push(s5);
	                s5 = peg$currPos;
	                s6 = peg$currPos;
	                peg$silentFails++;
	                s7 = peg$currPos;
	                s8 = peg$parseskip_space();
	                if (s8 !== peg$FAILED) {
	                  s9 = peg$parseend_group();
	                  if (s9 !== peg$FAILED) {
	                    s8 = [s8, s9];
	                    s7 = s8;
	                  } else {
	                    peg$currPos = s7;
	                    s7 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s7;
	                  s7 = peg$FAILED;
	                }
	                peg$silentFails--;
	                if (s7 === peg$FAILED) {
	                  s6 = void 0;
	                } else {
	                  peg$currPos = s6;
	                  s6 = peg$FAILED;
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseurl_char();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s5;
	                    s6 = peg$c163(s7);
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              }
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c164(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsearg_group() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c165();
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespace();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseparagraph_with_linebreak();
	              while (s6 !== peg$FAILED) {
	                s5.push(s6);
	                s6 = peg$parseparagraph_with_linebreak();
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c166(s4, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsehorizontal() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parseline();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parseline();
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c167(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsearg_hgroup() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c165();
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespace();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsehorizontal();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_group();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c168(s4, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseopt_group() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c165();
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$parseparagraph_with_linebreak();
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$parseparagraph_with_linebreak();
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_optgroup();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = peg$currPos;
	                s6 = peg$c169();
	                if (s6) {
	                  s6 = void 0;
	                } else {
	                  s6 = peg$FAILED;
	                }
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c170(s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsevalue() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 5) === peg$c171) {
	          s2 = peg$c171;
	          peg$currPos += 5;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c172); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseid_group();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c149(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsereal() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c173) {
	          s2 = peg$c173;
	          peg$currPos += 4;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c174); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebegin_group();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseskip_space();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsefloat();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseskip_space();
	                  if (s7 !== peg$FAILED) {
	                    s8 = peg$parseend_group();
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c175(s6);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsenum_value() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 40) {
	        s1 = peg$c150;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c151); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsenum_expr();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 41) {
	            s3 = peg$c152;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c153); }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c176(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseinteger();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsereal();
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            s1 = peg$parsevalue();
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c177(s1);
	            }
	            s0 = s1;
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsenum_factor() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 43) {
	        s1 = peg$c178;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c179); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 45) {
	          s1 = peg$c180;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c181); }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_space();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenum_factor();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c182(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsenum_value();
	      }

	      return s0;
	    }

	    function peg$parsenum_term() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parsenum_factor();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$parseskip_space();
	        if (s4 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 42) {
	            s5 = peg$c109;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c110); }
	          }
	          if (s5 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 47) {
	              s5 = peg$c183;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c184); }
	            }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseskip_space();
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parsenum_factor();
	              if (s7 !== peg$FAILED) {
	                s4 = [s4, s5, s6, s7];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$parseskip_space();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 42) {
	              s5 = peg$c109;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c110); }
	            }
	            if (s5 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 47) {
	                s5 = peg$c183;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c184); }
	              }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parseskip_space();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parsenum_factor();
	                if (s7 !== peg$FAILED) {
	                  s4 = [s4, s5, s6, s7];
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c185(s1, s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsenum_expr() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsenum_term();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$currPos;
	          s5 = peg$parseskip_space();
	          if (s5 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 43) {
	              s6 = peg$c178;
	              peg$currPos++;
	            } else {
	              s6 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c179); }
	            }
	            if (s6 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 45) {
	                s6 = peg$c180;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c181); }
	              }
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseskip_space();
	              if (s7 !== peg$FAILED) {
	                s8 = peg$parsenum_term();
	                if (s8 !== peg$FAILED) {
	                  s5 = [s5, s6, s7, s8];
	                  s4 = s5;
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$currPos;
	            s5 = peg$parseskip_space();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 43) {
	                s6 = peg$c178;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c179); }
	              }
	              if (s6 === peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 45) {
	                  s6 = peg$c180;
	                  peg$currPos++;
	                } else {
	                  s6 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c181); }
	                }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseskip_space();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parsenum_term();
	                  if (s8 !== peg$FAILED) {
	                    s5 = [s5, s6, s7, s8];
	                    s4 = s5;
	                  } else {
	                    peg$currPos = s4;
	                    s4 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c186(s2, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecolor();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c149(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_modellist_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsemodel_list();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c187(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_modellist_optgroup() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_optgroup();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsemodel_list();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_optgroup();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c187(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_setspec_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecolor_set_spec();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c188(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_speclist_group() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecolor_spec_list();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c189(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parsec_ext_expr();
	      if (s1 === peg$FAILED) {
	        s1 = peg$parsec_expr();
	        if (s1 === peg$FAILED) {
	          s1 = peg$parsec_name();
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parsefunc_expr();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parsefunc_expr();
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsec_ext_expr() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

	      s0 = peg$currPos;
	      s1 = peg$parsecore_model();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s3 = peg$c114;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c115); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseint();
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 58) {
	            s3 = peg$c190;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c191); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsec_expr();
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s5 = peg$c114;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c115); }
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsefloat();
	                if (s6 !== peg$FAILED) {
	                  s7 = [];
	                  s8 = peg$currPos;
	                  if (input.charCodeAt(peg$currPos) === 59) {
	                    s9 = peg$c192;
	                    peg$currPos++;
	                  } else {
	                    s9 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c193); }
	                  }
	                  if (s9 !== peg$FAILED) {
	                    s10 = peg$parsec_expr();
	                    if (s10 !== peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 44) {
	                        s11 = peg$c114;
	                        peg$currPos++;
	                      } else {
	                        s11 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c115); }
	                      }
	                      if (s11 !== peg$FAILED) {
	                        s12 = peg$parsefloat();
	                        if (s12 !== peg$FAILED) {
	                          s9 = [s9, s10, s11, s12];
	                          s8 = s9;
	                        } else {
	                          peg$currPos = s8;
	                          s8 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s8;
	                        s8 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s8;
	                      s8 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s8;
	                    s8 = peg$FAILED;
	                  }
	                  while (s8 !== peg$FAILED) {
	                    s7.push(s8);
	                    s8 = peg$currPos;
	                    if (input.charCodeAt(peg$currPos) === 59) {
	                      s9 = peg$c192;
	                      peg$currPos++;
	                    } else {
	                      s9 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c193); }
	                    }
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parsec_expr();
	                      if (s10 !== peg$FAILED) {
	                        if (input.charCodeAt(peg$currPos) === 44) {
	                          s11 = peg$c114;
	                          peg$currPos++;
	                        } else {
	                          s11 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c115); }
	                        }
	                        if (s11 !== peg$FAILED) {
	                          s12 = peg$parsefloat();
	                          if (s12 !== peg$FAILED) {
	                            s9 = [s9, s10, s11, s12];
	                            s8 = s9;
	                          } else {
	                            peg$currPos = s8;
	                            s8 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s8;
	                          s8 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s8;
	                        s8 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s8;
	                      s8 = peg$FAILED;
	                    }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    s1 = [s1, s2, s3, s4, s5, s6, s7];
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsec_expr() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parsec_prefix();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsec_name();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsec_mix_expr();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsec_postfix();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsec_mix_expr() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 33) {
	        s1 = peg$c194;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c195); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsefloat();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 33) {
	            s5 = peg$c194;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c195); }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parsec_name();
	            if (s6 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 33) {
	                s7 = peg$c194;
	                peg$currPos++;
	              } else {
	                s7 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c195); }
	              }
	              if (s7 !== peg$FAILED) {
	                s8 = peg$parsefloat();
	                if (s8 !== peg$FAILED) {
	                  s5 = [s5, s6, s7, s8];
	                  s4 = s5;
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 33) {
	              s5 = peg$c194;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c195); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsec_name();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 33) {
	                  s7 = peg$c194;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c195); }
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parsefloat();
	                  if (s8 !== peg$FAILED) {
	                    s5 = [s5, s6, s7, s8];
	                    s4 = s5;
	                  } else {
	                    peg$currPos = s4;
	                    s4 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 33) {
	              s5 = peg$c194;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c195); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsec_name();
	              if (s6 !== peg$FAILED) {
	                s5 = [s5, s6];
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsefunc_expr() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsefn();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s4 = peg$c114;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c115); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsefloat();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s4 = peg$c114;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c115); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsefloat();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsefn() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 62) {
	        s1 = peg$c196;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c197); }
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 5) === peg$c198) {
	          s2 = peg$c198;
	          peg$currPos += 5;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c199); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.substr(peg$currPos, 6) === peg$c200) {
	            s2 = peg$c200;
	            peg$currPos += 6;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c201); }
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsec_prefix() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      if (input.charCodeAt(peg$currPos) === 45) {
	        s2 = peg$c180;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c181); }
	      }
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (input.charCodeAt(peg$currPos) === 45) {
	          s2 = peg$c180;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c181); }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c202(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsec_name() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 === peg$FAILED) {
	        s2 = peg$parsedigit();
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parsedigit();
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 46) {
	          s1 = peg$c203;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c204); }
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	      }

	      return s0;
	    }

	    function peg$parsec_postfix() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c205) {
	        s1 = peg$c205;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c206); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        if (input.charCodeAt(peg$currPos) === 43) {
	          s3 = peg$c178;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c179); }
	        }
	        if (s3 !== peg$FAILED) {
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            if (input.charCodeAt(peg$currPos) === 43) {
	              s3 = peg$c178;
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c179); }
	            }
	          }
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 === peg$FAILED) {
	          s2 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 91) {
	            s3 = peg$c207;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c208); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseint();
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 93) {
	                s5 = peg$c209;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c210); }
	              }
	              if (s5 !== peg$FAILED) {
	                s3 = [s3, s4, s5];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_model() {
	      var s0;

	      s0 = peg$parsecore_model();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseint_model();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsedec_model();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsepseudo_model();
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsecore_model() {
	      var s0;

	      if (input.substr(peg$currPos, 3) === peg$c211) {
	        s0 = peg$c211;
	        peg$currPos += 3;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c212); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c213) {
	          s0 = peg$c213;
	          peg$currPos += 4;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c214); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c215) {
	            s0 = peg$c215;
	            peg$currPos += 3;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c216); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.substr(peg$currPos, 3) === peg$c217) {
	              s0 = peg$c217;
	              peg$currPos += 3;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c218); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.substr(peg$currPos, 4) === peg$c219) {
	                s0 = peg$c219;
	                peg$currPos += 4;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c220); }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseint_model() {
	      var s0;

	      if (input.substr(peg$currPos, 3) === peg$c221) {
	        s0 = peg$c221;
	        peg$currPos += 3;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c222); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c223) {
	          s0 = peg$c223;
	          peg$currPos += 4;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c224); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c225) {
	            s0 = peg$c225;
	            peg$currPos += 3;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c226); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.substr(peg$currPos, 4) === peg$c227) {
	              s0 = peg$c227;
	              peg$currPos += 4;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c228); }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsedec_model() {
	      var s0;

	      if (input.substr(peg$currPos, 3) === peg$c229) {
	        s0 = peg$c229;
	        peg$currPos += 3;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c230); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c231) {
	          s0 = peg$c231;
	          peg$currPos += 4;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c232); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c233) {
	            s0 = peg$c233;
	            peg$currPos += 4;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c234); }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsepseudo_model() {
	      var s0;

	      if (input.substr(peg$currPos, 5) === peg$c235) {
	        s0 = peg$c235;
	        peg$currPos += 5;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c236); }
	      }

	      return s0;
	    }

	    function peg$parsemodel_list() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      s2 = peg$parsecore_model();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 58) {
	          s3 = peg$c190;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c191); }
	        }
	        if (s3 !== peg$FAILED) {
	          s2 = [s2, s3];
	          s1 = s2;
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsecolor_model();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 47) {
	            s5 = peg$c183;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c184); }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parsecolor_model();
	            if (s6 !== peg$FAILED) {
	              s5 = [s5, s6];
	              s4 = s5;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 47) {
	              s5 = peg$c183;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c184); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsecolor_model();
	              if (s6 !== peg$FAILED) {
	                s5 = [s5, s6];
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c239(s1, s2, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_spec() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsefloat();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$parsesp();
	        if (s4 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s4 = peg$c114;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c115); }
	          }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsefloat();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$parsesp();
	          if (s4 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 44) {
	              s4 = peg$c114;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c115); }
	            }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsefloat();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c240(s1, s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsec_name();
	      }

	      return s0;
	    }

	    function peg$parsecolor_spec_list() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsecolor_spec();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 47) {
	          s4 = peg$c183;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c184); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsecolor_spec();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 47) {
	            s4 = peg$c183;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c184); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsecolor_spec();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c241(s1, s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolor_set_spec() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

	      s0 = peg$currPos;
	      s1 = peg$parsec_name();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s2 = peg$c114;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c115); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsecolor_spec_list();
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 59) {
	              s6 = peg$c192;
	              peg$currPos++;
	            } else {
	              s6 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c193); }
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseskip_space();
	              if (s7 !== peg$FAILED) {
	                s8 = peg$parsec_name();
	                if (s8 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 44) {
	                    s9 = peg$c114;
	                    peg$currPos++;
	                  } else {
	                    s9 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c115); }
	                  }
	                  if (s9 !== peg$FAILED) {
	                    s10 = peg$parsecolor_spec_list();
	                    if (s10 !== peg$FAILED) {
	                      s6 = [s6, s7, s8, s9, s10];
	                      s5 = s6;
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 59) {
	                s6 = peg$c192;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c193); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseskip_space();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parsec_name();
	                  if (s8 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 44) {
	                      s9 = peg$c114;
	                      peg$currPos++;
	                    } else {
	                      s9 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
	                    }
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parsecolor_spec_list();
	                      if (s10 !== peg$FAILED) {
	                        s6 = [s6, s7, s8, s9, s10];
	                        s5 = s6;
	                      } else {
	                        peg$currPos = s5;
	                        s5 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c242(s1, s3, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolumns() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parsebegin_group();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parsecolumn_separator();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parsecolumn_separator();
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$currPos;
	          s5 = peg$parsecolumn();
	          if (s5 !== peg$FAILED) {
	            s6 = [];
	            s7 = peg$parsecolumn_separator();
	            while (s7 !== peg$FAILED) {
	              s6.push(s7);
	              s7 = peg$parsecolumn_separator();
	            }
	            if (s6 !== peg$FAILED) {
	              peg$savedPos = s4;
	              s5 = peg$c243(s2, s5, s6);
	              s4 = s5;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            while (s4 !== peg$FAILED) {
	              s3.push(s4);
	              s4 = peg$currPos;
	              s5 = peg$parsecolumn();
	              if (s5 !== peg$FAILED) {
	                s6 = [];
	                s7 = peg$parsecolumn_separator();
	                while (s7 !== peg$FAILED) {
	                  s6.push(s7);
	                  s7 = peg$parsecolumn_separator();
	                }
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s4;
	                  s5 = peg$c243(s2, s5, s6);
	                  s4 = s5;
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            }
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseend_group();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c244(s2, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsecolumn() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 108) {
	        s1 = peg$c245;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c246); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 99) {
	          s1 = peg$c247;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c248); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 114) {
	            s1 = peg$c249;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c250); }
	          }
	          if (s1 === peg$FAILED) {
	            s1 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 112) {
	              s2 = peg$c251;
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c252); }
	            }
	            if (s2 !== peg$FAILED) {
	              s3 = peg$parselength_group();
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s1;
	                s2 = peg$c145(s3);
	                s1 = s2;
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c253(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 42) {
	          s1 = peg$c109;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c110); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseexpr_group();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parsecolumns();
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c254(s2, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsecolumn_separator() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 124) {
	        s1 = peg$c255;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c256); }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 64) {
	          s2 = peg$c257;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c258); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsearg_group();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s1;
	            s2 = peg$c259(s3);
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c260(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsevspace_hmode() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c261) {
	        s1 = peg$c261;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c262); }
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 42) {
	          s2 = peg$c109;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c110); }
	        }
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parselength_group();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c263(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsevspace_vmode() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c261) {
	        s1 = peg$c261;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c262); }
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 42) {
	          s2 = peg$c109;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c110); }
	        }
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parselength_group();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c264(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsesmbskip_hmode() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c265) {
	        s2 = peg$c265;
	        peg$currPos += 5;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c266); }
	      }
	      if (s2 === peg$FAILED) {
	        if (input.substr(peg$currPos, 3) === peg$c267) {
	          s2 = peg$c267;
	          peg$currPos += 3;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c268); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c269) {
	            s2 = peg$c269;
	            peg$currPos += 3;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c270); }
	          }
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = input.substring(s1, peg$currPos);
	      } else {
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c271) {
	          s2 = peg$c271;
	          peg$currPos += 4;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c272); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parsechar();
	          peg$silentFails--;
	          if (s4 === peg$FAILED) {
	            s3 = void 0;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c273(s1);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsesmbskip_vmode() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c265) {
	        s2 = peg$c265;
	        peg$currPos += 5;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c266); }
	      }
	      if (s2 === peg$FAILED) {
	        if (input.substr(peg$currPos, 3) === peg$c267) {
	          s2 = peg$c267;
	          peg$currPos += 3;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c268); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c269) {
	            s2 = peg$c269;
	            peg$currPos += 3;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c270); }
	          }
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = input.substring(s1, peg$currPos);
	      } else {
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c271) {
	          s2 = peg$c271;
	          peg$currPos += 4;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c272); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$parsechar();
	          peg$silentFails--;
	          if (s4 === peg$FAILED) {
	            s3 = void 0;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c274(s1);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseverb() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 4) === peg$c275) {
	        s1 = peg$c275;
	        peg$currPos += 4;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c276); }
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 42) {
	          s2 = peg$c109;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c110); }
	        }
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            peg$silentFails++;
	            s5 = peg$parsechar();
	            peg$silentFails--;
	            if (s5 === peg$FAILED) {
	              s4 = void 0;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.length > peg$currPos) {
	                s5 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c2); }
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$currPos;
	                s7 = [];
	                s8 = peg$currPos;
	                s9 = peg$currPos;
	                peg$silentFails++;
	                s10 = peg$parsenl();
	                peg$silentFails--;
	                if (s10 === peg$FAILED) {
	                  s9 = void 0;
	                } else {
	                  peg$currPos = s9;
	                  s9 = peg$FAILED;
	                }
	                if (s9 !== peg$FAILED) {
	                  if (input.length > peg$currPos) {
	                    s10 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s10 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                  }
	                  if (s10 !== peg$FAILED) {
	                    peg$savedPos = peg$currPos;
	                    s11 = peg$c277(s2, s5, s10);
	                    if (s11) {
	                      s11 = peg$FAILED;
	                    } else {
	                      s11 = void 0;
	                    }
	                    if (s11 !== peg$FAILED) {
	                      s9 = [s9, s10, s11];
	                      s8 = s9;
	                    } else {
	                      peg$currPos = s8;
	                      s8 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s8;
	                    s8 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s8;
	                  s8 = peg$FAILED;
	                }
	                while (s8 !== peg$FAILED) {
	                  s7.push(s8);
	                  s8 = peg$currPos;
	                  s9 = peg$currPos;
	                  peg$silentFails++;
	                  s10 = peg$parsenl();
	                  peg$silentFails--;
	                  if (s10 === peg$FAILED) {
	                    s9 = void 0;
	                  } else {
	                    peg$currPos = s9;
	                    s9 = peg$FAILED;
	                  }
	                  if (s9 !== peg$FAILED) {
	                    if (input.length > peg$currPos) {
	                      s10 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s10 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                    }
	                    if (s10 !== peg$FAILED) {
	                      peg$savedPos = peg$currPos;
	                      s11 = peg$c277(s2, s5, s10);
	                      if (s11) {
	                        s11 = peg$FAILED;
	                      } else {
	                        s11 = void 0;
	                      }
	                      if (s11 !== peg$FAILED) {
	                        s9 = [s9, s10, s11];
	                        s8 = s9;
	                      } else {
	                        peg$currPos = s8;
	                        s8 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s8;
	                      s8 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s8;
	                    s8 = peg$FAILED;
	                  }
	                }
	                if (s7 !== peg$FAILED) {
	                  s6 = input.substring(s6, peg$currPos);
	                } else {
	                  s6 = s7;
	                }
	                if (s6 !== peg$FAILED) {
	                  if (input.length > peg$currPos) {
	                    s7 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c278(s2, s5, s6, s7);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsebegin_env() {
	      var s0, s1, s2, s3, s4, s5;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parsebegin();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsebegin_group();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$parseidentifier();
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s3;
	            s4 = peg$c280(s4);
	          }
	          s3 = s4;
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsenextArgStar();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_group();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c281(s3, s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c279); }
	      }

	      return s0;
	    }

	    function peg$parseend_env() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseskip_all_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseescape();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseend();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsebegin_group();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseidentifier();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 42) {
	                    s7 = peg$c109;
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
	                  }
	                  if (s7 === peg$FAILED) {
	                    s7 = null;
	                  }
	                  if (s7 !== peg$FAILED) {
	                    s8 = peg$parseend_group();
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c283(s5, s7);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c282); }
	      }

	      return s0;
	    }

	    function peg$parseh_environment() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$parsebegin_env();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsemacro_args();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          if (input.length > peg$currPos) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c2); }
	          }
	          peg$silentFails--;
	          if (s5 !== peg$FAILED) {
	            peg$currPos = s4;
	            s4 = void 0;
	          } else {
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s3;
	            s4 = peg$c284(s1);
	          }
	          s3 = s4;
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$parsespace();
	            if (s5 === peg$FAILED) {
	              s5 = null;
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s4;
	              s5 = peg$c285(s1, s3, s5);
	            }
	            s4 = s5;
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseparagraph_with_linebreak();
	              while (s6 !== peg$FAILED) {
	                s5.push(s6);
	                s6 = peg$parseparagraph_with_linebreak();
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_env();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$currPos;
	                  s8 = peg$parsespace();
	                  if (s8 === peg$FAILED) {
	                    s8 = null;
	                  }
	                  if (s8 !== peg$FAILED) {
	                    peg$savedPos = s7;
	                    s8 = peg$c286(s1, s3, s4, s5, s6, s8);
	                  }
	                  s7 = s8;
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c287(s1, s3, s4, s5, s6, s7);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseenvironment() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      s1 = peg$parsebegin_env();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = peg$currPos;
	        s2 = peg$c288();
	        if (s2) {
	          s2 = peg$FAILED;
	        } else {
	          s2 = void 0;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsemacro_args();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$currPos;
	            peg$silentFails++;
	            if (input.length > peg$currPos) {
	              s6 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s6 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c2); }
	            }
	            peg$silentFails--;
	            if (s6 !== peg$FAILED) {
	              peg$currPos = s5;
	              s5 = void 0;
	            } else {
	              s5 = peg$FAILED;
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s4;
	              s5 = peg$c284(s1);
	            }
	            s4 = s5;
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseparagraph();
	              while (s6 !== peg$FAILED) {
	                s5.push(s6);
	                s6 = peg$parseparagraph();
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseend_env();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c289(s1, s4, s5, s6);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseitem() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_all_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseescape();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c290) {
	            s3 = peg$c290;
	            peg$currPos += 4;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c291); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            peg$silentFails++;
	            s5 = peg$parsechar();
	            peg$silentFails--;
	            if (s5 === peg$FAILED) {
	              s4 = void 0;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = peg$currPos;
	              s5 = peg$c292();
	              if (s5) {
	                s5 = peg$FAILED;
	              } else {
	                s5 = void 0;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseopt_group();
	                if (s6 === peg$FAILED) {
	                  s6 = null;
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseskip_all_space();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c293(s6);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseitems() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = [];
	      s1 = peg$currPos;
	      s2 = [];
	      s3 = peg$currPos;
	      s4 = peg$parseskip_all_space();
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parsehv_macro();
	        if (s5 !== peg$FAILED) {
	          s4 = [s4, s5];
	          s3 = s4;
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        s4 = peg$parseskip_all_space();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehv_macro();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseitem();
	        if (s3 !== peg$FAILED) {
	          s4 = [];
	          s5 = peg$currPos;
	          s6 = peg$currPos;
	          peg$silentFails++;
	          s7 = peg$parseitem();
	          if (s7 === peg$FAILED) {
	            s7 = peg$parseend_env();
	          }
	          peg$silentFails--;
	          if (s7 === peg$FAILED) {
	            s6 = void 0;
	          } else {
	            peg$currPos = s6;
	            s6 = peg$FAILED;
	          }
	          if (s6 !== peg$FAILED) {
	            s7 = peg$parseparagraph();
	            if (s7 !== peg$FAILED) {
	              peg$savedPos = s5;
	              s6 = peg$c294(s3, s7);
	              s5 = s6;
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s5;
	            s5 = peg$FAILED;
	          }
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseitem();
	            if (s7 === peg$FAILED) {
	              s7 = peg$parseend_env();
	            }
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseparagraph();
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c294(s3, s7);
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s1;
	            s2 = peg$c295(s3, s4);
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        s1 = peg$currPos;
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$parseskip_all_space();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehv_macro();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$parseskip_all_space();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsehv_macro();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseitem();
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseitem();
	            if (s7 === peg$FAILED) {
	              s7 = peg$parseend_env();
	            }
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseparagraph();
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c294(s3, s7);
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$currPos;
	              s6 = peg$currPos;
	              peg$silentFails++;
	              s7 = peg$parseitem();
	              if (s7 === peg$FAILED) {
	                s7 = peg$parseend_env();
	              }
	              peg$silentFails--;
	              if (s7 === peg$FAILED) {
	                s6 = void 0;
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseparagraph();
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s5;
	                  s6 = peg$c294(s3, s7);
	                  s5 = s6;
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s1;
	              s2 = peg$c295(s3, s4);
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parseenumitems() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = [];
	      s1 = peg$currPos;
	      s2 = [];
	      s3 = peg$currPos;
	      s4 = peg$parseskip_all_space();
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parsehv_macro();
	        if (s5 !== peg$FAILED) {
	          s4 = [s4, s5];
	          s3 = s4;
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        s4 = peg$parseskip_all_space();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehv_macro();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$currPos;
	        s4 = peg$parseitem();
	        if (s4 !== peg$FAILED) {
	          peg$savedPos = s3;
	          s4 = peg$c296(s4);
	        }
	        s3 = s4;
	        if (s3 !== peg$FAILED) {
	          s4 = [];
	          s5 = peg$currPos;
	          s6 = peg$currPos;
	          peg$silentFails++;
	          s7 = peg$parseitem();
	          if (s7 === peg$FAILED) {
	            s7 = peg$parseend_env();
	          }
	          peg$silentFails--;
	          if (s7 === peg$FAILED) {
	            s6 = void 0;
	          } else {
	            peg$currPos = s6;
	            s6 = peg$FAILED;
	          }
	          if (s6 !== peg$FAILED) {
	            s7 = peg$parseparagraph();
	            if (s7 !== peg$FAILED) {
	              peg$savedPos = s5;
	              s6 = peg$c294(s3, s7);
	              s5 = s6;
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s5;
	            s5 = peg$FAILED;
	          }
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseitem();
	            if (s7 === peg$FAILED) {
	              s7 = peg$parseend_env();
	            }
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseparagraph();
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c294(s3, s7);
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s1;
	            s2 = peg$c295(s3, s4);
	            s1 = s2;
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        s1 = peg$currPos;
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$parseskip_all_space();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehv_macro();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$parseskip_all_space();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsehv_macro();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$parseitem();
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s3;
	            s4 = peg$c296(s4);
	          }
	          s3 = s4;
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseitem();
	            if (s7 === peg$FAILED) {
	              s7 = peg$parseend_env();
	            }
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseparagraph();
	              if (s7 !== peg$FAILED) {
	                peg$savedPos = s5;
	                s6 = peg$c294(s3, s7);
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$currPos;
	              s6 = peg$currPos;
	              peg$silentFails++;
	              s7 = peg$parseitem();
	              if (s7 === peg$FAILED) {
	                s7 = peg$parseend_env();
	              }
	              peg$silentFails--;
	              if (s7 === peg$FAILED) {
	                s6 = void 0;
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseparagraph();
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s5;
	                  s6 = peg$c294(s3, s7);
	                  s5 = s6;
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s1;
	              s2 = peg$c295(s3, s4);
	              s1 = s2;
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsecomment_env() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c298) {
	        s1 = peg$c298;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c299); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_space();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 9) === peg$c300) {
	            s3 = peg$c300;
	            peg$currPos += 9;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c301); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parseend_comment();
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              if (input.length > peg$currPos) {
	                s7 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s7 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c2); }
	              }
	              if (s7 !== peg$FAILED) {
	                s6 = [s6, s7];
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$currPos;
	              s6 = peg$currPos;
	              peg$silentFails++;
	              s7 = peg$parseend_comment();
	              peg$silentFails--;
	              if (s7 === peg$FAILED) {
	                s6 = void 0;
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	              if (s6 !== peg$FAILED) {
	                if (input.length > peg$currPos) {
	                  s7 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                }
	                if (s7 !== peg$FAILED) {
	                  s6 = [s6, s7];
	                  s5 = s6;
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseend_comment();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c302();
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c297); }
	      }

	      return s0;
	    }

	    function peg$parseend_comment() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 4) === peg$c303) {
	        s1 = peg$c303;
	        peg$currPos += 4;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c304); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseskip_space();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 9) === peg$c300) {
	            s3 = peg$c300;
	            peg$currPos += 9;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c301); }
	          }
	          if (s3 !== peg$FAILED) {
	            s1 = [s1, s2, s3];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsemath() {
	      var s0;

	      s0 = peg$parseinline_math();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsedisplay_math();
	      }

	      return s0;
	    }

	    function peg$parseinline_math() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsemath_shift();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = [];
	        s4 = peg$parsemath_primitive();
	        if (s4 !== peg$FAILED) {
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$parsemath_primitive();
	          }
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          s2 = input.substring(s2, peg$currPos);
	        } else {
	          s2 = s3;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsemath_shift();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c305(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseescape();
	        if (s1 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 40) {
	            s2 = peg$c150;
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c151); }
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            s4 = [];
	            s5 = peg$parsemath_primitive();
	            if (s5 !== peg$FAILED) {
	              while (s5 !== peg$FAILED) {
	                s4.push(s5);
	                s5 = peg$parsemath_primitive();
	              }
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s3 = input.substring(s3, peg$currPos);
	            } else {
	              s3 = s4;
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parseescape();
	              if (s4 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 41) {
	                  s5 = peg$c152;
	                  peg$currPos++;
	                } else {
	                  s5 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
	                }
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c305(s3);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsedisplay_math() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsemath_shift();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsemath_shift();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = [];
	          s5 = peg$parsemath_primitive();
	          if (s5 !== peg$FAILED) {
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              s5 = peg$parsemath_primitive();
	            }
	          } else {
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = input.substring(s3, peg$currPos);
	          } else {
	            s3 = s4;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsemath_shift();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsemath_shift();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c306(s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseescape();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseleft_br();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$currPos;
	            s4 = [];
	            s5 = peg$parsemath_primitive();
	            if (s5 !== peg$FAILED) {
	              while (s5 !== peg$FAILED) {
	                s4.push(s5);
	                s5 = peg$parsemath_primitive();
	              }
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s3 = input.substring(s3, peg$currPos);
	            } else {
	              s3 = s4;
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parseescape();
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parseright_br();
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c306(s3);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }

	    function peg$parsemath_primitive() {
	      var s0, s1, s2, s3;

	      s0 = peg$parseprimitive();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsealignment_tab();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsesuperscript();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsesubscript();
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parseescape();
	              if (s1 !== peg$FAILED) {
	                s2 = peg$parseidentifier();
	                if (s2 !== peg$FAILED) {
	                  s1 = [s1, s2];
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parsebegin_group();
	                if (s1 !== peg$FAILED) {
	                  s2 = peg$parseskip_space();
	                  if (s2 !== peg$FAILED) {
	                    s3 = peg$parseend_group();
	                    if (s3 !== peg$FAILED) {
	                      s1 = [s1, s2, s3];
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  s1 = peg$parsebegin_group();
	                  if (s1 !== peg$FAILED) {
	                    s2 = [];
	                    s3 = peg$parsemath_primitive();
	                    if (s3 !== peg$FAILED) {
	                      while (s3 !== peg$FAILED) {
	                        s2.push(s3);
	                        s3 = peg$parsemath_primitive();
	                      }
	                    } else {
	                      s2 = peg$FAILED;
	                    }
	                    if (s2 !== peg$FAILED) {
	                      s3 = peg$parseend_group();
	                      if (s3 !== peg$FAILED) {
	                        s1 = [s1, s2, s3];
	                        s0 = s1;
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$parsesp();
	                    if (s0 === peg$FAILED) {
	                      s0 = peg$parsenl();
	                      if (s0 === peg$FAILED) {
	                        s0 = peg$parselinebreak();
	                        if (s0 === peg$FAILED) {
	                          s0 = peg$parsecomment();
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsebegin() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c307) {
	        s1 = peg$c307;
	        peg$currPos += 5;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c308); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c309();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseend() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c310) {
	        s1 = peg$c310;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c311); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c309();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsepar() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c312) {
	        s1 = peg$c312;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c313); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c309();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsenoindent() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 8) === peg$c314) {
	        s1 = peg$c314;
	        peg$currPos += 8;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c315); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c309();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseplus() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 4) === peg$c316) {
	        s1 = peg$c316;
	        peg$currPos += 4;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c317); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c309();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseminus() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c318) {
	        s1 = peg$c318;
	        peg$currPos += 5;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c319); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c309();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseendinput() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 8) === peg$c320) {
	        s1 = peg$c320;
	        peg$currPos += 8;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c321); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c2); }
	            }
	            while (s5 !== peg$FAILED) {
	              s4.push(s5);
	              if (input.length > peg$currPos) {
	                s5 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c2); }
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseescape() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 92) {
	        s1 = peg$c322;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c323); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsebegin_group() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c324;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c325); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseend_group() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 125) {
	        s1 = peg$c326;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c327); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsemath_shift() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 36) {
	        s1 = peg$c329;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c330); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c328); }
	      }

	      return s0;
	    }

	    function peg$parsealignment_tab() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 38) {
	        s1 = peg$c331;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c332); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsemacro_parameter() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 35) {
	        s1 = peg$c334;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c335); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c333); }
	      }

	      return s0;
	    }

	    function peg$parsesuperscript() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 94) {
	        s1 = peg$c336;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c337); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsesubscript() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 95) {
	        s1 = peg$c338;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c339); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseignore() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 0) {
	        s1 = peg$c340;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c341); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseEOF() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      peg$silentFails++;
	      if (input.length > peg$currPos) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c2); }
	      }
	      peg$silentFails--;
	      if (s1 === peg$FAILED) {
	        s0 = void 0;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseescape();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseendinput();
	          if (s2 !== peg$FAILED) {
	            s1 = [s1, s2];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c342); }
	      }

	      return s0;
	    }

	    function peg$parsenl() {
	      var s0, s1;

	      peg$silentFails++;
	      if (input.charCodeAt(peg$currPos) === 10) {
	        s0 = peg$c344;
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c345); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 2) === peg$c346) {
	          s0 = peg$c346;
	          peg$currPos += 2;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c347); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 13) {
	            s0 = peg$c348;
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c349); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 8232) {
	              s0 = peg$c350;
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c351); }
	            }
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 8233) {
	                s1 = peg$c352;
	                peg$currPos++;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c353); }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c11();
	              }
	              s0 = s1;
	            }
	          }
	        }
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c343); }
	      }

	      return s0;
	    }

	    function peg$parsesp() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (peg$c355.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c356); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c354); }
	      }

	      return s0;
	    }

	    function peg$parsecomment() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 37) {
	        s1 = peg$c155;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c156); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$currPos;
	        peg$silentFails++;
	        s5 = peg$parsenl();
	        peg$silentFails--;
	        if (s5 === peg$FAILED) {
	          s4 = void 0;
	        } else {
	          peg$currPos = s4;
	          s4 = peg$FAILED;
	        }
	        if (s4 !== peg$FAILED) {
	          if (input.length > peg$currPos) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c2); }
	          }
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          s5 = peg$parsenl();
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = void 0;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c2); }
	            }
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$parsenl();
	          if (s4 !== peg$FAILED) {
	            s5 = [];
	            s6 = peg$parsesp();
	            while (s6 !== peg$FAILED) {
	              s5.push(s6);
	              s6 = peg$parsesp();
	            }
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = peg$parseEOF();
	          }
	          if (s3 !== peg$FAILED) {
	            s1 = [s1, s2, s3];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsecomment_env();
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c11();
	        }
	        s0 = s1;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c357); }
	      }

	      return s0;
	    }

	    function peg$parseskip_space() {
	      var s0, s1, s2, s3, s4;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$currPos;
	      peg$silentFails++;
	      s4 = peg$parsebreak();
	      peg$silentFails--;
	      if (s4 === peg$FAILED) {
	        s3 = void 0;
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsenl();
	        if (s4 === peg$FAILED) {
	          s4 = peg$parsesp();
	          if (s4 === peg$FAILED) {
	            s4 = peg$parsecomment();
	          }
	        }
	        if (s4 !== peg$FAILED) {
	          s3 = [s3, s4];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        peg$silentFails++;
	        s4 = peg$parsebreak();
	        peg$silentFails--;
	        if (s4 === peg$FAILED) {
	          s3 = void 0;
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parsenl();
	          if (s4 === peg$FAILED) {
	            s4 = peg$parsesp();
	            if (s4 === peg$FAILED) {
	              s4 = peg$parsecomment();
	            }
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c358); }
	      }

	      return s0;
	    }

	    function peg$parseskip_all_space() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsenl();
	      if (s2 === peg$FAILED) {
	        s2 = peg$parsesp();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parsecomment();
	        }
	      }
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsenl();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parsesp();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parsecomment();
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c358); }
	      }

	      return s0;
	    }

	    function peg$parsespace() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      peg$silentFails++;
	      s2 = peg$parsebreak();
	      peg$silentFails--;
	      if (s2 === peg$FAILED) {
	        s1 = void 0;
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parselinebreak();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          peg$silentFails++;
	          s4 = peg$currPos;
	          s5 = peg$parseskip_all_space();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseescape();
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseis_vmode();
	              if (s7 === peg$FAILED) {
	                s7 = peg$parseis_vmode_env();
	              }
	              if (s7 !== peg$FAILED) {
	                s5 = [s5, s6, s7];
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          peg$silentFails--;
	          if (s4 === peg$FAILED) {
	            s3 = void 0;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$parsesp();
	            if (s5 === peg$FAILED) {
	              s5 = peg$parsenl();
	            }
	            if (s5 !== peg$FAILED) {
	              while (s5 !== peg$FAILED) {
	                s4.push(s5);
	                s5 = peg$parsesp();
	                if (s5 === peg$FAILED) {
	                  s5 = peg$parsenl();
	                }
	              }
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c359();
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c358); }
	      }

	      return s0;
	    }

	    function peg$parsectrl_space() {
	      var s0, s1, s2, s3, s4, s5;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        peg$silentFails++;
	        s4 = peg$parsenl();
	        peg$silentFails--;
	        if (s4 !== peg$FAILED) {
	          peg$currPos = s3;
	          s3 = void 0;
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$currPos;
	          peg$silentFails++;
	          s5 = peg$parsebreak();
	          peg$silentFails--;
	          if (s5 !== peg$FAILED) {
	            peg$currPos = s4;
	            s4 = void 0;
	          } else {
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 === peg$FAILED) {
	          s2 = peg$parsenl();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parsesp();
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c359();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c360); }
	      }

	      return s0;
	    }

	    function peg$parsenbsp() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 126) {
	        s1 = peg$c362;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c363); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c364();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c361); }
	      }

	      return s0;
	    }

	    function peg$parsebreak() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$parseskip_all_space();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parseescape();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsepar();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseskip_all_space();
	            if (s6 !== peg$FAILED) {
	              s3 = [s3, s4, s5, s6];
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$parseskip_all_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseescape();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepar();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_all_space();
	                if (s6 !== peg$FAILED) {
	                  s3 = [s3, s4, s5, s6];
	                  s2 = s3;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$currPos;
	        s2 = [];
	        s3 = peg$parsesp();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parsesp();
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$parsenl();
	          if (s4 !== peg$FAILED) {
	            s5 = [];
	            s6 = peg$parsecomment();
	            while (s6 !== peg$FAILED) {
	              s5.push(s6);
	              s6 = peg$parsecomment();
	            }
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = [];
	            s4 = peg$parsecomment();
	            if (s4 !== peg$FAILED) {
	              while (s4 !== peg$FAILED) {
	                s3.push(s4);
	                s4 = peg$parsecomment();
	              }
	            } else {
	              s3 = peg$FAILED;
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = [];
	            s5 = peg$currPos;
	            s6 = [];
	            s7 = peg$parsesp();
	            while (s7 !== peg$FAILED) {
	              s6.push(s7);
	              s7 = peg$parsesp();
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parsenl();
	              if (s7 !== peg$FAILED) {
	                s6 = [s6, s7];
	                s5 = s6;
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s5;
	              s5 = peg$FAILED;
	            }
	            if (s5 !== peg$FAILED) {
	              while (s5 !== peg$FAILED) {
	                s4.push(s5);
	                s5 = peg$currPos;
	                s6 = [];
	                s7 = peg$parsesp();
	                while (s7 !== peg$FAILED) {
	                  s6.push(s7);
	                  s7 = peg$parsesp();
	                }
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parsenl();
	                  if (s7 !== peg$FAILED) {
	                    s6 = [s6, s7];
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              }
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = peg$currPos;
	              peg$silentFails++;
	              s5 = peg$parseend_doc();
	              peg$silentFails--;
	              if (s5 !== peg$FAILED) {
	                peg$currPos = s4;
	                s4 = void 0;
	              } else {
	                s4 = peg$FAILED;
	              }
	              if (s4 === peg$FAILED) {
	                s4 = peg$parseEOF();
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parsesp();
	              if (s6 === peg$FAILED) {
	                s6 = peg$parsenl();
	                if (s6 === peg$FAILED) {
	                  s6 = peg$parsecomment();
	                }
	              }
	              while (s6 !== peg$FAILED) {
	                s5.push(s6);
	                s6 = peg$parsesp();
	                if (s6 === peg$FAILED) {
	                  s6 = peg$parsenl();
	                  if (s6 === peg$FAILED) {
	                    s6 = peg$parsecomment();
	                  }
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                s2 = [s2, s3, s4, s5];
	                s1 = s2;
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c366();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c365); }
	      }

	      return s0;
	    }

	    function peg$parselinebreak() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseescape();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 92) {
	            s3 = peg$c322;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c323); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 42) {
	                s5 = peg$c109;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c110); }
	              }
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$currPos;
	                  s8 = peg$parsebegin_optgroup();
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parseskip_space();
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parselength();
	                      if (s10 !== peg$FAILED) {
	                        s11 = peg$parseend_optgroup();
	                        if (s11 !== peg$FAILED) {
	                          s12 = peg$parseskip_space();
	                          if (s12 !== peg$FAILED) {
	                            peg$savedPos = s7;
	                            s8 = peg$c368(s10);
	                            s7 = s8;
	                          } else {
	                            peg$currPos = s7;
	                            s7 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s7;
	                          s7 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s7;
	                        s7 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s7;
	                      s7 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s7;
	                    s7 = peg$FAILED;
	                  }
	                  if (s7 === peg$FAILED) {
	                    s7 = null;
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c369(s7);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c367); }
	      }

	      return s0;
	    }

	    function peg$parseunskip_macro() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parseskip_space();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseescape();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c370) {
	            s3 = peg$c370;
	            peg$currPos += 3;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c371); }
	          }
	          if (s3 === peg$FAILED) {
	            if (input.substr(peg$currPos, 7) === peg$c372) {
	              s3 = peg$c372;
	              peg$currPos += 7;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c373); }
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            peg$silentFails++;
	            s5 = peg$parsechar();
	            peg$silentFails--;
	            if (s5 === peg$FAILED) {
	              s4 = void 0;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsebegin_optgroup() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 91) {
	        s1 = peg$c207;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c208); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseend_optgroup() {
	      var s0, s1;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 93) {
	        s1 = peg$c209;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c210); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c11();
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsechar() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (peg$c375.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c376); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c377(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c374); }
	      }

	      return s0;
	    }

	    function peg$parsedigit() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (peg$c379.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c380); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c381(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c378); }
	      }

	      return s0;
	    }

	    function peg$parsepunctuation() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (peg$c383.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c384); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c385(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c382); }
	      }

	      return s0;
	    }

	    function peg$parsequotes() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (peg$c387.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c388); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c389(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c386); }
	      }

	      return s0;
	    }

	    function peg$parseleft_br() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 91) {
	        s1 = peg$c207;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c208); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c391(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c390); }
	      }

	      return s0;
	    }

	    function peg$parseright_br() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 93) {
	        s1 = peg$c209;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c210); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c391(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c392); }
	      }

	      return s0;
	    }

	    function peg$parseutf8_char() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      peg$silentFails++;
	      s2 = peg$parsesp();
	      if (s2 === peg$FAILED) {
	        s2 = peg$parsenl();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parseescape();
	          if (s2 === peg$FAILED) {
	            s2 = peg$parsebegin_group();
	            if (s2 === peg$FAILED) {
	              s2 = peg$parseend_group();
	              if (s2 === peg$FAILED) {
	                s2 = peg$parsemath_shift();
	                if (s2 === peg$FAILED) {
	                  s2 = peg$parsealignment_tab();
	                  if (s2 === peg$FAILED) {
	                    s2 = peg$parsemacro_parameter();
	                    if (s2 === peg$FAILED) {
	                      s2 = peg$parsesuperscript();
	                      if (s2 === peg$FAILED) {
	                        s2 = peg$parsesubscript();
	                        if (s2 === peg$FAILED) {
	                          s2 = peg$parseignore();
	                          if (s2 === peg$FAILED) {
	                            s2 = peg$parsecomment();
	                            if (s2 === peg$FAILED) {
	                              s2 = peg$parsebegin_optgroup();
	                              if (s2 === peg$FAILED) {
	                                s2 = peg$parseend_optgroup();
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	      peg$silentFails--;
	      if (s2 === peg$FAILED) {
	        s1 = void 0;
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.length > peg$currPos) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c2); }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c394(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c393); }
	      }

	      return s0;
	    }

	    function peg$parsehyphen() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 45) {
	        s1 = peg$c180;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c181); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c396();
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c395); }
	      }

	      return s0;
	    }

	    function peg$parseligature() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c398) {
	        s1 = peg$c398;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c399); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 3) === peg$c400) {
	          s1 = peg$c400;
	          peg$currPos += 3;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c401); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c402) {
	            s1 = peg$c402;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c403); }
	          }
	          if (s1 === peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c404) {
	              s1 = peg$c404;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c405); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c406) {
	                s1 = peg$c406;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c407); }
	              }
	              if (s1 === peg$FAILED) {
	                if (input.substr(peg$currPos, 3) === peg$c408) {
	                  s1 = peg$c408;
	                  peg$currPos += 3;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c409); }
	                }
	                if (s1 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 2) === peg$c410) {
	                    s1 = peg$c410;
	                    peg$currPos += 2;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c411); }
	                  }
	                  if (s1 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 2) === peg$c412) {
	                      s1 = peg$c412;
	                      peg$currPos += 2;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c413); }
	                    }
	                    if (s1 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 2) === peg$c414) {
	                        s1 = peg$c414;
	                        peg$currPos += 2;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c415); }
	                      }
	                      if (s1 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 2) === peg$c416) {
	                          s1 = peg$c416;
	                          peg$currPos += 2;
	                        } else {
	                          s1 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c417); }
	                        }
	                        if (s1 === peg$FAILED) {
	                          if (input.substr(peg$currPos, 2) === peg$c418) {
	                            s1 = peg$c418;
	                            peg$currPos += 2;
	                          } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c419); }
	                          }
	                          if (s1 === peg$FAILED) {
	                            if (input.substr(peg$currPos, 2) === peg$c420) {
	                              s1 = peg$c420;
	                              peg$currPos += 2;
	                            } else {
	                              s1 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c421); }
	                            }
	                            if (s1 === peg$FAILED) {
	                              if (input.substr(peg$currPos, 2) === peg$c422) {
	                                s1 = peg$c422;
	                                peg$currPos += 2;
	                              } else {
	                                s1 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c423); }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c424(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c397); }
	      }

	      return s0;
	    }

	    function peg$parsectrl_sym() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        if (peg$c426.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c427); }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c428(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c425); }
	      }

	      return s0;
	    }

	    function peg$parsesymbol() {
	      var s0, s1, s2, s3, s4;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseidentifier();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c430(s2);
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c431(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c429); }
	      }

	      return s0;
	    }

	    function peg$parsediacritic() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        s3 = peg$currPos;
	        s4 = peg$parsechar();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$currPos;
	          peg$silentFails++;
	          s6 = peg$parsechar();
	          peg$silentFails--;
	          if (s6 === peg$FAILED) {
	            s5 = void 0;
	          } else {
	            peg$currPos = s5;
	            s5 = peg$FAILED;
	          }
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        if (s3 === peg$FAILED) {
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          s5 = peg$parsechar();
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = void 0;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c2); }
	            }
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s3 !== peg$FAILED) {
	          s2 = input.substring(s2, peg$currPos);
	        } else {
	          s2 = s3;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = peg$currPos;
	          s3 = peg$c433(s2);
	          if (s3) {
	            s3 = void 0;
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$currPos;
	              s6 = peg$parsebegin_group();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseprimitive();
	                if (s7 === peg$FAILED) {
	                  s7 = null;
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseend_group();
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parsespace();
	                    if (s9 === peg$FAILED) {
	                      s9 = null;
	                    }
	                    if (s9 !== peg$FAILED) {
	                      peg$savedPos = s5;
	                      s6 = peg$c434(s2, s7, s9);
	                      s5 = s6;
	                    } else {
	                      peg$currPos = s5;
	                      s5 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = peg$currPos;
	                s6 = peg$parseprimitive();
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s5;
	                  s6 = peg$c435(s2, s6);
	                }
	                s5 = s6;
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c436(s2, s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c432); }
	      }

	      return s0;
	    }

	    function peg$parsecharsym() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      s1 = peg$parseescape();
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 6) === peg$c437) {
	          s2 = peg$c437;
	          peg$currPos += 6;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c438); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsebegin_group();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseskip_space();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseinteger();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseskip_space();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseend_group();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c439(s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseescape();
	        if (s1 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c440) {
	            s2 = peg$c440;
	            peg$currPos += 4;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c441); }
	          }
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parseinteger();
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c439(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 4) === peg$c442) {
	            s1 = peg$c442;
	            peg$currPos += 4;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c443); }
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parsehex16();
	            if (s2 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c439(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c444) {
	              s1 = peg$c444;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c445); }
	            }
	            if (s1 !== peg$FAILED) {
	              s2 = peg$parsehex8();
	              if (s2 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c439(s2);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c444) {
	                s1 = peg$c444;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c445); }
	              }
	              if (s1 !== peg$FAILED) {
	                if (input.length > peg$currPos) {
	                  s2 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s2 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                }
	                if (s2 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c446(s2);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseinteger() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = peg$parseint();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c447(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 39) {
	          s1 = peg$c160;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c161); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseoct();
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c448(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 34) {
	            s1 = peg$c449;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c450); }
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parsehex16();
	            if (s2 === peg$FAILED) {
	              s2 = peg$parsehex8();
	            }
	            if (s2 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c451(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsehex8() {
	      var s0, s1, s2, s3, s4;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      s2 = peg$currPos;
	      s3 = peg$parsehex();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsehex();
	        if (s4 !== peg$FAILED) {
	          s3 = [s3, s4];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = input.substring(s1, peg$currPos);
	      } else {
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c453(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c452); }
	      }

	      return s0;
	    }

	    function peg$parsehex16() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      s2 = peg$currPos;
	      s3 = peg$parsehex();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsehex();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parsehex();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parsehex();
	            if (s6 !== peg$FAILED) {
	              s3 = [s3, s4, s5, s6];
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = input.substring(s1, peg$currPos);
	      } else {
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c453(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c454); }
	      }

	      return s0;
	    }

	    function peg$parseint() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      if (peg$c379.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c380); }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          if (peg$c379.test(input.charAt(peg$currPos))) {
	            s2 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c380); }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c455); }
	      }

	      return s0;
	    }

	    function peg$parseoct() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      if (peg$c457.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c458); }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          if (peg$c457.test(input.charAt(peg$currPos))) {
	            s2 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c458); }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c456); }
	      }

	      return s0;
	    }

	    function peg$parsehex() {
	      var s0;

	      peg$silentFails++;
	      if (peg$c460.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c461); }
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        if (peg$silentFails === 0) { peg$fail(peg$c459); }
	      }

	      return s0;
	    }

	    function peg$parsefloat() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      s2 = peg$currPos;
	      if (peg$c463.test(input.charAt(peg$currPos))) {
	        s3 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c464); }
	      }
	      if (s3 === peg$FAILED) {
	        s3 = null;
	      }
	      if (s3 !== peg$FAILED) {
	        s4 = peg$currPos;
	        s5 = peg$parseint();
	        if (s5 !== peg$FAILED) {
	          s6 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 46) {
	            s7 = peg$c203;
	            peg$currPos++;
	          } else {
	            s7 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c204); }
	          }
	          if (s7 !== peg$FAILED) {
	            s8 = peg$parseint();
	            if (s8 === peg$FAILED) {
	              s8 = null;
	            }
	            if (s8 !== peg$FAILED) {
	              s7 = [s7, s8];
	              s6 = s7;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s6;
	            s6 = peg$FAILED;
	          }
	          if (s6 === peg$FAILED) {
	            s6 = null;
	          }
	          if (s6 !== peg$FAILED) {
	            s5 = [s5, s6];
	            s4 = s5;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s4;
	          s4 = peg$FAILED;
	        }
	        if (s4 === peg$FAILED) {
	          s4 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 46) {
	            s5 = peg$c203;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c204); }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseint();
	            if (s6 !== peg$FAILED) {
	              s5 = [s5, s6];
	              s4 = s5;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	        }
	        if (s4 !== peg$FAILED) {
	          s3 = [s3, s4];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = input.substring(s1, peg$currPos);
	      } else {
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c465(s1);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c462); }
	      }

	      return s0;
	    }

	    function peg$parsethe() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c466) {
	        s1 = peg$c466;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c467); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$parsevalue();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = peg$currPos;
	              s6 = peg$c468(s5);
	              if (s6) {
	                s6 = void 0;
	              } else {
	                s6 = peg$FAILED;
	              }
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s4;
	                s5 = peg$c469(s5);
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = peg$currPos;
	              s5 = peg$parseescape();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseidentifier();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseskip_space();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s4;
	                    s5 = peg$c470(s6);
	                    s4 = s5;
	                  } else {
	                    peg$currPos = s4;
	                    s4 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c471(s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parselogging() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 7) === peg$c472) {
	        s1 = peg$c472;
	        peg$currPos += 7;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c473); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        peg$silentFails++;
	        s3 = peg$parsechar();
	        peg$silentFails--;
	        if (s3 === peg$FAILED) {
	          s2 = void 0;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseskip_space();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            s5 = peg$parsevalue();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = peg$currPos;
	              s6 = peg$c468(s5);
	              if (s6) {
	                s6 = void 0;
	              } else {
	                s6 = peg$FAILED;
	              }
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s4;
	                s5 = peg$c474(s5);
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = peg$currPos;
	              s5 = peg$parseescape();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseidentifier();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parseskip_space();
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s4;
	                    s5 = peg$c475(s6);
	                    s4 = s5;
	                  } else {
	                    peg$currPos = s4;
	                    s4 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s4;
	                  s4 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s1 = [s1, s2, s3, s4];
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 7) === peg$c476) {
	          s1 = peg$c476;
	          peg$currPos += 7;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c477); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parsearg_group();
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c478(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }

	      return s0;
	    }


	        var { Vector } = require$$0;
	        var g = options.generator;
	        g.setErrorFn(error);
	        g.location = location;


	    peg$result = peg$startRuleFunction();

	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail(peg$endExpectation());
	      }

	      throw peg$buildStructuredError(
	        peg$maxFailExpected,
	        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	        peg$maxFailPos < input.length
	          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	      );
	    }
	  }

	  return {
	    SyntaxError: peg$SyntaxError,
	    parse:       peg$parse
	  };
	})();

	var ligatures$1,diacritics,symbols$1;
	ligatures$1 = new Map([['ff', he.decode('&fflig;')], ['ffi', he.decode('&ffilig;')], ['ffl', he.decode('&ffllig;')], ['fi', he.decode('&filig;')], ['fl', he.decode('&fllig;')], ['``', he.decode('&ldquo;')], ["''", he.decode('&rdquo;')], ['!´', he.decode('&iexcl;')], ['?´', he.decode('&iquest;')], ['--', he.decode('&ndash;')], ['---', he.decode('&mdash;')], ['<<', he.decode('&laquo;')], ['>>', he.decode('&raquo;')], ['"`', he.decode('&bdquo;')], ['"\'', he.decode('&ldquo;')]]);
	diacritics = new Map([['b', ['\u0332', '\u005F']], ['c', ['\u0327', '\u00B8']], ['d', ['\u0323', '\u200B \u0323']], ['H', ['\u030B', '\u02DD']], ['k', ['\u0328', '\u02DB']], ['r', ['\u030A', '\u02DA']], ['t', ['\u0361', '\u200B \u0361']], ['u', ['\u0306', '\u02D8']], ['v', ['\u030C', '\u02C7']], ['"', ['\u0308', '\u00A8']], ['~', ['\u0303', '\u007E']], ['^', ['\u0302', '\u005E']], ['`', ['\u0300', '\u0060']], ['\'', ['\u0301', '\u00B4']], ['=', ['\u0304', '\u00AF']], ['.', ['\u0307', '\u02D9']]]);
	symbols$1 = new Map([['space', ' '], ['nobreakspace', he.decode('&nbsp;')], ['thinspace', he.decode('&thinsp;')], ['enspace', he.decode('&ensp;')], ['enskip', he.decode('&ensp;')], ['quad', he.decode('&emsp;')], ['qquad', he.decode('&emsp;&emsp;')], ['textvisiblespace', he.decode('&blank;')], ['textcompwordmark', he.decode('&zwnj;')], ['textdollar', '$'], ['$', '$'], ['slash', he.decode('&sol;')], ['textless', '<'], ['textgreater', '>'], ['textbackslash', '\u005C'], ['textasciicircum', '^'], ['textunderscore', '_'], ['_', '_'], ['lbrack', '['], ['rbrack', ']'], ['textbraceleft', '{'], ['{', '{'], ['textbraceright', '}'], ['}', '}'], ['textasciitilde', '˜'], ['AA', '\u00C5'], ['aa', '\u00E5'], ['AE', he.decode('&AElig;')], ['ae', he.decode('&aelig;')], ['OE', he.decode('&OElig;')], ['oe', he.decode('&oelig;')], ['DH', he.decode('&ETH;')], ['dh', he.decode('&eth;')], ['DJ', he.decode('&Dstrok;')], ['dj', he.decode('&dstrok;')], ['NG', he.decode('&ENG;')], ['ng', he.decode('&eng;')], ['TH', he.decode('&THORN;')], ['th', he.decode('&thorn;')], ['O', he.decode('&Oslash;')], ['o', he.decode('&oslash;')], ['i', he.decode('&imath;')], ['j', he.decode('&jmath;')], ['L', he.decode('&Lstrok;')], ['l', he.decode('&lstrok;')], ['IJ', he.decode('&IJlig;')], ['ij', he.decode('&ijlig;')], ['SS', '\u1E9E'], ['ss', he.decode('&szlig;')], ['textquotesingle', "'"], ['textquoteleft', he.decode('&lsquo;')], ['lq', he.decode('&lsquo;')], ['textquoteright', he.decode('&rsquo;')], ['rq', he.decode('&rsquo;')], ['textquotedbl', he.decode('&quot;')], ['textquotedblleft', he.decode('&ldquo;')], ['textquotedblright', he.decode('&rdquo;')], ['quotesinglbase', he.decode('&sbquo;')], ['quotedblbase', he.decode('&bdquo;')], ['guillemotleft', he.decode('&laquo;')], ['guillemotright', he.decode('&raquo;')], ['guilsinglleft', he.decode('&lsaquo;')], ['guilsinglright', he.decode('&rsaquo;')], ['textasciigrave', '\u0060'], ['textgravedbl', '\u02F5'], ['textasciidieresis', he.decode('&die;')], ['textasciiacute', he.decode('&acute;')], ['textacutedbl', he.decode('&dblac;')], ['textasciimacron', he.decode('&macr;')], ['textasciicaron', he.decode('&caron;')], ['textasciibreve', he.decode('&breve;')], ['texttildelow', '\u02F7'], ['textendash', he.decode('&ndash;')], ['textemdash', he.decode('&mdash;')], ['textellipsis', he.decode('&hellip;')], ['dots', he.decode('&hellip;')], ['ldots', he.decode('&hellip;')], ['textbullet', he.decode('&bull;')], ['textopenbullet', '\u25E6'], ['textperiodcentered', he.decode('&middot;')], ['textdagger', he.decode('&dagger;')], ['dag', he.decode('&dagger;')], ['textdaggerdbl', he.decode('&Dagger;')], ['ddag', he.decode('&Dagger;')], ['textexclamdown', he.decode('&iexcl;')], ['textquestiondown', he.decode('&iquest;')], ['textinterrobang', '\u203D'], ['textinterrobangdown', '\u2E18'], ['textsection', he.decode('&sect;')], ['S', he.decode('&sect;')], ['textparagraph', he.decode('&para;')], ['P', he.decode('&para;')], ['textblank', '\u2422'], ['textlquill', '\u2045'], ['textrquill', '\u2046'], ['textlangle', '\u2329'], ['textrangle', '\u232A'], ['textlbrackdbl', '\u301A'], ['textrbrackdbl', '\u301B'], ['textcopyright', he.decode('&copy;')], ['copyright', he.decode('&copy;')], ['textregistered', he.decode('&reg;')], ['textcircledP', he.decode('&copysr;')], ['textservicemark', '\u2120'], ['texttrademark', he.decode('&trade;')], ['textmarried', '\u26AD'], ['textdivorced', '\u26AE'], ['textordfeminine', he.decode('&ordf;')], ['textordmasculine', he.decode('&ordm;')], ['textdegree', he.decode('&deg;')], ['textmu', he.decode('&micro;')], ['textbar', '\u007C'], ['textbardbl', he.decode('&Vert;')], ['textbrokenbar', he.decode('&brvbar;')], ['textreferencemark', '\u203B'], ['textdiscount', '\u2052'], ['textcelsius', '\u2103'], ['textnumero', he.decode('&numero;')], ['textrecipe', he.decode('&rx;')], ['textestimated', '\u212E'], ['textbigcircle', he.decode('&xcirc;')], ['textmusicalnote', he.decode('&sung;')], ['textohm', '\u2126'], ['textmho', '\u2127'], ['textleftarrow', he.decode('&larr;')], ['textuparrow', he.decode('&uarr;')], ['textrightarrow', he.decode('&rarr;')], ['textdownarrow', he.decode('&darr;')], ['textperthousand', he.decode('&permil;')], ['textpertenthousand', '\u2031'], ['textonehalf', he.decode('&frac12;')], ['textthreequarters', he.decode('&frac34;')], ['textonequarter', he.decode('&frac14;')], ['textfractionsolidus', he.decode('&frasl;')], ['textdiv', he.decode('&divide;')], ['texttimes', he.decode('&times;')], ['textminus', he.decode('&minus;')], ['textasteriskcentered', he.decode('&lowast;')], ['textpm', he.decode('&plusmn;')], ['textsurd', he.decode('&radic;')], ['textlnot', he.decode('&not;')], ['textonesuperior', he.decode('&sup1;')], ['texttwosuperior', he.decode('&sup2;')], ['textthreesuperior', he.decode('&sup3;')], ['texteuro', he.decode('&euro;')], ['textcent', he.decode('&cent;')], ['textsterling', he.decode('&pound;')], ['pounds', he.decode('&pound;')], ['textbaht', '\u0E3F'], ['textcolonmonetary', '\u20A1'], ['textcurrency', '\u00A4'], ['textdong', '\u20AB'], ['textflorin', '\u0192'], ['textlira', '\u20A4'], ['textnaira', '\u20A6'], ['textpeso', '\u20B1'], ['textwon', '\u20A9'], ['textyen', '\u00A5']]);

	var export$$e;
	export$$e = (function(){
	  Base.displayName = 'Base';
	  var args, x$; Base.prototype;
	  args = Base.args = {};
	  Base.prototype.options = new Map;
	  function Base(generator, options){
	    var pt345, inch, textwidth, margins, oddsidemargin, marginparwidth, this$ = this;
	    this.g = generator;
	    if (options) {
	      this.options = options;
	    }
	    this.g.newCounter('part');
	    this.g.newCounter('section');
	    this.g.newCounter('subsection', 'section');
	    this.g.newCounter('subsubsection', 'subsection');
	    this.g.newCounter('paragraph', 'subsubsection');
	    this.g.newCounter('subparagraph', 'paragraph');
	    this.g.newCounter('figure');
	    this.g.newCounter('table');
	    this.g.setLength('paperheight', new this.g.Length(11, "in"));
	    this.g.setLength('paperwidth', new this.g.Length(8.5, "in"));
	    this.g.setLength('@@size', new this.g.Length(10, "pt"));
	    this.options.forEach(function(v, k){
	      var tmp, value;
	      switch (k) {
	      case "oneside":
	        break;
	      case "twoside":
	        break;
	      case "onecolumn":
	        break;
	      case "twocolumn":
	        break;
	      case "titlepage":
	        break;
	      case "notitlepage":
	        break;
	      case "fleqn":
	        break;
	      case "leqno":
	        break;
	      case "a4paper":
	        this$.g.setLength('paperheight', new this$.g.Length(297, "mm"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(210, "mm"));
	      case "a5paper":
	        this$.g.setLength('paperheight', new this$.g.Length(210, "mm"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(148, "mm"));
	      case "b5paper":
	        this$.g.setLength('paperheight', new this$.g.Length(250, "mm"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(176, "mm"));
	      case "letterpaper":
	        this$.g.setLength('paperheight', new this$.g.Length(11, "in"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(8.5, "in"));
	      case "legalpaper":
	        this$.g.setLength('paperheight', new this$.g.Length(14, "in"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(8.5, "in"));
	      case "executivepaper":
	        this$.g.setLength('paperheight', new this$.g.Length(10.5, "in"));
	        return this$.g.setLength('paperwidth', new this$.g.Length(7.25, "in"));
	      case "landscape":
	        tmp = this$.g.length('paperheight');
	        this$.g.setLength('paperheight', this$.g.length('paperwidth'));
	        return this$.g.setLength('paperwidth', tmp);
	      default:
	        value = parseFloat(k);
	        if (value !== NaN && k.endsWith("pt") && String(value) === k.substring(0, k.length - 2)) {
	          return this$.g.setLength('@@size', new this$.g.Length(value, "pt"));
	        }
	      }
	    });
	    pt345 = new this.g.Length(345, "pt");
	    inch = new this.g.Length(1, "in");
	    textwidth = this.g.length('paperwidth').sub(inch.mul(2));
	    if (textwidth.cmp(pt345) === 1) {
	      textwidth = pt345;
	    }
	    this.g.setLength('textwidth', textwidth);
	    this.g.setLength('marginparsep', new this.g.Length(11, "pt"));
	    this.g.setLength('marginparpush', new this.g.Length(5, "pt"));
	    margins = this.g.length('paperwidth').sub(this.g.length('textwidth'));
	    oddsidemargin = margins.mul(0.5).sub(inch);
	    marginparwidth = margins.mul(0.5).sub(this.g.length('marginparsep')).sub(inch.mul(0.8));
	    if (marginparwidth.cmp(inch.mul(2)) === 1) {
	      marginparwidth = inch.mul(2);
	    }
	    this.g.setLength('oddsidemargin', oddsidemargin);
	    this.g.setLength('marginparwidth', marginparwidth);
	  }
	  Base.prototype['contentsname'] = function(){
	    return ["Contents"];
	  };
	  Base.prototype['listfigurename'] = function(){
	    return ["List of Figures"];
	  };
	  Base.prototype['listtablename'] = function(){
	    return ["List of Tables"];
	  };
	  Base.prototype['partname'] = function(){
	    return ["Part"];
	  };
	  Base.prototype['figurename'] = function(){
	    return ["Figure"];
	  };
	  Base.prototype['tablename'] = function(){
	    return ["Table"];
	  };
	  Base.prototype['appendixname'] = function(){
	    return ["Appendix"];
	  };
	  Base.prototype['indexname'] = function(){
	    return ["Index"];
	  };
	  x$ = args;
	  x$['part'] = x$['section'] = x$['subsection'] = x$['subsubsection'] = x$['paragraph'] = x$['subparagraph'] = ['V', 's', 'X', 'o?', 'g'];
	  Base.prototype['part'] = function(s, toc, ttl){
	    return [this.g.startsection('part', 0, s, toc, ttl)];
	  };
	  Base.prototype['section'] = function(s, toc, ttl){
	    return [this.g.startsection('section', 1, s, toc, ttl)];
	  };
	  Base.prototype['subsection'] = function(s, toc, ttl){
	    return [this.g.startsection('subsection', 2, s, toc, ttl)];
	  };
	  Base.prototype['subsubsection'] = function(s, toc, ttl){
	    return [this.g.startsection('subsubsection', 3, s, toc, ttl)];
	  };
	  Base.prototype['paragraph'] = function(s, toc, ttl){
	    return [this.g.startsection('paragraph', 4, s, toc, ttl)];
	  };
	  Base.prototype['subparagraph'] = function(s, toc, ttl){
	    return [this.g.startsection('subparagraph', 5, s, toc, ttl)];
	  };
	  Base.prototype['thepart'] = function(){
	    return [this.g.Roman(this.g.counter('part'))];
	  };
	  Base.prototype['thesection'] = function(){
	    return [this.g.arabic(this.g.counter('section'))];
	  };
	  Base.prototype['thesubsection'] = function(){
	    return this.thesection().concat("." + this.g.arabic(this.g.counter('subsection')));
	  };
	  Base.prototype['thesubsubsection'] = function(){
	    return this.thesubsection().concat("." + this.g.arabic(this.g.counter('subsubsection')));
	  };
	  Base.prototype['theparagraph'] = function(){
	    return this.thesubsubsection().concat("." + this.g.arabic(this.g.counter('paragraph')));
	  };
	  Base.prototype['thesubparagraph'] = function(){
	    return this.theparagraph().concat("." + this.g.arabic(this.g.counter('subparagraph')));
	  };
	  args['maketitle'] = ['V'];
	  Base.prototype['maketitle'] = function(){
	    var title, author, date, that, maketitle;
	    this.g.setTitle(this._title);
	    title = this.g.create(this.g.title, this._title);
	    author = this.g.create(this.g.author, this._author);
	    date = this.g.create(this.g.date, (that = this._date)
	      ? that
	      : this.g.macro('today'));
	    maketitle = this.g.create(this.g.list, [this.g.createVSpace(new this.g.Length(2, "em")), title, this.g.createVSpace(new this.g.Length(1.5, "em")), author, this.g.createVSpace(new this.g.Length(1, "em")), date, this.g.createVSpace(new this.g.Length(1.5, "em"))], "center");
	    this.g.setCounter('footnote', 0);
	    this._title = null;
	    this._author = null;
	    this._date = null;
	    this._thanks = null;
	    this['title'] = this['author'] = this['date'] = this['thanks'] = this['and'] = this['maketitle'] = function(){};
	    return [maketitle];
	  };
	  return Base;
	}());

	var export$$d;
	export$$d = (function(superclass){
	  var args; extend$$3((import$$3(Article, superclass).displayName = 'Article', Article), superclass).prototype;
	  Article.css = "css/article.css";
	  function Article(generator, options){
	    Article.superclass.apply(this, arguments);
	    this.g.setCounter('secnumdepth', 3);
	    this.g.setCounter('tocdepth', 3);
	  }
	  args = Article.args = export$$e.args;
	  Article.prototype['refname'] = function(){
	    return ["References"];
	  };
	  args['tableofcontents'] = ['V'];
	  Article.prototype['tableofcontents'] = function(){
	    return this.section(true, undefined, this.g.macro('contentsname')).concat([this.g._toc]);
	  };
	  args['abstract'] = ['V'];
	  Article.prototype['abstract'] = function(){
	    var head;
	    this.g.setFontSize("small");
	    this.g.enterGroup();
	    this.g.setFontWeight("bf");
	    head = this.g.create(this.g.list, this.g.macro("abstractname"), "center");
	    this.g.exitGroup();
	    return [head].concat(this.quotation());
	  };
	  Article.prototype['endabstract'] = function(){
	    this.endquotation();
	  };
	  args['appendix'] = ['V'];
	  Article.prototype['appendix'] = function(){
	    this.g.setCounter('section', 0);
	    this.g.setCounter('subsection', 0);
	    this['thesection'] = function(){
	      return [this.g.Alph(this.g.counter('section'))];
	    };
	  };
	  return Article;
	}(export$$e));
	function extend$$3(sub, sup){
	  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
	  (sub.prototype = new fun).constructor = sub;
	  if (typeof sup.extended == 'function') sup.extended(sub);
	  return sub;
	}
	function import$$3(obj, src){
	  var own = {}.hasOwnProperty;
	  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
	  return obj;
	}

	var export$$c;
	export$$c = (function(superclass){
	  var args, x$; extend$$2((import$$2(Report, superclass).displayName = 'Report', Report), superclass).prototype;
	  Report.css = "css/book.css";
	  function Report(generator, options){
	    Report.superclass.apply(this, arguments);
	    this.g.newCounter('chapter');
	    this.g.addToReset('section', 'chapter');
	    this.g.setCounter('secnumdepth', 2);
	    this.g.setCounter('tocdepth', 2);
	    this.g.addToReset('figure', 'chapter');
	    this.g.addToReset('table', 'chapter');
	    this.g.addToReset('footnote', 'chapter');
	  }
	  Report.prototype['chaptername'] = function(){
	    return ["Chapter"];
	  };
	  Report.prototype['bibname'] = function(){
	    return ["Bibliography"];
	  };
	  args = Report.args = export$$e.args;
	  x$ = args;
	  x$['part'] = x$['chapter'] = ['V', 's', 'X', 'o?', 'g'];
	  Report.prototype['part'] = function(s, toc, ttl){
	    return [this.g.startsection('part', -1, s, toc, ttl)];
	  };
	  Report.prototype['chapter'] = function(s, toc, ttl){
	    return [this.g.startsection('chapter', 0, s, toc, ttl)];
	  };
	  Report.prototype['thechapter'] = function(){
	    return [this.g.arabic(this.g.counter('chapter'))];
	  };
	  Report.prototype['thesection'] = function(){
	    return this.thechapter().concat("." + this.g.arabic(this.g.counter('section')));
	  };
	  Report.prototype['thefigure'] = function(){
	    return (this.g.counter('chapter') > 0
	      ? this.thechapter().concat(".")
	      : []).concat(this.g.arabic(this.g.counter('figure')));
	  };
	  Report.prototype['thetable'] = function(){
	    return (this.g.counter('chapter') > 0
	      ? this.thechapter().concat(".")
	      : []).concat(this.g.arabic(this.g.counter('table')));
	  };
	  args['tableofcontents'] = ['V'];
	  Report.prototype['tableofcontents'] = function(){
	    return this.chapter(true, undefined, this.g.macro('contentsname')).concat([this.g._toc]);
	  };
	  args['abstract'] = ['V'];
	  Report.prototype['abstract'] = function(){
	    var head;
	    this.g.setFontSize("small");
	    this.g.enterGroup();
	    this.g.setFontWeight("bf");
	    head = this.g.create(this.g.list, this.g.macro("abstractname"), "center");
	    this.g.exitGroup();
	    return [head].concat(this.quotation());
	  };
	  Report.prototype['endabstract'] = function(){
	    this.endquotation();
	  };
	  args['appendix'] = ['V'];
	  Report.prototype['appendix'] = function(){
	    this.g.setCounter('chapter', 0);
	    this.g.setCounter('section', 0);
	    this['chaptername'] = this['appendixname'];
	    this['thechapter'] = function(){
	      return [this.g.Alph(this.g.counter('chapter'))];
	    };
	  };
	  return Report;
	}(export$$e));
	function extend$$2(sub, sup){
	  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
	  (sub.prototype = new fun).constructor = sub;
	  if (typeof sup.extended == 'function') sup.extended(sub);
	  return sub;
	}
	function import$$2(obj, src){
	  var own = {}.hasOwnProperty;
	  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
	  return obj;
	}

	var export$$b;
	export$$b = (function(superclass){
	  var args, x$, y$; extend$$1((import$$1(Book, superclass).displayName = 'Book', Book), superclass).prototype;
	  Book.css = "css/book.css";
	  function Book(generator, options){
	    Book.superclass.apply(this, arguments);
	    this['@mainmatter'] = true;
	  }
	  args = Book.args = export$$c.args;
	  x$ = args;
	  x$['part'] = x$['chapter'] = ['V', 's', 'X', 'o?', 'g'];
	  Book.prototype['chapter'] = function(s, toc, ttl){
	    return [this.g.startsection('chapter', 0, s || !this["@mainmatter"], toc, ttl)];
	  };
	  y$ = args;
	  y$['frontmatter'] = y$['mainmatter'] = y$['backmatter'] = ['V'];
	  Book.prototype['frontmatter'] = function(){
	    this['@mainmatter'] = false;
	  };
	  Book.prototype['mainmatter'] = function(){
	    this['@mainmatter'] = true;
	  };
	  Book.prototype['backmatter'] = function(){
	    this['@mainmatter'] = false;
	  };
	  return Book;
	}(export$$c));
	function extend$$1(sub, sup){
	  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
	  (sub.prototype = new fun).constructor = sub;
	  if (typeof sup.extended == 'function') sup.extended(sub);
	  return sub;
	}
	function import$$1(obj, src){
	  var own = {}.hasOwnProperty;
	  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
	  return obj;
	}

	var builtinDocumentclasses = {
	    article: export$$d,
	    book: export$$b,
	    report: export$$c
	};

	var export$$a;
	export$$a = (function(){
	  XColor.displayName = 'XColor';
	  var args, colors; XColor.prototype;
	  args = XColor.args = {};
	  colors = XColor.colors = new Map([["red", {}], ["green", {}], ["blue", {}], ["cyan", {}], ["magenta", {}], ["yellow", {}], ["black", {}], ["gray", {}], ["white", {}], ["darkgray", {}], ["lightgray", {}], ["brown", {}], ["lime", {}], ["olive", {}], ["orange", {}], ["pink", {}], ["purple", {}], ["teal", {}], ["violet", {}]]);
	  function XColor(generator, options){
	    var i$, ref$, len$, opt;
	    this.g = generator;
	    if (options) {
	      this.options = options;
	    }
	    for (i$ = 0, len$ = (ref$ = this.options).length; i$ < len$; ++i$) {
	      opt = ref$[i$];
	      opt = Object.keys(opt)[0];
	    }
	  }
	  args['definecolorset'] = ['P', 'i?', 'c-ml', 'ie', 'ie', 'c-ssp'];
	  XColor.prototype['definecolorset'] = function(type, models, hd, tl, setspec){
	    var i$, len$, spec;
	    if (type !== null && type !== "named" && type !== "ps") {
	      this.g.error("unknown color type");
	    }
	    if (!hd) {
	      hd = "";
	    }
	    if (!tl) {
	      tl = "";
	    }
	    for (i$ = 0, len$ = setspec.length; i$ < len$; ++i$) {
	      spec = setspec[i$];
	      this.definecolor(type, hd + spec.name + tl, models, spec.speclist);
	    }
	  };
	  args['definecolor'] = ['P', 'i?', 'i', 'c-ml', 'c-spl'];
	  XColor.prototype['definecolor'] = function(type, name, models, colorspec){
	    var color, i$, ref$, len$, i, model;
	    if (type !== null && type !== "named" && type !== "ps") {
	      this.g.error("unknown color type");
	    }
	    if (models.models.length !== colorspec.length) {
	      this.g.error("color models and specs don't match");
	    }
	    color = {};
	    for (i$ = 0, len$ = (ref$ = models.models).length; i$ < len$; ++i$) {
	      i = i$;
	      model = ref$[i$];
	      color[model] = colorspec[i];
	    }
	    colors.set(name, color);
	  };
	  args['color'] = ["HV", [['c-ml?', 'c-spl'], ['c']]];
	  XColor.prototype['color'] = function(){
	    if (arguments.length === 1) {
	      console.log("got color expression");
	    } else {
	      console.log("got model/color spec");
	    }
	  };
	  args['textcolor'] = ["HV", [['c-ml?', 'c-spl'], ['c']], "g"];
	  XColor.prototype['textcolor'] = function(){
	    if (arguments.length === 2) {
	      return;
	    }
	  };
	  args['colorbox'] = ['H', 'i?', 'c', 'g'];
	  XColor.prototype['colorbox'] = function(model, color, text){};
	  args['fcolorbox'] = ['H', 'i?', 'c', 'c', 'g'];
	  XColor.prototype['fcolorbox'] = function(model, color, text){};
	  return XColor;
	}());

	var Color$1;
	Color$1 = export$$a;

	var export$$9;
	export$$9 = (function(){
	  Echo.displayName = 'Echo';
	  var args; Echo.prototype;
	  args = Echo.args = {};
	  function Echo(generator, options){}
	  args.gobbleO = ['H', 'o?'];
	  Echo.prototype['gobbleO'] = function(){
	    return [];
	  };
	  args.echoO = ['H', 'o?'];
	  Echo.prototype['echoO'] = function(o){
	    return ["-", o, "-"];
	  };
	  args.echoOGO = ['H', 'o?', 'g', 'o?'];
	  Echo.prototype['echoOGO'] = function(o1, g, o2){
	    var x$;
	    x$ = [];
	    if (o1) {
	      x$.push("-", o1, "-");
	    }
	    x$.push("+", g, "+");
	    if (o2) {
	      x$.push("-", o2, "-");
	    }
	    return x$;
	  };
	  args.echoGOG = ['H', 'g', 'o?', 'g'];
	  Echo.prototype['echoGOG'] = function(g1, o, g2){
	    var x$;
	    x$ = ["+", g1, "+"];
	    if (o) {
	      x$.push("-", o, "-");
	    }
	    x$.push("+", g2, "+");
	    return x$;
	  };
	  return Echo;
	}());

	var export$$8;
	export$$8 = (function(){
	  Gensymb.displayName = 'Gensymb';
	  Gensymb.prototype;
	  Gensymb.args = {};
	  function Gensymb(generator, options){}
	  Gensymb.symbols = new Map([['degree', he.decode('&deg;')], ['celsius', '\u2103'], ['perthousand', he.decode('&permil;')], ['ohm', '\u2126'], ['micro', he.decode('&mu;')]]);
	  return Gensymb;
	}());

	var export$$7;
	export$$7 = (function(){
	  Graphicx.displayName = 'Graphicx';
	  var args; Graphicx.prototype;
	  args = Graphicx.args = {};
	  function Graphicx(generator, options){}
	  args['rotatebox'] = ['H', 'kv?', 'n', 'hg'];
	  Graphicx.prototype['rotatebox'] = function(kvl, angle, text){};
	  args['scalebox'] = ['H', 'n', 'n?', 'g'];
	  Graphicx.prototype['scalebox'] = function(hsc, vsc, text){};
	  args['reflectbox'] = ['H', 'g'];
	  Graphicx.prototype['reflectbox'] = function(text){
	    return this['scalebox'](-1, 1, text);
	  };
	  args['resizebox'] = ['H', 's', 'l', 'l', 'g'];
	  Graphicx.prototype['resizebox'] = function(s, hl, vl, text){};
	  args['graphicspath'] = ['HV', 'gl'];
	  Graphicx.prototype['graphicspath'] = function(paths){};
	  args['includegraphics'] = ['H', 's', 'kv?', 'kv?', 'k'];
	  Graphicx.prototype['includegraphics'] = function(s, kvl, kvl2, file){
	    return [this.g.createImage(kvl.get("width"), kvl.get("height"), file)];
	  };
	  return Graphicx;
	}());

	var Graphics;
	Graphics = export$$7;

	var export$$6;
	export$$6 = (function(){
	  Hyperref.displayName = 'Hyperref';
	  var args; Hyperref.prototype;
	  args = Hyperref.args = {};
	  function Hyperref(generator, options){}
	  args['href'] = ['H', 'o?', 'u', 'g'];
	  Hyperref.prototype['href'] = function(opts, url, txt){
	    return [this.g.create(this.g.link(url), txt)];
	  };
	  args['url'] = ['H', 'u'];
	  Hyperref.prototype['url'] = function(url){
	    return [this.g.create(this.g.link(url), this.g.createText(url))];
	  };
	  args['nolinkurl'] = ['H', 'u'];
	  Hyperref.prototype['nolinkurl'] = function(url){
	    return [this.g.create(this.g.link(), this.g.createText(url))];
	  };
	  return Hyperref;
	}());

	var export$$5;
	export$$5 = (function(){
	  Latexsym.displayName = 'Latexsym';
	  Latexsym.prototype;
	  Latexsym.args = {};
	  function Latexsym(generator, options){}
	  Latexsym.symbols = new Map([['mho', '\u2127'], ['Join', '\u2A1D'], ['Box', '\u25A1'], ['Diamond', '\u25C7'], ['leadsto', '\u2933'], ['sqsubset', '\u228F'], ['sqsupset', '\u2290'], ['lhd', '\u22B2'], ['unlhd', '\u22B4'], ['rhd', '\u22B3'], ['unrhd', '\u22B5']]);
	  return Latexsym;
	}());

	var export$$4;
	export$$4 = (function(){
	  Multicol.displayName = 'Multicol';
	  var args; Multicol.prototype;
	  args = Multicol.args = {};
	  function Multicol(generator, options){}
	  args['multicols'] = ['V', 'n', 'o?', 'o?'];
	  Multicol.prototype['multicols'] = function(cols, pre){
	    return [pre, this.g.create(this.g.multicols(cols))];
	  };
	  return Multicol;
	}());

	var export$$3;
	export$$3 = (function(){
	  Stix.displayName = 'Stix';
	  Stix.prototype;
	  Stix.args = {};
	  function Stix(generator, options){
	    generator.KaTeX.__defineSymbol("math", "main", "textord", "\u2664", "\\varspadesuit", true);
	    generator.KaTeX.__defineSymbol("math", "main", "textord", "\u2665", "\\varheartsuit", true);
	    generator.KaTeX.__defineSymbol("math", "main", "textord", "\u2666", "\\vardiamondsuit", true);
	    generator.KaTeX.__defineSymbol("math", "main", "textord", "\u2667", "\\varclubsuit", true);
	  }
	  Stix.symbols = new Map([['checkmark', he.decode('&check;')]]);
	  return Stix;
	}());

	var export$$2;
	export$$2 = (function(){
	  Textcomp.displayName = 'Textcomp';
	  Textcomp.prototype;
	  Textcomp.args = {};
	  function Textcomp(generator, options){}
	  Textcomp.symbols = new Map([['textcentoldstyle', '\uF7A2'], ['textdollaroldstyle', '\uF724'], ['textguarani', '\u20B2'], ['textcopyleft', '\u1F12F'], ['textzerooldstyle', '\uF730'], ['textoneoldstyle', '\uF731'], ['texttwooldstyle', '\uF732'], ['textthreeoldstyle', '\uF733'], ['textfouroldstyle', '\uF734'], ['textfiveoldstyle', '\uF735'], ['textsixoldstyle', '\uF736'], ['textsevenoldstyle', '\uF737'], ['texteightoldstyle', '\uF738'], ['textnineoldstyle', '\uF739'], ['textborn', '\u2B51'], ['textdied', he.decode('&dagger;')], ['textpilcrow', he.decode('&para;')], ['textdblhyphen', '\u2E40']]);
	  return Textcomp;
	}());

	var export$$1;
	export$$1 = (function(){
	  Textgreek.displayName = 'Textgreek';
	  Textgreek.prototype;
	  Textgreek.args = {};
	  function Textgreek(generator, options){}
	  Textgreek.symbols = new Map([['textalpha', he.decode('&alpha;')], ['textbeta', he.decode('&beta;')], ['textgamma', he.decode('&gamma;')], ['textdelta', he.decode('&delta;')], ['textepsilon', he.decode('&epsilon;')], ['textzeta', he.decode('&zeta;')], ['texteta', he.decode('&eta;')], ['texttheta', he.decode('&thetasym;')], ['textiota', he.decode('&iota;')], ['textkappa', he.decode('&kappa;')], ['textlambda', he.decode('&lambda;')], ['textmu', he.decode('&mu;')], ['textmugreek', he.decode('&mu;')], ['textnu', he.decode('&nu;')], ['textxi', he.decode('&xi;')], ['textomikron', he.decode('&omicron;')], ['textpi', he.decode('&pi;')], ['textrho', he.decode('&rho;')], ['textsigma', he.decode('&sigma;')], ['texttau', he.decode('&tau;')], ['textupsilon', he.decode('&upsilon;')], ['textphi', he.decode('&phi;')], ['textchi', he.decode('&chi;')], ['textpsi', he.decode('&psi;')], ['textomega', he.decode('&omega;')], ['textAlpha', he.decode('&Alpha;')], ['textBeta', he.decode('&Beta;')], ['textGamma', he.decode('&Gamma;')], ['textDelta', he.decode('&Delta;')], ['textEpsilon', he.decode('&Epsilon;')], ['textZeta', he.decode('&Zeta;')], ['textEta', he.decode('&Eta;')], ['textTheta', he.decode('&Theta;')], ['textIota', he.decode('&Iota;')], ['textKappa', he.decode('&Kappa;')], ['textLambda', he.decode('&Lambda;')], ['textMu', he.decode('&Mu;')], ['textNu', he.decode('&Nu;')], ['textXi', he.decode('&Xi;')], ['textOmikron', he.decode('&Omicron;')], ['textPi', he.decode('&Pi;')], ['textRho', he.decode('&Rho;')], ['textSigma', he.decode('&Sigma;')], ['textTau', he.decode('&Tau;')], ['textUpsilon', he.decode('&Upsilon;')], ['textPhi', he.decode('&Phi;')], ['textChi', he.decode('&Chi;')], ['textPsi', he.decode('&Psi;')], ['textOmega', he.decode('&Omega;')], ['textvarsigma', he.decode('&sigmaf;')], ['straightphi', '\u03D5'], ['scripttheta', '\u03D1'], ['straighttheta', he.decode('&theta;')], ['straightepsilon', '\u03F5']]);
	  return Textgreek;
	}());

	var builtinPackages = {
	    color: Color$1,
	    xcolor: export$$a,
	    echo: export$$9,
	    gensymb: export$$8,
	    graphics: Graphics,
	    graphicx: export$$7,
	    hyperref: export$$6,
	    latexsym: export$$5,
	    multicol: export$$4,
	    stix: export$$3,
	    textcomp: export$$2,
	    textgreek: export$$1,
	};

	/** Detect free variable `global` from Node.js. */

	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal$1;

	var freeGlobal = _freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$3 = freeGlobal || freeSelf || Function('return this')();

	var _root = root$3;

	var root$2 = _root;

	/** Built-in value references. */
	var Symbol$4 = root$2.Symbol;

	var _Symbol = Symbol$4;

	var Symbol$3 = _Symbol;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$9.toString;

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$3 ? Symbol$3.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$7.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];

	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag$1;

	/** Used for built-in method references. */

	var objectProto$8 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto$8.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString.call(value);
	}

	var _objectToString = objectToString$1;

	var Symbol$2 = _Symbol,
	    getRawTag = _getRawTag,
	    objectToString = _objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag$3(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	var _baseGetTag = baseGetTag$3;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */

	function isObject$4(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$4;

	var baseGetTag$2 = _baseGetTag,
	    isObject$3 = isObject_1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag$1 = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$2(value) {
	  if (!isObject$3(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag$2(value);
	  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction$2;

	var root$1 = _root;

	/** Used to detect overreaching core-js shims. */
	var coreJsData$1 = root$1['__core-js_shared__'];

	var _coreJsData = coreJsData$1;

	var coreJsData = _coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked$1(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked$1;

	/** Used for built-in method references. */

	var funcProto$1 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource$1(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource$1;

	var isFunction$1 = isFunction_1,
	    isMasked = _isMasked,
	    isObject$2 = isObject_1,
	    toSource = _toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto$7 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty$6).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative$1(value) {
	  if (!isObject$2(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	var _baseIsNative = baseIsNative$1;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue$1;

	var baseIsNative = _baseIsNative,
	    getValue = _getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative$1(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative$1;

	var getNative = _getNative;

	var defineProperty$2 = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty = defineProperty$2;

	var defineProperty$1 = _defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue$2(object, key, value) {
	  if (key == '__proto__' && defineProperty$1) {
	    defineProperty$1(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue$2;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */

	function eq$2(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq$2;

	var baseAssignValue$1 = _baseAssignValue,
	    eq$1 = eq_1;

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue$2(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$5.call(object, key) && eq$1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue$1(object, key, value);
	  }
	}

	var _assignValue = assignValue$2;

	var assignValue$1 = _assignValue,
	    baseAssignValue = _baseAssignValue;

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject$2(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue$1(object, key, newValue);
	    }
	  }
	  return object;
	}

	var _copyObject = copyObject$2;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */

	function identity$2(value) {
	  return value;
	}

	var identity_1 = identity$2;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */

	function apply$1(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	var _apply = apply$1;

	var apply = _apply;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest$1(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	var _overRest = overRest$1;

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */

	function constant$1(value) {
	  return function() {
	    return value;
	  };
	}

	var constant_1 = constant$1;

	var constant = constant_1,
	    defineProperty = _defineProperty,
	    identity$1 = identity_1;

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString$1 = !defineProperty ? identity$1 : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	var _baseSetToString = baseSetToString$1;

	/** Used to detect hot functions by number of calls within a span of milliseconds. */

	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut$1(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	var _shortOut = shortOut$1;

	var baseSetToString = _baseSetToString,
	    shortOut = _shortOut;

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString$1 = shortOut(baseSetToString);

	var _setToString = setToString$1;

	var identity = identity_1,
	    overRest = _overRest,
	    setToString = _setToString;

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest$1(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	var _baseRest = baseRest$1;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength$2(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	var isLength_1 = isLength$2;

	var isFunction = isFunction_1,
	    isLength$1 = isLength_1;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike$4(value) {
	  return value != null && isLength$1(value.length) && !isFunction(value);
	}

	var isArrayLike_1 = isArrayLike$4;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex$2(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex$2;

	var eq = eq_1,
	    isArrayLike$3 = isArrayLike_1,
	    isIndex$1 = _isIndex,
	    isObject$1 = isObject_1;

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall$1(value, index, object) {
	  if (!isObject$1(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike$3(object) && isIndex$1(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	var _isIterateeCall = isIterateeCall$1;

	var baseRest = _baseRest,
	    isIterateeCall = _isIterateeCall;

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner$2(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	var _createAssigner = createAssigner$2;

	/** Used for built-in method references. */

	var objectProto$5 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype$3(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

	  return value === proto;
	}

	var _isPrototype = isPrototype$3;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */

	function baseTimes$1(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes$1;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */

	function isObjectLike$3(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike$3;

	var baseGetTag$1 = _baseGetTag,
	    isObjectLike$2 = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments$1(value) {
	  return isObjectLike$2(value) && baseGetTag$1(value) == argsTag$1;
	}

	var _baseIsArguments = baseIsArguments$1;

	var baseIsArguments = _baseIsArguments,
	    isObjectLike$1 = isObjectLike_1;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments$2 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike$1(value) && hasOwnProperty$4.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	var isArguments_1 = isArguments$2;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */

	var isArray$2 = Array.isArray;

	var isArray_1 = isArray$2;

	var isBuffer$1 = {exports: {}};

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */

	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	isBuffer$1.exports;

	(function (module, exports) {
		var root = _root,
		    stubFalse = stubFalse_1;

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		module.exports = isBuffer; 
	} (isBuffer$1, isBuffer$1.exports));

	var isBufferExports = isBuffer$1.exports;

	var baseGetTag = _baseGetTag,
	    isLength = isLength_1,
	    isObjectLike = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray$1(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray$1;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */

	function baseUnary$1(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary$1;

	var _nodeUtil = {exports: {}};

	_nodeUtil.exports;

	(function (module, exports) {
		var freeGlobal = _freeGlobal;

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;

		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}());

		module.exports = nodeUtil; 
	} (_nodeUtil, _nodeUtil.exports));

	var _nodeUtilExports = _nodeUtil.exports;

	var baseIsTypedArray = _baseIsTypedArray,
	    baseUnary = _baseUnary,
	    nodeUtil = _nodeUtilExports;

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray$1 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	var isTypedArray_1 = isTypedArray$1;

	var baseTimes = _baseTimes,
	    isArguments$1 = isArguments_1,
	    isArray$1 = isArray_1,
	    isBuffer = isBufferExports,
	    isIndex = _isIndex,
	    isTypedArray = isTypedArray_1;

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys$2(value, inherited) {
	  var isArr = isArray$1(value),
	      isArg = !isArr && isArguments$1(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$3.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys$2;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */

	function overArg$1(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg$1;

	var overArg = _overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys$1 = overArg(Object.keys, Object);

	var _nativeKeys = nativeKeys$1;

	var isPrototype$2 = _isPrototype,
	    nativeKeys = _nativeKeys;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys$1(object) {
	  if (!isPrototype$2(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys$1;

	var arrayLikeKeys$1 = _arrayLikeKeys,
	    baseKeys = _baseKeys,
	    isArrayLike$2 = isArrayLike_1;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$1(object) {
	  return isArrayLike$2(object) ? arrayLikeKeys$1(object) : baseKeys(object);
	}

	var keys_1 = keys$1;

	var assignValue = _assignValue,
	    copyObject$1 = _copyObject,
	    createAssigner$1 = _createAssigner,
	    isArrayLike$1 = isArrayLike_1,
	    isPrototype$1 = _isPrototype,
	    keys = keys_1;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner$1(function(object, source) {
	  if (isPrototype$1(source) || isArrayLike$1(source)) {
	    copyObject$1(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty$1.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	var assign_1 = assign;

	var assign$1 = /*@__PURE__*/getDefaultExportFromCjs(assign_1);

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	function nativeKeysIn$1(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _nativeKeysIn = nativeKeysIn$1;

	var isObject = isObject_1,
	    isPrototype = _isPrototype,
	    nativeKeysIn = _nativeKeysIn;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn$1(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeysIn = baseKeysIn$1;

	var arrayLikeKeys = _arrayLikeKeys,
	    baseKeysIn = _baseKeysIn,
	    isArrayLike = isArrayLike_1;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn$1(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	var keysIn_1 = keysIn$1;

	var copyObject = _copyObject,
	    createAssigner = _createAssigner,
	    keysIn = keysIn_1;

	/**
	 * This method is like `_.assign` except that it iterates over own and
	 * inherited source properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assign
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	 */
	var assignIn = createAssigner(function(object, source) {
	  copyObject(source, keysIn(source), object);
	});

	var assignIn_1 = assignIn;

	var assignIn$1 = /*@__PURE__*/getDefaultExportFromCjs(assignIn_1);

	var export$;
	var slice$$1 = [].slice, arrayFrom$$1 = Array.from || function(x){return slice$$1.call(x);};
	export$ = (function(){
	  LaTeX.displayName = 'LaTeX';
	  var providedPackages, args, x$, i$, y$, ref$, len$, z$, z1$, z2$, z3$, z4$, z5$, z6$, z7$, z8$, z9$, z10$, z11$, z12$, z13$, z14$, z15$, prototype = LaTeX.prototype;
	  providedPackages = ['calc', 'pspicture', 'picture', 'pict2e', 'keyval', 'comment'];
	  LaTeX.prototype._title = null;
	  LaTeX.prototype._author = null;
	  LaTeX.prototype._date = null;
	  LaTeX.prototype._thanks = null;
	  function LaTeX(generator, CustomMacros){
	    var ref$;
	    if (CustomMacros) {
	      assignIn$1(this, new CustomMacros(generator));
	      assign$1(args, CustomMacros.args);
	      if ((ref$ = CustomMacros.symbols) != null) {
	        ref$.forEach(function(value, key){
	          return symbols$1.set(key, value);
	        });
	      }
	    }
	    this.g = generator;
	    this.g.newCounter('secnumdepth');
	    this.g.newCounter('tocdepth');
	    this.g.newCounter('footnote');
	    this.g.newCounter('mpfootnote');
	    this.g.newCounter('@listdepth');
	    this.g.newCounter('@itemdepth');
	    this.g.newCounter('@enumdepth');
	    this.g.newLength('@@size');
	    this.g.newLength('unitlength');
	    this.g.setLength('unitlength', new this.g.Length(1, "pt"));
	    this.g.newLength('@wholewidth');
	    this.g.setLength('@wholewidth', new this.g.Length(0.4, "pt"));
	    this.g.newLength('paperheight');
	    this.g.newLength('paperwidth');
	    this.g.newLength('oddsidemargin');
	    this.g.newLength('evensidemargin');
	    this.g.newLength('textheight');
	    this.g.newLength('textwidth');
	    this.g.newLength('marginparwidth');
	    this.g.newLength('marginparsep');
	    this.g.newLength('marginparpush');
	    this.g.newLength('columnwidth');
	    this.g.newLength('columnsep');
	    this.g.newLength('columnseprule');
	    this.g.newLength('linewidth');
	    this.g.newLength('leftmargin');
	    this.g.newLength('rightmargin');
	    this.g.newLength('listparindent');
	    this.g.newLength('itemindent');
	    this.g.newLength('labelwidth');
	    this.g.newLength('labelsep');
	    this.g.newLength('leftmargini');
	    this.g.newLength('leftmarginii');
	    this.g.newLength('leftmarginiii');
	    this.g.newLength('leftmarginiv');
	    this.g.newLength('leftmarginv');
	    this.g.newLength('leftmarginvi');
	    this.g.newLength('fboxrule');
	    this.g.newLength('fboxsep');
	    this.g.newLength('tabbingsep');
	    this.g.newLength('arraycolsep');
	    this.g.newLength('tabcolsep');
	    this.g.newLength('arrayrulewidth');
	    this.g.newLength('doublerulesep');
	    this.g.newLength('footnotesep');
	    this.g.newLength('topmargin');
	    this.g.newLength('headheight');
	    this.g.newLength('headsep');
	    this.g.newLength('footskip');
	    this.g.newLength('topsep');
	    this.g.newLength('partopsep');
	    this.g.newLength('itemsep');
	    this.g.newLength('parsep');
	    this.g.newLength('floatsep');
	    this.g.newLength('textfloatsep');
	    this.g.newLength('intextsep');
	    this.g.newLength('dblfloatsep');
	    this.g.newLength('dbltextfloatsep');
	  }
	  LaTeX.symbols = symbols$1;
	  args = LaTeX.args = {};
	  args['empty'] = ['HV'];
	  LaTeX.prototype['empty'] = function(){};
	  LaTeX.prototype['TeX'] = function(){
	    var tex, e;
	    this.g.enterGroup();
	    tex = this.g.create(this.g.inline);
	    tex.setAttribute('class', 'tex');
	    tex.appendChild(this.g.createText('T'));
	    e = this.g.create(this.g.inline, this.g.createText('e'), 'e');
	    tex.appendChild(e);
	    tex.appendChild(this.g.createText('X'));
	    this.g.exitGroup();
	    return [tex];
	  };
	  LaTeX.prototype['LaTeX'] = function(){
	    var latex, a, e;
	    this.g.enterGroup();
	    latex = this.g.create(this.g.inline);
	    latex.setAttribute('class', 'latex');
	    latex.appendChild(this.g.createText('L'));
	    a = this.g.create(this.g.inline, this.g.createText('a'), 'a');
	    latex.appendChild(a);
	    latex.appendChild(this.g.createText('T'));
	    e = this.g.create(this.g.inline, this.g.createText('e'), 'e');
	    latex.appendChild(e);
	    latex.appendChild(this.g.createText('X'));
	    this.g.exitGroup();
	    return [latex];
	  };
	  LaTeX.prototype['today'] = function(){
	    return [new Date().toLocaleDateString('en', {
	      weekday: 'long',
	      year: 'numeric',
	      month: 'long',
	      day: 'numeric'
	    })];
	  };
	  LaTeX.prototype['newline'] = function(){
	    return [this.g.create(this.g.linebreak)];
	  };
	  LaTeX.prototype['negthinspace'] = function(){
	    return [this.g.create(this.g.inline, undefined, 'negthinspace')];
	  };
	  args['par'] = ['V'];
	  args['item'] = ['V'];
	  args['onecolumn'] = ['V'];
	  LaTeX.prototype['onecolumn'] = function(){};
	  args['twocolumn'] = ['V', 'o?'];
	  LaTeX.prototype['twocolumn'] = function(){};
	  x$ = args;
	  x$['smallbreak'] = x$['medbreak'] = x$['bigbreak'] = ['V'];
	  LaTeX.prototype['smallbreak'] = function(){
	    return [this.g.createVSpaceSkip("smallskip")];
	  };
	  LaTeX.prototype['medbreak'] = function(){
	    return [this.g.createVSpaceSkip("medskip")];
	  };
	  LaTeX.prototype['bigbreak'] = function(){
	    return [this.g.createVSpaceSkip("bigskip")];
	  };
	  args['addvspace'] = ['V', 'l'];
	  LaTeX.prototype['addvspace'] = function(l){
	    return this.g.createVSpace(l);
	  };
	  args['marginpar'] = ['H', 'g'];
	  LaTeX.prototype['marginpar'] = function(txt){
	    return [this.g.marginpar(txt)];
	  };
	  LaTeX.prototype['abstractname'] = function(){
	    return ["Abstract"];
	  };
	  args['title'] = ['HV', 'g'];
	  args['author'] = ['HV', 'g'];
	  args['and'] = ['H'];
	  args['date'] = ['HV', 'g'];
	  args['thanks'] = ['HV', 'g'];
	  LaTeX.prototype['title'] = function(t){
	    this._title = t;
	  };
	  LaTeX.prototype['author'] = function(a){
	    this._author = a;
	  };
	  LaTeX.prototype['date'] = function(d){
	    this._date = d;
	  };
	  LaTeX.prototype['and'] = function(){
	    return this.g.macro('quad');
	  };
	  LaTeX.prototype['thanks'] = LaTeX['footnote'];
	  for (i$ = 0, len$ = (ref$ = ['rm', 'sf', 'tt', 'md', 'bf', 'up', 'it', 'sl', 'sc', 'normal']).length; i$ < len$; ++i$) {
	    y$ = ref$[i$];
	    args['text' + y$] = ['H', 'X', 'g'];
	  }
	  LaTeX.prototype['textrm'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontFamily("rm");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textsf'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontFamily("sf");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['texttt'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontFamily("tt");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textmd'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontWeight("md");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textbf'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontWeight("bf");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textup'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontShape("up");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textit'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontShape("it");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textsl'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontShape("sl");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textsc'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontShape("sc");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  LaTeX.prototype['textnormal'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      this.g.setFontFamily("rm");
	      this.g.setFontWeight("md");
	      return this.g.setFontShape("up");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  args['emph'] = ['H', 'X', 'g'];
	  LaTeX.prototype['emph'] = function(arg){
	    if (arguments.length === 0) {
	      this.g.enterGroup();
	      return this.g.setFontShape("em");
	    } else {
	      arg = this.g.addAttributes(arg);
	      this.g.exitGroup();
	      return [arg];
	    }
	  };
	  for (i$ = 0, len$ = (ref$ = ['rm', 'sf', 'tt']).length; i$ < len$; ++i$) {
	    z$ = ref$[i$];
	    args[z$ + "family"] = ['HV'];
	  }
	  for (i$ = 0, len$ = (ref$ = ['md', 'bf']).length; i$ < len$; ++i$) {
	    z1$ = ref$[i$];
	    args[z1$ + "series"] = ['HV'];
	  }
	  for (i$ = 0, len$ = (ref$ = ['up', 'it', 'sl', 'sc']).length; i$ < len$; ++i$) {
	    z2$ = ref$[i$];
	    args[z2$ + "shape"] = ['HV'];
	  }
	  for (i$ = 0, len$ = (ref$ = ['normalfont', 'em']).length; i$ < len$; ++i$) {
	    z3$ = ref$[i$];
	    args[z3$] = ['HV'];
	  }
	  for (i$ = 0, len$ = (ref$ = ['tiny', 'scriptsize', 'footnotesize', 'small', 'normalsize', 'large', 'Large', 'LARGE', 'huge', 'Huge']).length; i$ < len$; ++i$) {
	    z4$ = ref$[i$];
	    args[z4$] = ['HV'];
	  }
	  LaTeX.prototype['rmfamily'] = function(){
	    this.g.setFontFamily("rm");
	  };
	  LaTeX.prototype['sffamily'] = function(){
	    this.g.setFontFamily("sf");
	  };
	  LaTeX.prototype['ttfamily'] = function(){
	    this.g.setFontFamily("tt");
	  };
	  LaTeX.prototype['mdseries'] = function(){
	    this.g.setFontWeight("md");
	  };
	  LaTeX.prototype['bfseries'] = function(){
	    this.g.setFontWeight("bf");
	  };
	  LaTeX.prototype['upshape'] = function(){
	    this.g.setFontShape("up");
	  };
	  LaTeX.prototype['itshape'] = function(){
	    this.g.setFontShape("it");
	  };
	  LaTeX.prototype['slshape'] = function(){
	    this.g.setFontShape("sl");
	  };
	  LaTeX.prototype['scshape'] = function(){
	    this.g.setFontShape("sc");
	  };
	  LaTeX.prototype['normalfont'] = function(){
	    this.g.setFontFamily("rm");
	    this.g.setFontWeight("md");
	    this.g.setFontShape("up");
	  };
	  for (i$ = 0, len$ = (ref$ = ['tiny', 'scriptsize', 'footnotesize', 'small', 'normalsize', 'large', 'Large', 'LARGE', 'huge', 'Huge']).length; i$ < len$; ++i$) {
	    z5$ = ref$[i$];
	    prototype[z5$] = fn$(z5$);
	  }
	  LaTeX.prototype['em'] = function(){
	    this.g.setFontShape("em");
	  };
	  LaTeX.prototype['theenumi'] = function(){
	    return [this.g.arabic(this.g.counter('enumi'))];
	  };
	  LaTeX.prototype['theenumii'] = function(){
	    return [this.g.alph(this.g.counter('enumii'))];
	  };
	  LaTeX.prototype['theenumiii'] = function(){
	    return [this.g.roman(this.g.counter('enumiii'))];
	  };
	  LaTeX.prototype['theenumiv'] = function(){
	    return [this.g.Alph(this.g.counter('enumiv'))];
	  };
	  LaTeX.prototype['labelenumi'] = function(){
	    return this.theenumi().concat(".");
	  };
	  LaTeX.prototype['labelenumii'] = function(){
	    return ["("].concat(arrayFrom$$1(this.theenumii()), [")"]);
	  };
	  LaTeX.prototype['labelenumiii'] = function(){
	    return this.theenumiii().concat(".");
	  };
	  LaTeX.prototype['labelenumiv'] = function(){
	    return this.theenumiv().concat(".");
	  };
	  LaTeX.prototype['p@enumii'] = function(){
	    return this.theenumi();
	  };
	  LaTeX.prototype['p@enumiii'] = function(){
	    return this.theenumi().concat("(", this.theenumii(), ")");
	  };
	  LaTeX.prototype['p@enumiv'] = function(){
	    return this["p@enumiii"]().concat(this.theenumiii());
	  };
	  LaTeX.prototype['labelitemi'] = function(){
	    return [this.g.symbol('textbullet')];
	  };
	  LaTeX.prototype['labelitemii'] = function(){
	    this.normalfont();
	    this.bfseries();
	    return [this.g.symbol('textendash')];
	  };
	  LaTeX.prototype['labelitemiii'] = function(){
	    return [this.g.symbol('textasteriskcentered')];
	  };
	  LaTeX.prototype['labelitemiv'] = function(){
	    return [this.g.symbol('textperiodcentered')];
	  };
	  z6$ = args;
	  z6$['centering'] = z6$['raggedright'] = z6$['raggedleft'] = ['HV'];
	  LaTeX.prototype['centering'] = function(){
	    this.g.setAlignment("centering");
	  };
	  LaTeX.prototype['raggedright'] = function(){
	    this.g.setAlignment("raggedright");
	  };
	  LaTeX.prototype['raggedleft'] = function(){
	    this.g.setAlignment("raggedleft");
	  };
	  z7$ = args;
	  z7$['center'] = z7$['flushleft'] = z7$['flushright'] = ['V'];
	  LaTeX.prototype['center'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.list, null, "center")];
	  };
	  LaTeX.prototype['endcenter'] = function(){
	    this.g.endlist();
	  };
	  LaTeX.prototype['flushleft'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.list, null, "flushleft")];
	  };
	  LaTeX.prototype['endflushleft'] = function(){
	    this.g.endlist();
	  };
	  LaTeX.prototype['flushright'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.list, null, "flushright")];
	  };
	  LaTeX.prototype['endflushright'] = function(){
	    this.g.endlist();
	  };
	  z8$ = args;
	  z8$['titlepage'] = ['V'];
	  LaTeX.prototype['titlepage'] = function(){
	    return [this.g.create(this.g.titlepage)];
	  };
	  z9$ = args;
	  z9$['quote'] = z9$['quotation'] = z9$['verse'] = ['V'];
	  LaTeX.prototype['quote'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.quote)];
	  };
	  LaTeX.prototype['endquote'] = function(){
	    this.g.endlist();
	  };
	  LaTeX.prototype['quotation'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.quotation)];
	  };
	  LaTeX.prototype['endquotation'] = function(){
	    this.g.endlist();
	  };
	  LaTeX.prototype['verse'] = function(){
	    this.g.startlist();
	    return [this.g.create(this.g.verse)];
	  };
	  LaTeX.prototype['endverse'] = function(){
	    this.g.endlist();
	  };
	  args['itemize'] = ['V', 'X', 'items'];
	  LaTeX.prototype['itemize'] = function(items){
	    var label, this$ = this;
	    if (arguments.length === 0) {
	      this.g.startlist();
	      this.g.stepCounter('@itemdepth');
	      if (this.g.counter('@itemdepth') > 4) {
	        this.g.error("too deeply nested");
	      }
	      return;
	    }
	    label = "labelitem" + this.g.roman(this.g.counter('@itemdepth'));
	    return [this.g.create(this.g.unorderedList, items.map(function(item){
	      var makelabel;
	      this$.g.enterGroup();
	      makelabel = this$.g.create(this$.g.itemlabel, this$['llap'](item.label !== null
	        ? item.label
	        : this$.g.macro(label)));
	      this$.g.exitGroup();
	      return this$.g.create(this$.g.listitem, [makelabel, item.text]);
	    }))];
	  };
	  LaTeX.prototype['enditemize'] = function(){
	    this.g.endlist();
	    this.g.setCounter('@itemdepth', this.g.counter('@itemdepth') - 1);
	  };
	  args['enumerate'] = ['V', 'X', 'enumitems'];
	  LaTeX.prototype['enumerate'] = function(items){
	    var itemCounter, this$ = this;
	    if (arguments.length === 0) {
	      this.g.startlist();
	      this.g.stepCounter('@enumdepth');
	      if (this.g.counter('@enumdepth') > 4) {
	        this.g.error("too deeply nested");
	      }
	      return;
	    }
	    itemCounter = "enum" + this.g.roman(this.g.counter('@enumdepth'));
	    this.g.setCounter(itemCounter, 0);
	    return [this.g.create(this.g.orderedList, items.map(function(item){
	      var label, makelabel;
	      label = this$.g.create(this$.g.inline, item.label.node);
	      if (item.label.id) {
	        label.id = item.label.id;
	      }
	      makelabel = this$.g.create(this$.g.itemlabel, this$['llap'](label));
	      return this$.g.create(this$.g.listitem, [makelabel, item.text]);
	    }))];
	  };
	  LaTeX.prototype['endenumerate'] = function(){
	    this.g.endlist();
	    this.g.setCounter('@enumdepth', this.g.counter('@enumdepth') - 1);
	  };
	  args['description'] = ['V', 'X', 'items'];
	  LaTeX.prototype['description'] = function(items){
	    var this$ = this;
	    if (arguments.length === 0) {
	      this.g.startlist();
	      return;
	    }
	    return [this.g.create(this.g.descriptionList, items.map(function(item){
	      var dt, dd;
	      dt = this$.g.create(this$.g.term, item.label);
	      dd = this$.g.create(this$.g.description, item.text);
	      return this$.g.createFragment([dt, dd]);
	    }))];
	  };
	  LaTeX.prototype['enddescription'] = function(){
	    this.g.endlist();
	  };
	  args['picture'] = ['H', 'v', 'v?', 'h'];
	  LaTeX.prototype['picture'] = function(size, offset, content){
	    return [this.g.createPicture(size, offset, content)];
	  };
	  args['hspace'] = ['H', 's', 'l'];
	  LaTeX.prototype['hspace'] = function(s, l){
	    return [this.g.createHSpace(l)];
	  };
	  args['label'] = ['HV', 'g'];
	  LaTeX.prototype['label'] = function(label){
	    this.g.setLabel(label.textContent);
	  };
	  args['ref'] = ['H', 'g'];
	  LaTeX.prototype['ref'] = function(label){
	    return [this.g.ref(label.textContent)];
	  };
	  z10$ = args;
	  z10$['llap'] = z10$['rlap'] = z10$['clap'] = z10$['smash'] = z10$['hphantom'] = z10$['vphantom'] = z10$['phantom'] = ['H', 'hg'];
	  LaTeX.prototype['llap'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "hbox llap")];
	  };
	  LaTeX.prototype['rlap'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "hbox rlap")];
	  };
	  LaTeX.prototype['clap'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "hbox clap")];
	  };
	  LaTeX.prototype['smash'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "hbox smash")];
	  };
	  LaTeX.prototype['hphantom'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "phantom hbox smash")];
	  };
	  LaTeX.prototype['vphantom'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "phantom hbox rlap")];
	  };
	  LaTeX.prototype['phantom'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "phantom hbox")];
	  };
	  args['underline'] = ['H', 'hg'];
	  LaTeX.prototype['underline'] = function(txt){
	    return [this.g.create(this.g.inline, txt, "hbox underline")];
	  };
	  args['mbox'] = ['H', 'hg'];
	  LaTeX.prototype['mbox'] = function(txt){
	    return this.makebox(undefined, undefined, undefined, txt);
	  };
	  args['makebox'] = ['H', 'v?', 'l?', 'i?', 'hg'];
	  LaTeX.prototype['makebox'] = function(vec, width, pos, txt){
	    if (vec) {
	      if (width && pos) {
	        this.g.error("expected \\makebox(width,height)[position]{text} but got two optional arguments!");
	      }
	      pos = width;
	      return [txt];
	    } else {
	      return this._box(width, pos, txt, "hbox");
	    }
	  };
	  args['fbox'] = ['H', 'hg'];
	  args['framebox'] = ['H', 'v?', 'l?', 'i?', 'hg'];
	  LaTeX.prototype['fbox'] = function(txt){
	    return this.framebox(undefined, undefined, undefined, txt);
	  };
	  LaTeX.prototype['framebox'] = function(vec, width, pos, txt){
	    if (vec) {
	      if (width && pos) {
	        return this.g.error("expected \\framebox(width,height)[position]{text} but got two optional arguments!");
	      }
	    } else {
	      if (txt.hasAttribute != null && !width && !pos && !this.g.hasAttribute(txt, "frame")) {
	        this.g.addAttribute(txt, "frame");
	        return [txt];
	      } else {
	        return this._box(width, pos, txt, "hbox frame");
	      }
	    }
	  };
	  LaTeX.prototype._box = function(width, pos, txt, classes){
	    var content, box;
	    if (width) {
	      if (!pos) {
	        pos = "c";
	      }
	      switch (pos) {
	      case "s":
	        classes += " stretch";
	        break;
	      case "c":
	        classes += " clap";
	        break;
	      case "l":
	        classes += " rlap";
	        break;
	      case "r":
	        classes += " llap";
	        break;
	      default:
	        this.g.error("unknown position: " + pos);
	      }
	    }
	    content = this.g.create(this.g.inline, txt);
	    box = this.g.create(this.g.inline, content, classes);
	    if (width) {
	      box.setAttribute("style", "width:" + width.value);
	    }
	    return [box];
	  };
	  args['parbox'] = ['H', 'i?', 'l?', 'i?', 'l', 'g'];
	  LaTeX.prototype['parbox'] = function(pos, height, innerPos, width, txt){
	    var classes, style, content, box;
	    if (!pos) {
	      pos = "c";
	    }
	    if (!innerPos) {
	      innerPos = pos;
	    }
	    classes = "parbox";
	    style = "width:" + width.value + ";";
	    if (height) {
	      classes += " pbh";
	      style += "height:" + height.value + ";";
	    }
	    switch (pos) {
	    case "c":
	      classes += " p-c";
	      break;
	    case "t":
	      classes += " p-t";
	      break;
	    case "b":
	      classes += " p-b";
	      break;
	    default:
	      this.g.error("unknown position: " + pos);
	    }
	    switch (innerPos) {
	    case "s":
	      classes += " stretch";
	      break;
	    case "c":
	      classes += " p-cc";
	      break;
	    case "t":
	      classes += " p-ct";
	      break;
	    case "b":
	      classes += " p-cb";
	      break;
	    default:
	      this.g.error("unknown inner-pos: " + innerPos);
	    }
	    content = this.g.create(this.g.inline, txt);
	    box = this.g.create(this.g.inline, content, classes);
	    box.setAttribute("style", style);
	    return [box];
	  };
	  z11$ = args;
	  z11$['thicklines'] = ['HV'];
	  z11$['thinlines'] = ['HV'];
	  z11$['linethickness'] = ['HV', 'l'];
	  z11$['arrowlength'] = ['HV', 'l'];
	  LaTeX.prototype['thinlines'] = function(){
	    this.g.setLength('@wholewidth', new this.g.Length(0.4, "pt"));
	  };
	  LaTeX.prototype['thicklines'] = function(){
	    this.g.setLength('@wholewidth', new this.g.Length(0.8, "pt"));
	  };
	  LaTeX.prototype['linethickness'] = function(l){
	    if (l.unit !== "sp") {
	      this.g.error("relative units for \\linethickness not supported!");
	    }
	    this.g.setLength('@wholewidth', l);
	  };
	  LaTeX.prototype['arrowlength'] = function(l){
	    this.g.setLength('@arrowlength', l);
	  };
	  LaTeX.prototype['maxovalrad'] = function(){
	    return "20pt";
	  };
	  LaTeX.prototype['qbeziermax'] = function(){
	    return 500;
	  };
	  args['dashbox'] = ['H', 'cl', 'v', 'i?', 'g'];
	  args['frame'] = ['H', 'hg'];
	  LaTeX.prototype['frame'] = function(txt){
	    var el, w;
	    el = this.g.create(this.g.inline, txt, "hbox pframe");
	    w = this.g.length('@wholewidth');
	    el.setAttribute("style", "border-width:" + w.value);
	    return [el];
	  };
	  args['put'] = ['H', 'v', 'g', 'is'];
	  LaTeX.prototype['put'] = function(v, obj){
	    var wrapper, strut;
	    wrapper = this.g.create(this.g.inline, obj, "put-obj");
	    if (v.y.cmp(this.g.Length.zero) >= 0) {
	      wrapper.setAttribute("style", "left:" + v.x.value);
	      if (v.y.cmp(this.g.Length.zero) > 0) {
	        strut = this.g.create(this.g.inline, undefined, "strut");
	        strut.setAttribute("style", "height:" + v.y.value);
	      }
	    } else {
	      wrapper.setAttribute("style", "left:" + v.x.value + ";bottom:" + v.y.value);
	    }
	    return this.rlap(this.g.create(this.g.inline, [wrapper, strut], "picture"));
	  };
	  args['multiput'] = ['H', 'v', 'v', 'n', 'g'];
	  LaTeX.prototype['multiput'] = function(v, dv, n, obj){
	    var res, i$, i;
	    res = [];
	    for (i$ = 0; i$ < n; ++i$) {
	      i = i$;
	      res = res.concat(this['put'](v.add(dv.mul(i)), obj.cloneNode(true)));
	    }
	    return res;
	  };
	  args['qbezier'] = ['H', 'n?', 'v', 'v', 'v'];
	  LaTeX.prototype['qbezier'] = function(N, v1, v, v2){
	    return [this._path("M" + v1.x.pxpct + "," + v1.y.pxpct + " Q" + v.x.pxpct + "," + v.y.pxpct + " " + v2.x.pxpct + "," + v2.y.pxpct, N)];
	  };
	  args['cbezier'] = ['H', 'n?', 'v', 'v', 'v', 'v'];
	  LaTeX.prototype['cbezier'] = function(N, v1, v, v2, v3){
	    return [this._path("M" + v1.x.pxpct + "," + v1.y.pxpct + " C" + v.x.pxpct + "," + v.y.pxpct + " " + v2.x.pxpct + "," + v2.y.pxpct + " " + v3.x.pxpct + "," + v3.y.pxpct, N)];
	  };
	  LaTeX.prototype._path = function(p, N){
	    var linethickness, svg, draw, path, pw, lenSection, bbox;
	    linethickness = this.g.length('@wholewidth');
	    svg = this.g.create(this.g.inline, undefined, "picture-object");
	    draw = this.g.SVG().addTo(svg);
	    path = draw.path(p).stroke({
	      color: "#000",
	      width: linethickness.value
	    }).fill('none');
	    if (N > 0) {
	      N = Math.min(N, this['qbeziermax']() - 1);
	      pw = linethickness.px;
	      lenSection = (path.length() - (N + 1) * pw) / N;
	      if (lenSection > 0) {
	        path.stroke({
	          dasharray: pw + " " + this.g.round(lenSection)
	        });
	      }
	    }
	    bbox = path.bbox();
	    bbox.x -= linethickness.px;
	    bbox.y -= linethickness.px;
	    bbox.width += linethickness.px * 2;
	    bbox.height += linethickness.px * 2;
	    svg.setAttribute("style", "left:" + this.g.round(bbox.x) + "px;bottom:" + this.g.round(bbox.y) + "px");
	    draw.size(this.g.round(bbox.width) + "px", this.g.round(bbox.height) + "px").viewbox(this.g.round(bbox.x), this.g.round(bbox.y), this.g.round(bbox.width), this.g.round(bbox.height));
	    draw.flip('y', 0);
	    return this.g.create(this.g.inline, svg, "picture");
	  };
	  args['circle'] = ['H', 's', 'cl'];
	  LaTeX.prototype['circle'] = function(s, d){
	    var svg, linethickness, draw, offset;
	    d = d.abs();
	    svg = this.g.create(this.g.inline, undefined, "picture-object");
	    linethickness = this.g.length('@wholewidth');
	    draw = this.g.SVG().addTo(svg);
	    if (s) {
	      offset = d.div(2).mul(-1).value;
	      draw.size(d.value, d.value).stroke({
	        color: "#000",
	        width: "0"
	      }).circle(d.value).cx(d.div(2).value).cy(d.div(2).value).fill("");
	    } else {
	      offset = d.div(2).add(linethickness).mul(-1).value;
	      draw.size(d.add(linethickness.mul(2)).value, d.add(linethickness.mul(2)).value).stroke({
	        color: "#000",
	        width: linethickness.value
	      }).circle(d.value).cx(d.div(2).add(linethickness).value).cy(d.div(2).add(linethickness).value).fill("none");
	    }
	    svg.setAttribute("style", "left:" + offset + ";bottom:" + offset);
	    draw.flip('y', 0);
	    return [this.g.create(this.g.inline, svg, "picture")];
	  };
	  args['line'] = ['H', 'v', 'cl'];
	  LaTeX.prototype['line'] = function(v, l){
	    return [this._line.apply(this, this._slopeLengthToCoords(v, l))];
	  };
	  args['vector'] = ['H', 'v', 'cl'];
	  LaTeX.prototype['vector'] = function(v, l){
	    return [this._vector.apply(this, this._slopeLengthToCoords(v, l))];
	  };
	  args['Line'] = ['H', 'v', 'v'];
	  LaTeX.prototype['Line'] = function(vs, ve){
	    return [this._line(vs, ve)];
	  };
	  args['Vector'] = ['H', 'v', 'v'];
	  LaTeX.prototype['Vector'] = function(vs, ve){
	    return [this._vector(vs, ve)];
	  };
	  LaTeX.prototype._slopeLengthToCoords = function(v, l){
	    var ref$, zero, x, y;
	    if (v.x.value === (ref$ = v.y.value) && ref$ === 0) {
	      this.g.error("illegal slope (0,0)");
	    }
	    if (v.x.unit !== v.y.unit || v.x.unit !== "sp") {
	      this.g.error("relative units not allowed for slope");
	    }
	    this.g.length('@wholewidth');
	    zero = new this.g.Length(0, l.unit);
	    if (v.x.px === 0) {
	      x = zero;
	      y = l;
	    } else {
	      x = l;
	      y = x.mul(Math.abs(v.y.ratio(v.x)));
	    }
	    if (v.x.cmp(zero) < 0) {
	      x = x.mul(-1);
	    }
	    if (v.y.cmp(zero) < 0) {
	      y = y.mul(-1);
	    }
	    return [new export$$f(zero, zero), new export$$f(x, y)];
	  };
	  LaTeX.prototype._line = function(vs, ve){
	    var svg, draw, linethickness, bbox;
	    if (vs.x.unit !== vs.y.unit || vs.x.unit !== "sp") {
	      this.g.error("relative units not allowed for line");
	    }
	    if (ve.x.unit !== ve.y.unit || ve.x.unit !== "sp") {
	      this.g.error("relative units not allowed for line");
	    }
	    svg = this.g.create(this.g.inline, undefined, "picture-object");
	    draw = this.g.SVG().addTo(svg);
	    linethickness = this.g.length('@wholewidth');
	    bbox = draw.line(vs.x.px, vs.y.px, ve.x.px, ve.y.px).stroke({
	      color: "#000",
	      width: linethickness.value
	    }).bbox();
	    bbox.x -= linethickness.px;
	    bbox.y -= linethickness.px;
	    bbox.width += linethickness.px * 2;
	    bbox.height += linethickness.px * 2;
	    if (bbox.x > 0 || bbox.y > 0) {
	      console.error("line: bbox.x/y > 0!!", bbox.x, bbox.y);
	    }
	    svg.setAttribute("style", "left:" + this.g.round(bbox.x) + "px;bottom:" + this.g.round(bbox.y) + "px");
	    draw.size(this.g.round(bbox.width) + "px", this.g.round(bbox.height) + "px").viewbox(this.g.round(bbox.x), this.g.round(bbox.y), this.g.round(bbox.width), this.g.round(bbox.height));
	    draw.flip('y', 0);
	    return this.g.create(this.g.inline, svg, "picture");
	  };
	  LaTeX.prototype._vector = function(vs, ve){
	    var linethickness, svg, draw, hl, hw, max, hhl, al, s, bbox, this$ = this;
	    if (vs.x.unit !== vs.y.unit || vs.x.unit !== "sp") {
	      this.g.error("relative units not allowed for vector");
	    }
	    if (ve.x.unit !== ve.y.unit || ve.x.unit !== "sp") {
	      this.g.error("relative units not allowed for vector");
	    }
	    linethickness = this.g.length('@wholewidth');
	    svg = this.g.create(this.g.inline, undefined, "picture-object");
	    draw = this.g.SVG();
	    hl = 6.5;
	    hw = 3.9;
	    max = new this.g.Length(0.6, "pt");
	    if (linethickness.cmp(max) < 0) {
	      hl = this.g.round(hl * max.ratio(linethickness));
	      hw = this.g.round(hw * max.ratio(linethickness));
	    }
	    hhl = linethickness.mul(hl / 2);
	    al = ve.sub(vs).norm();
	    if (al.cmp(hhl) < 0) {
	      s = ve.shift_start(hhl);
	    } else {
	      s = new export$$f(this.g.Length.zero, this.g.Length.zero);
	    }
	    ve = ve.shift_end(hhl.mul(-1));
	    bbox = draw.line(s.x.px, s.y.px, ve.x.px, ve.y.px).stroke({
	      color: "#000",
	      width: linethickness.value
	    }).marker('end', hl, hw, function(marker){
	      return marker.path("M0,0 Q" + this$.g.round(2 * hl / 3) + "," + this$.g.round(hw / 2) + " " + hl + "," + this$.g.round(hw / 2) + " Q" + this$.g.round(2 * hl / 3) + "," + this$.g.round(hw / 2) + " 0," + hw + " z");
	    }).bbox();
	    bbox.x -= linethickness.px + hhl.px;
	    bbox.y -= linethickness.px + hhl.px;
	    bbox.width += linethickness.px + hhl.px * 2;
	    bbox.height += linethickness.px + hhl.px * 2;
	    if (bbox.x > 0 || bbox.y > 0) {
	      console.error("vector: bbox.x/y > 0!!", bbox.x, bbox.y);
	    }
	    svg.setAttribute("style", "left:" + this.g.round(bbox.x) + "px;bottom:" + this.g.round(bbox.y) + "px");
	    draw.size(this.g.round(bbox.width) + "px", this.g.round(bbox.height) + "px").viewbox(this.g.round(bbox.x), this.g.round(bbox.y), this.g.round(bbox.width), this.g.round(bbox.height));
	    draw.flip('y', 0);
	    draw.addTo(svg);
	    return this.g.create(this.g.inline, svg, "picture");
	  };
	  args['oval'] = ['H', 'cl?', 'v', 'i?'];
	  LaTeX.prototype['oval'] = function(maxrad, size, part){
	    var linethickness, rad, draw, oval, rect, bbox, clip, svg;
	    linethickness = this.g.length('@wholewidth');
	    if (!maxrad) {
	      maxrad = new this.g.Length(20, "px");
	    }
	    if (!part) {
	      part = "";
	    }
	    if (size.x.cmp(size.y) < 0) {
	      rad = size.x.div(2);
	    } else {
	      rad = size.y.div(2);
	    }
	    if (maxrad.cmp(rad) < 0) {
	      rad = maxrad;
	    }
	    draw = this.g.SVG();
	    oval = draw.rect(size.x.value, size.y.value).radius(rad.value).move(size.x.div(-2).value, size.y.div(-2).value).stroke({
	      color: "#000",
	      width: linethickness.value
	    }).fill("none");
	    rect = {
	      x: size.x.div(-2).sub(linethickness),
	      y: size.y.div(-2).sub(linethickness),
	      w: size.x.add(linethickness.mul(2)),
	      h: size.y.add(linethickness.mul(2))
	    };
	    if (part.includes('l')) {
	      rect = this._intersect(rect, {
	        x: size.x.div(-2).sub(linethickness),
	        y: size.y.div(-2).sub(linethickness),
	        w: size.x.div(2).add(linethickness),
	        h: size.y.add(linethickness.mul(2))
	      });
	    }
	    if (part.includes('t')) {
	      rect = this._intersect(rect, {
	        x: size.x.div(-2).sub(linethickness),
	        y: size.y.div(-2).sub(linethickness),
	        w: size.x.add(linethickness.mul(2)),
	        h: size.y.div(2).add(linethickness)
	      });
	    }
	    if (part.includes('r')) {
	      rect = this._intersect(rect, {
	        x: this.g.Length.zero,
	        y: size.y.div(-2).sub(linethickness),
	        w: size.x.div(2).add(linethickness),
	        h: size.y.add(linethickness.mul(2))
	      });
	    }
	    if (part.includes('b')) {
	      rect = this._intersect(rect, {
	        x: size.x.div(-2).sub(linethickness),
	        y: this.g.Length.zero,
	        w: size.x.add(linethickness.mul(2)),
	        h: size.y.div(2).add(linethickness)
	      });
	    }
	    bbox = oval.bbox();
	    bbox.x -= linethickness.px;
	    bbox.y -= linethickness.px;
	    bbox.width += linethickness.px * 2;
	    bbox.height += linethickness.px * 2;
	    if (bbox.x > 0 || bbox.y > 0) {
	      console.error("oval: bbox.x/y > 0!!", bbox.x, bbox.y);
	    }
	    clip = draw.clip().add(draw.rect(rect.w.value, rect.h.value).move(rect.x.value, rect.y.value));
	    clip.flip('y', 0);
	    oval.clipWith(clip);
	    svg = this.g.create(this.g.inline, undefined, "picture-object");
	    svg.setAttribute("style", "left:" + this.g.round(bbox.x) + "px;bottom:" + this.g.round(bbox.y) + "px");
	    draw.size(this.g.round(bbox.width) + "px", this.g.round(bbox.height) + "px").viewbox(this.g.round(bbox.x), this.g.round(bbox.y), this.g.round(bbox.width), this.g.round(bbox.height));
	    draw.flip('y', 0);
	    draw.addTo(svg);
	    return [this.g.create(this.g.inline, svg, "picture")];
	  };
	  LaTeX.prototype._intersect = function(r1, r2){
	    return {
	      x: this.g.Length.max(r1.x, r2.x),
	      y: this.g.Length.max(r1.y, r2.y),
	      w: this.g.Length.max(this.g.Length.zero, this.g.Length.min(r1.x.add(r1.w), r2.x.add(r2.w)).sub(this.g.Length.max(r1.x, r2.x))),
	      h: this.g.Length.max(this.g.Length.zero, this.g.Length.min(r1.y.add(r1.h), r2.y.add(r2.h)).sub(this.g.Length.max(r1.y, r2.y)))
	    };
	  };
	  args['newlength'] = ['HV', 'm'];
	  LaTeX.prototype['newlength'] = function(id){
	    this.g.newLength(id);
	  };
	  args['setlength'] = ['HV', 'm', 'l'];
	  LaTeX.prototype['setlength'] = function(id, l){
	    this.g.setLength(id, l);
	  };
	  args['addtolength'] = ['HV', 'm', 'l'];
	  LaTeX.prototype['addtolength'] = function(id, l){
	    this.g.setLength(id, this.g.length(id).add(l));
	  };
	  args['newcounter'] = ['HV', 'i', 'i?'];
	  LaTeX.prototype['newcounter'] = function(c, p){
	    this.g.newCounter(c, p);
	  };
	  args['stepcounter'] = ['HV', 'i'];
	  LaTeX.prototype['stepcounter'] = function(c){
	    this.g.stepCounter(c);
	  };
	  args['addtocounter'] = ['HV', 'i', 'n'];
	  LaTeX.prototype['addtocounter'] = function(c, n){
	    this.g.setCounter(c, this.g.counter(c) + n);
	  };
	  args['setcounter'] = ['HV', 'i', 'n'];
	  LaTeX.prototype['setcounter'] = function(c, n){
	    this.g.setCounter(c, n);
	  };
	  args['refstepcounter'] = ['H', 'i'];
	  LaTeX.prototype['refstepcounter'] = function(c){
	    this.g.stepCounter(c);
	    return [this.g.refCounter(c)];
	  };
	  z12$ = args;
	  z12$['alph'] = z12$['Alph'] = z12$['arabic'] = z12$['roman'] = z12$['Roman'] = z12$['fnsymbol'] = ['H', 'i'];
	  LaTeX.prototype['alph'] = function(c){
	    return [this.g['alph'](this.g.counter(c))];
	  };
	  LaTeX.prototype['Alph'] = function(c){
	    return [this.g['Alph'](this.g.counter(c))];
	  };
	  LaTeX.prototype['arabic'] = function(c){
	    return [this.g['arabic'](this.g.counter(c))];
	  };
	  LaTeX.prototype['roman'] = function(c){
	    return [this.g['roman'](this.g.counter(c))];
	  };
	  LaTeX.prototype['Roman'] = function(c){
	    return [this.g['Roman'](this.g.counter(c))];
	  };
	  LaTeX.prototype['fnsymbol'] = function(c){
	    return [this.g['fnsymbol'](this.g.counter(c))];
	  };
	  args['input'] = ['V', 'g'];
	  LaTeX.prototype['input'] = function(file){};
	  args['include'] = ['V', 'g'];
	  LaTeX.prototype['include'] = function(file){};
	  args['documentclass'] = ['P', 'kv?', 'k', 'k?'];
	  LaTeX.prototype['documentclass'] = function(options, documentclass, version){
	    var Class, Export, e;
	    this['documentclass'] = function(){
	      this.g.error("Two \\documentclass commands. The document may only declare one class.");
	    };
	    Class = builtinDocumentclasses[documentclass];
	    if (!Class) {
	      try {
	        Export = require("./documentclasses/" + documentclass);
	        Class = Export['default'] || Export[Object.getOwnPropertyNames(Export)[0]];
	      } catch (e$) {
	        e = e$;
	        console.error("error loading documentclass \"" + documentclass + "\": " + e);
	        throw new Error("error loading documentclass \"" + documentclass + "\"");
	      }
	    }
	    this.g.documentClass = new Class(this.g, options);
	    assignIn$1(this, this.g.documentClass);
	    assign$1(args, Class.args);
	  };
	  args['usepackage'] = ['P', 'kv?', 'csv', 'k?'];
	  LaTeX.prototype['usepackage'] = function(opts, packages, version){
	    var options, i$, len$, pkg, Package, Export, ref$, e;
	    options = Object.assign({}, this.g.documentClass.options, opts);
	    for (i$ = 0, len$ = packages.length; i$ < len$; ++i$) {
	      pkg = packages[i$];
	      if (providedPackages.includes(pkg)) {
	        continue;
	      }
	      Package = builtinPackages[pkg];
	      try {
	        if (!Package) {
	          Export = require("./packages/" + pkg);
	          Package = Export['default'] || Export[Object.getOwnPropertyNames(Export)[0]];
	        }
	        assignIn$1(this, new Package(this.g, options));
	        assign$1(args, Package.args);
	        if ((ref$ = Package.symbols) != null) {
	          ref$.forEach(fn$);
	        }
	      } catch (e$) {
	        e = e$;
	        console.error("error loading package \"" + pkg + "\": " + e);
	      }
	    }
	    function fn$(value, key){
	      return symbols$1.set(key, value);
	    }
	  };
	  args['includeonly'] = ['P', 'csv'];
	  LaTeX.prototype['includeonly'] = function(filelist){};
	  args['makeatletter'] = ['P'];
	  LaTeX.prototype['makeatletter'] = function(){};
	  args['makeatother'] = ['P'];
	  LaTeX.prototype['makeatother'] = function(){};
	  z13$ = args;
	  z13$['pagestyle'] = ['HV', 'i'];
	  LaTeX.prototype['pagestyle'] = function(s){};
	  z14$ = args;
	  z14$['linebreak'] = ['HV', 'n?'];
	  z14$['nolinebreak'] = ['HV', 'n?'];
	  z14$['fussy'] = ['HV'];
	  z14$['sloppy'] = ['HV'];
	  LaTeX.prototype['linebreak'] = function(o){};
	  LaTeX.prototype['nolinebreak'] = function(o){};
	  LaTeX.prototype['fussy'] = function(){};
	  LaTeX.prototype['sloppy'] = function(){};
	  z15$ = args;
	  z15$['pagebreak'] = ['HV', 'n?'];
	  z15$['nopagebreak'] = ['HV', 'n?'];
	  z15$['samepage'] = ['HV'];
	  z15$['enlargethispage'] = ['HV', 's', 'l'];
	  z15$['newpage'] = ['HV'];
	  z15$['clearpage'] = ['HV'];
	  z15$['cleardoublepage'] = ['HV'];
	  z15$['vfill'] = ['HV'];
	  z15$['thispagestyle'] = ['HV', 'i'];
	  LaTeX.prototype['pagebreak'] = function(o){};
	  LaTeX.prototype['nopagebreak'] = function(o){};
	  LaTeX.prototype['samepage'] = function(){};
	  LaTeX.prototype['enlargethispage'] = function(s, l){};
	  LaTeX.prototype['newpage'] = function(){};
	  LaTeX.prototype['clearpage'] = function(){};
	  LaTeX.prototype['cleardoublepage'] = function(){};
	  LaTeX.prototype['vfill'] = function(){};
	  LaTeX.prototype['thispagestyle'] = function(s){};
	  return LaTeX;
	  function fn$(f){
	    return function(){
	      return this.g.setFontSize(f);
	    };
	  }
	}());

	exports.Generator = void 0;
	var Macros, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
	Macros = export$;
	Object.defineProperty(Array.prototype, 'top', {
	  enumerable: false,
	  configurable: true,
	  get: function(){
	    return this[this.length - 1];
	  },
	  set: function(v){
	    this[this.length - 1] = v;
	  }
	});
	exports.Generator = (function(){
	  Generator.displayName = 'Generator';
	  var error, _roman; Generator.prototype;
	  Generator.prototype.documentClass = null;
	  Generator.prototype.documentTitle = null;
	  Generator.prototype._options = null;
	  Generator.prototype._macros = null;
	  Generator.prototype._stack = null;
	  Generator.prototype._groups = null;
	  Generator.prototype._continue = false;
	  Generator.prototype._labels = null;
	  Generator.prototype._refs = null;
	  Generator.prototype._counters = null;
	  Generator.prototype._resets = null;
	  Generator.prototype._marginpars = null;
	  Generator.prototype.Length = null;
	  Generator.prototype.reset = function(){
	    this.Length = makeLengthClass(this);
	    this.documentClass = this._options.documentClass;
	    this.documentTitle = "untitled";
	    this._uid = 1;
	    this._macros = {};
	    this._curArgs = [];
	    this._stack = [{
	      attrs: {},
	      align: null,
	      currentlabel: {
	        id: "",
	        label: document.createTextNode("")
	      },
	      lengths: new Map()
	    }];
	    this._groups = [0];
	    this._labels = new Map();
	    this._refs = new Map();
	    this._marginpars = [];
	    this._counters = new Map();
	    this._resets = new Map();
	    this._continue = false;
	    this.newCounter('enumi');
	    this.newCounter('enumii');
	    this.newCounter('enumiii');
	    this.newCounter('enumiv');
	    this._macros = new Macros(this, this._options.CustomMacros);
	  };
	  Generator.prototype.nextId = function(){
	    return this._uid++;
	  };
	  Generator.prototype.round = function(num){
	    var factor;
	    factor = Math.pow(10, this._options.precision);
	    return Math.round(num * factor) / factor;
	  };
	  error = function(e){
	    console.error(e);
	    throw new Error(e);
	  };
	  Generator.prototype.error = function(e){
	    error(e);
	  };
	  Generator.prototype.setErrorFn = function(e){
	    error = e;
	  };
	  Generator.prototype.location = function(){
	    error("location function not set!");
	  };
	  Generator.prototype.setTitle = function(title){
	    return this.documentTitle = title.textContent;
	  };
	  Generator.prototype.hasSymbol = function(name){
	    return Macros.symbols.has(name);
	  };
	  Generator.prototype.symbol = function(name){
	    if (!this.hasSymbol(name)) {
	      this.error("no such symbol: " + name);
	    }
	    return Macros.symbols.get(name);
	  };
	  Generator.prototype.hasMacro = function(name){
	    return typeof this._macros[name] === "function" && !deepEq$(name, "constructor", '===') && (this._macros.hasOwnProperty(name) || Macros.prototype.hasOwnProperty(name));
	  };
	  Generator.prototype.isHmode = function(marco){
	    var ref$;
	    return ((ref$ = Macros.args[marco]) != null ? ref$[0] : void 8) === 'H' || !Macros.args[marco];
	  };
	  Generator.prototype.isVmode = function(marco){
	    var ref$;
	    return ((ref$ = Macros.args[marco]) != null ? ref$[0] : void 8) === 'V';
	  };
	  Generator.prototype.isHVmode = function(marco){
	    var ref$;
	    return ((ref$ = Macros.args[marco]) != null ? ref$[0] : void 8) === 'HV';
	  };
	  Generator.prototype.isPreamble = function(marco){
	    var ref$;
	    return ((ref$ = Macros.args[marco]) != null ? ref$[0] : void 8) === 'P';
	  };
	  Generator.prototype.macro = function(name, args){
	    var ref$, this$ = this;
	    if (symbols$1.has(name)) {
	      return [this.createText(symbols$1.get(name))];
	    }
	    return (ref$ = this._macros[name].apply(this._macros, args)) != null ? ref$.filter(function(x){
	      return x != undefined;
	    }).map(function(x){
	      if (typeof x === 'string' || x instanceof String) {
	        return this$.createText(x);
	      } else {
	        return this$.addAttributes(x);
	      }
	    }) : void 8;
	  };
	  Generator.prototype.beginArgs = function(macro){
	    var that;
	    this._curArgs.push((that = Macros.args[macro])
	      ? {
	        name: macro,
	        args: that.slice(1),
	        parsed: []
	      }
	      : {
	        args: [],
	        parsed: []
	      });
	  };
	  Generator.prototype.selectArgsBranch = function(nextChar){
	    var optArgs, branches, i$, len$, b, ref$;
	    optArgs = ['o?', 'i?', 'k?', 'kv?', 'n?', 'l?', 'c-ml?', 'cl?'];
	    if (Array.isArray(this._curArgs.top.args[0])) {
	      branches = this._curArgs.top.args[0];
	      for (i$ = 0, len$ = branches.length; i$ < len$; ++i$) {
	        b = branches[i$];
	        if ((nextChar === '[' && in$(b[0], optArgs)) || (nextChar === '{' && !in$(b[0], optArgs))) {
	          this._curArgs.top.args.shift();
	          (ref$ = this._curArgs.top.args).unshift.apply(ref$, b);
	          return true;
	        }
	      }
	    }
	  };
	  Generator.prototype.nextArg = function(arg){
	    if (this._curArgs.top.args[0] === arg) {
	      this._curArgs.top.args.shift();
	      return true;
	    }
	  };
	  Generator.prototype.argError = function(m){
	    return error("macro \\" + this._curArgs.top.name + ": " + m);
	  };
	  Generator.prototype.addParsedArg = function(a){
	    this._curArgs.top.parsed.push(a);
	  };
	  Generator.prototype.parsedArgs = function(){
	    return this._curArgs.top.parsed;
	  };
	  Generator.prototype.preExecMacro = function(){
	    this.macro(this._curArgs.top.name, this.parsedArgs());
	  };
	  Generator.prototype.endArgs = function(){
	    var x$;
	    x$ = this._curArgs.pop();
	    x$.args.length === 0 || error("grammar error: arguments for " + x$.name + " have not been parsed: " + x$.args);
	    return x$.parsed;
	  };
	  Generator.prototype.begin = function(env_id){
	    if (!this.hasMacro(env_id)) {
	      error("unknown environment: " + env_id);
	    }
	    this.startBalanced();
	    this.enterGroup();
	    this.beginArgs(env_id);
	  };
	  Generator.prototype.end = function(id, end_id){
	    var end;
	    if (id !== end_id) {
	      error("environment '" + id + "' is missing its end, found '" + end_id + "' instead");
	    }
	    if (this.hasMacro("end" + id)) {
	      end = this.macro("end" + id);
	    }
	    this.exitGroup();
	    this.isBalanced() || error(id + ": groups need to be balanced in environments!");
	    this.endBalanced();
	    return end;
	  };
	  Generator.prototype.enterGroup = function(copyAttrs){
	    copyAttrs == null && (copyAttrs = false);
	    this._stack.push({
	      attrs: copyAttrs
	        ? Object.assign({}, this._stack.top.attrs)
	        : {},
	      align: null,
	      currentlabel: Object.assign({}, this._stack.top.currentlabel),
	      lengths: new Map(this._stack.top.lengths)
	    });
	    ++this._groups.top;
	  };
	  Generator.prototype.exitGroup = function(){
	    --this._groups.top >= 0 || error("there is no group to end here");
	    this._stack.pop();
	  };
	  Generator.prototype.startBalanced = function(){
	    this._groups.push(0);
	  };
	  Generator.prototype.endBalanced = function(){
	    this._groups.pop();
	    return this._groups.length;
	  };
	  Generator.prototype.isBalanced = function(){
	    return this._groups.top === 0;
	  };
	  Generator.prototype['continue'] = function(){
	    this._continue = this.location().end.offset;
	  };
	  Generator.prototype['break'] = function(){
	    if (this.location().end.offset > this._continue) {
	      this._continue = false;
	    }
	  };
	  Generator.prototype.setAlignment = function(align){
	    this._stack.top.align = align;
	  };
	  Generator.prototype.alignment = function(){
	    return this._stack.top.align;
	  };
	  Generator.prototype.setFontFamily = function(family){
	    this._stack.top.attrs.fontFamily = family;
	  };
	  Generator.prototype.setFontWeight = function(weight){
	    this._stack.top.attrs.fontWeight = weight;
	  };
	  Generator.prototype.setFontShape = function(shape){
	    if (shape === "em") {
	      if (this._activeAttributeValue("fontShape") === "it") {
	        shape = "up";
	      } else {
	        shape = "it";
	      }
	    }
	    this._stack.top.attrs.fontShape = shape;
	  };
	  Generator.prototype.setFontSize = function(size){
	    this._stack.top.attrs.fontSize = size;
	  };
	  Generator.prototype.setTextDecoration = function(decoration){
	    this._stack.top.attrs.textDecoration = decoration;
	  };
	  Generator.prototype._inlineAttributes = function(){
	    var cur;
	    cur = this._stack.top.attrs;
	    return [cur.fontFamily, cur.fontWeight, cur.fontShape, cur.fontSize, cur.textDecoration].join(' ').replace(/\s+/g, ' ').trim();
	  };
	  Generator.prototype._activeAttributeValue = function(attr){
	    var i$, level, that;
	    for (i$ = this._stack.length - 1; i$ >= 0; --i$) {
	      level = i$;
	      if (that = this._stack[level].attrs[attr]) {
	        return that;
	      }
	    }
	  };
	  Generator.prototype.startsection = function(sec, level, star, toc, ttl){
	    var chaphead, el, ref$;
	    if (toc == ttl && ttl == undefined) {
	      if (!star && this.counter("secnumdepth") >= level) {
	        this.stepCounter(sec);
	        this.refCounter(sec, "sec-" + this.nextId());
	      }
	      return;
	    }
	    if (!star && this.counter("secnumdepth") >= level) {
	      if (sec === 'chapter') {
	        chaphead = this.create(this.block, this.macro('chaptername').concat(this.createText(this.symbol('space')), this.macro('the' + sec)));
	        el = this.create(this[sec], [chaphead, ttl]);
	      } else {
	        el = this.create(this[sec], this.macro('the' + sec).concat(this.createText(this.symbol('quad')), ttl));
	      }
	      if ((ref$ = this._stack.top.currentlabel.id) != null) {
	        el.id = ref$;
	      }
	    } else {
	      el = this.create(this[sec], ttl);
	    }
	    return el;
	  };
	  Generator.prototype.startlist = function(){
	    this.stepCounter('@listdepth');
	    if (this.counter('@listdepth') > 6) {
	      error("too deeply nested");
	    }
	    return true;
	  };
	  Generator.prototype.endlist = function(){
	    this.setCounter('@listdepth', this.counter('@listdepth') - 1);
	    this['continue']();
	  };
	  Generator.prototype.newLength = function(l){
	    if (this.hasLength(l)) {
	      error("length " + l + " already defined!");
	    }
	    this._stack.top.lengths.set(l, this.Length.zero);
	  };
	  Generator.prototype.hasLength = function(l){
	    return this._stack.top.lengths.has(l);
	  };
	  Generator.prototype.setLength = function(id, length){
	    if (!this.hasLength(id)) {
	      error("no such length: " + id);
	    }
	    this._stack.top.lengths.set(id, length);
	  };
	  Generator.prototype.length = function(l){
	    if (!this.hasLength(l)) {
	      error("no such length: " + l);
	    }
	    return this._stack.top.lengths.get(l);
	  };
	  Generator.prototype.theLength = function(id){
	    var l;
	    l = this.create(this.inline, undefined, "the");
	    l.setAttribute("display-var", id);
	    return l;
	  };
	  Generator.prototype.newCounter = function(c, parent){
	    if (this.hasCounter(c)) {
	      error("counter " + c + " already defined!");
	    }
	    this._counters.set(c, 0);
	    this._resets.set(c, []);
	    if (parent) {
	      this.addToReset(c, parent);
	    }
	    if (this.hasMacro('the' + c)) {
	      error("macro \\the" + c + " already defined!");
	    }
	    this._macros['the' + c] = function(){
	      return [this.g.arabic(this.g.counter(c))];
	    };
	  };
	  Generator.prototype.hasCounter = function(c){
	    return this._counters.has(c);
	  };
	  Generator.prototype.setCounter = function(c, v){
	    if (!this.hasCounter(c)) {
	      error("no such counter: " + c);
	    }
	    this._counters.set(c, v);
	  };
	  Generator.prototype.stepCounter = function(c){
	    this.setCounter(c, this.counter(c) + 1);
	    this.clearCounter(c);
	  };
	  Generator.prototype.counter = function(c){
	    if (!this.hasCounter(c)) {
	      error("no such counter: " + c);
	    }
	    return this._counters.get(c);
	  };
	  Generator.prototype.refCounter = function(c, id){
	    var el;
	    if (!id) {
	      id = c + "-" + this.nextId();
	      el = this.create(this.anchor(id));
	    }
	    this._stack.top.currentlabel = {
	      id: id,
	      label: this.createFragment(arrayFrom$(this.hasMacro('p@' + c)
	        ? this.macro('p@' + c)
	        : []).concat(arrayFrom$(this.macro('the' + c))))
	    };
	    return el;
	  };
	  Generator.prototype.addToReset = function(c, parent){
	    if (!this.hasCounter(parent)) {
	      error("no such counter: " + parent);
	    }
	    if (!this.hasCounter(c)) {
	      error("no such counter: " + c);
	    }
	    this._resets.get(parent).push(c);
	  };
	  Generator.prototype.clearCounter = function(c){
	    var i$, ref$, len$, r;
	    for (i$ = 0, len$ = (ref$ = this._resets.get(c)).length; i$ < len$; ++i$) {
	      r = ref$[i$];
	      this.clearCounter(r);
	      this.setCounter(r, 0);
	    }
	  };
	  Generator.prototype.alph = function(num){
	    return String.fromCharCode(96 + num);
	  };
	  Generator.prototype.Alph = function(num){
	    return String.fromCharCode(64 + num);
	  };
	  Generator.prototype.arabic = function(num){
	    return String(num);
	  };
	  Generator.prototype.roman = function(num){
	    var lookup;
	    lookup = [['m', 1000], ['cm', 900], ['d', 500], ['cd', 400], ['c', 100], ['xc', 90], ['l', 50], ['xl', 40], ['x', 10], ['ix', 9], ['v', 5], ['iv', 4], ['i', 1]];
	    return _roman(num, lookup);
	  };
	  Generator.prototype.Roman = function(num){
	    var lookup;
	    lookup = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
	    return _roman(num, lookup);
	  };
	  _roman = function(num, lookup){
	    var roman, i$, len$, i;
	    roman = "";
	    for (i$ = 0, len$ = lookup.length; i$ < len$; ++i$) {
	      i = lookup[i$];
	      while (num >= i[1]) {
	        roman += i[0];
	        num -= i[1];
	      }
	    }
	    return roman;
	  };
	  Generator.prototype.fnsymbol = function(num){
	    switch (num) {
	    case 1:
	      return this.symbol('textasteriskcentered');
	    case 2:
	      return this.symbol('textdagger');
	    case 3:
	      return this.symbol('textdaggerdbl');
	    case 4:
	      return this.symbol('textsection');
	    case 5:
	      return this.symbol('textparagraph');
	    case 6:
	      return this.symbol('textbardbl');
	    case 7:
	      return this.symbol('textasteriskcentered') + this.symbol('textasteriskcentered');
	    case 8:
	      return this.symbol('textdagger') + this.symbol('textdagger');
	    case 9:
	      return this.symbol('textdaggerdbl') + this.symbol('textdaggerdbl');
	    default:
	      return error("fnsymbol value must be between 1 and 9");
	    }
	  };
	  Generator.prototype.setLabel = function(label){
	    var i$, ref$, len$, r;
	    if (this._labels.has(label)) {
	      error("label " + label + " already defined!");
	    }
	    if (!this._stack.top.currentlabel.id) {
	      console.warn("warning: no \\@currentlabel available for label " + label + "!");
	    }
	    this._labels.set(label, this._stack.top.currentlabel);
	    if (this._refs.has(label)) {
	      for (i$ = 0, len$ = (ref$ = this._refs.get(label)).length; i$ < len$; ++i$) {
	        r = ref$[i$];
	        while (r.firstChild) {
	          r.removeChild(r.firstChild);
	        }
	        r.appendChild(this._stack.top.currentlabel.label.cloneNode(true));
	        r.setAttribute("href", "#" + this._stack.top.currentlabel.id);
	      }
	      this._refs['delete'](label);
	    }
	  };
	  Generator.prototype.ref = function(label){
	    var that, el;
	    if (that = this._labels.get(label)) {
	      return this.create(this.link("#" + that.id), that.label.cloneNode(true));
	    }
	    el = this.create(this.link("#"), this.createText("??"));
	    if (!this._refs.has(label)) {
	      this._refs.set(label, [el]);
	    } else {
	      this._refs.get(label).push(el);
	    }
	    return el;
	  };
	  Generator.prototype.logUndefinedRefs = function(){
	    var keys, ref;
	    if (this._refs.size === 0) {
	      return;
	    }
	    keys = this._refs.keys();
	    while (!(ref = keys.next()).done) {
	      console.warn("warning: reference '" + ref.value + "' undefined");
	    }
	    console.warn("There were undefined references.");
	  };
	  Generator.prototype.marginpar = function(txt){
	    var id, marginPar, marginRef;
	    id = this.nextId();
	    marginPar = this.create(this.block, [this.create(this.inline, null, "mpbaseline"), txt]);
	    marginPar.id = id;
	    this._marginpars.push(marginPar);
	    marginRef = this.create(this.inline, null, "mpbaseline");
	    marginRef.id = "marginref-" + id;
	    return marginRef;
	  };
	  function Generator(){}
	  return Generator;
	}());
	function deepEq$(x, y, type){
	  var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
	      has = function (obj, key) { return hasOwnProperty.call(obj, key); };
	  var first = true;
	  return eq(x, y, []);
	  function eq(a, b, stack) {
	    var className, length, size, result, alength, blength, key, sizeB;
	    if (a == null || b == null) { return a === b; }
	    if (a.__placeholder__ || b.__placeholder__) { return true; }
	    if (a === b) { return a !== 0 || 1 / a == 1 / b; }
	    className = toString.call(a);
	    if (toString.call(b) != className) { return false; }
	    switch (className) {
	      case '[object String]': return a == String(b);
	      case '[object Number]':
	        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
	      case '[object Date]':
	      case '[object Boolean]':
	        return +a == +b;
	      case '[object RegExp]':
	        return a.source == b.source &&
	               a.global == b.global &&
	               a.multiline == b.multiline &&
	               a.ignoreCase == b.ignoreCase;
	    }
	    if (typeof a != 'object' || typeof b != 'object') { return false; }
	    length = stack.length;
	    while (length--) { if (stack[length] == a) { return true; } }
	    stack.push(a);
	    size = 0;
	    result = true;
	    if (className == '[object Array]') {
	      alength = a.length;
	      blength = b.length;
	      if (first) {
	        switch (type) {
	        case '===': result = alength === blength; break;
	        case '<==': result = alength <= blength; break;
	        case '<<=': result = alength < blength; break;
	        }
	        size = alength;
	        first = false;
	      } else {
	        result = alength === blength;
	        size = alength;
	      }
	      if (result) {
	        while (size--) {
	          if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
	        }
	      }
	    } else {
	      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
	        return false;
	      }
	      for (key in a) {
	        if (has(a, key)) {
	          size++;
	          if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
	        }
	      }
	      if (result) {
	        sizeB = 0;
	        for (key in b) {
	          if (has(b, key)) { ++sizeB; }
	        }
	        if (first) {
	          if (type === '<<=') {
	            result = size < sizeB;
	          } else if (type === '<==') {
	            result = size <= sizeB;
	          } else {
	            result = size === sizeB;
	          }
	        } else {
	          first = false;
	          result = size === sizeB;
	        }
	      }
	    }
	    stack.pop();
	    return result;
	  }
	}
	function in$(x, xs){
	  var i = -1, l = xs.length >>> 0;
	  while (++i < l) if (x === xs[i]) return true;
	  return false;
	}

	const methods$1 = {};
	const names = [];

	function registerMethods(name, m) {
	  if (Array.isArray(name)) {
	    for (const _name of name) {
	      registerMethods(_name, m);
	    }
	    return
	  }

	  if (typeof name === 'object') {
	    for (const _name in name) {
	      registerMethods(_name, name[_name]);
	    }
	    return
	  }

	  addMethodNames(Object.getOwnPropertyNames(m));
	  methods$1[name] = Object.assign(methods$1[name] || {}, m);
	}

	function getMethodsFor(name) {
	  return methods$1[name] || {}
	}

	function getMethodNames() {
	  return [...new Set(names)]
	}

	function addMethodNames(_names) {
	  names.push(..._names);
	}

	// Map function
	function map(array, block) {
	  let i;
	  const il = array.length;
	  const result = [];

	  for (i = 0; i < il; i++) {
	    result.push(block(array[i]));
	  }

	  return result
	}

	// Filter function
	function filter(array, block) {
	  let i;
	  const il = array.length;
	  const result = [];

	  for (i = 0; i < il; i++) {
	    if (block(array[i])) {
	      result.push(array[i]);
	    }
	  }

	  return result
	}

	// Degrees to radians
	function radians(d) {
	  return ((d % 360) * Math.PI) / 180
	}

	// Convert camel cased string to dash separated
	function unCamelCase(s) {
	  return s.replace(/([A-Z])/g, function (m, g) {
	    return '-' + g.toLowerCase()
	  })
	}

	// Capitalize first letter of a string
	function capitalize(s) {
	  return s.charAt(0).toUpperCase() + s.slice(1)
	}

	// Calculate proportional width and height values when necessary
	function proportionalSize(element, width, height, box) {
	  if (width == null || height == null) {
	    box = box || element.bbox();

	    if (width == null) {
	      width = (box.width / box.height) * height;
	    } else if (height == null) {
	      height = (box.height / box.width) * width;
	    }
	  }

	  return {
	    width: width,
	    height: height
	  }
	}

	/**
	 * This function adds support for string origins.
	 * It searches for an origin in o.origin o.ox and o.originX.
	 * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50
	 **/
	function getOrigin(o, element) {
	  const origin = o.origin;
	  // First check if origin is in ox or originX
	  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center';
	  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center';

	  // Then check if origin was used and overwrite in that case
	  if (origin != null) {
	[ox, oy] = Array.isArray(origin)
	      ? origin
	      : typeof origin === 'object'
	        ? [origin.x, origin.y]
	        : [origin, origin];
	  }

	  // Make sure to only call bbox when actually needed
	  const condX = typeof ox === 'string';
	  const condY = typeof oy === 'string';
	  if (condX || condY) {
	    const { height, width, x, y } = element.bbox();

	    // And only overwrite if string was passed for this specific axis
	    if (condX) {
	      ox = ox.includes('left')
	        ? x
	        : ox.includes('right')
	          ? x + width
	          : x + width / 2;
	    }

	    if (condY) {
	      oy = oy.includes('top')
	        ? y
	        : oy.includes('bottom')
	          ? y + height
	          : y + height / 2;
	    }
	  }

	  // Return the origin as it is if it wasn't a string
	  return [ox, oy]
	}

	const descriptiveElements = new Set(['desc', 'metadata', 'title']);
	const isDescriptive = (element) =>
	  descriptiveElements.has(element.nodeName);

	const writeDataToDom = (element, data, defaults = {}) => {
	  const cloned = { ...data };

	  for (const key in cloned) {
	    if (cloned[key].valueOf() === defaults[key]) {
	      delete cloned[key];
	    }
	  }

	  if (Object.keys(cloned).length) {
	    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)); // see #428
	  } else {
	    element.node.removeAttribute('data-svgjs');
	    element.node.removeAttribute('svgjs:data');
	  }
	};

	// Default namespaces
	const svg = 'http://www.w3.org/2000/svg';
	const html = 'http://www.w3.org/1999/xhtml';
	const xmlns = 'http://www.w3.org/2000/xmlns/';
	const xlink = 'http://www.w3.org/1999/xlink';

	const globals = {
	  window: typeof window === 'undefined' ? null : window,
	  document: typeof document === 'undefined' ? null : document
	};

	function getWindow() {
	  return globals.window
	}

	class Base {
	  // constructor (node/*, {extensions = []} */) {
	  //   // this.tags = []
	  //   //
	  //   // for (let extension of extensions) {
	  //   //   extension.setup.call(this, node)
	  //   //   this.tags.push(extension.name)
	  //   // }
	  // }
	}

	const elements = {};
	const root = '___SYMBOL___ROOT___';

	// Method for element creation
	function create(name, ns = svg) {
	  // create element
	  return globals.document.createElementNS(ns, name)
	}

	function makeInstance(element, isHTML = false) {
	  if (element instanceof Base) return element

	  if (typeof element === 'object') {
	    return adopter(element)
	  }

	  if (element == null) {
	    return new elements[root]()
	  }

	  if (typeof element === 'string' && element.charAt(0) !== '<') {
	    return adopter(globals.document.querySelector(element))
	  }

	  // Make sure, that HTML elements are created with the correct namespace
	  const wrapper = isHTML ? globals.document.createElement('div') : create('svg');
	  wrapper.innerHTML = element;

	  // We can use firstChild here because we know,
	  // that the first char is < and thus an element
	  element = adopter(wrapper.firstChild);

	  // make sure, that element doesn't have its wrapper attached
	  wrapper.removeChild(wrapper.firstChild);
	  return element
	}

	function nodeOrNew(name, node) {
	  return node &&
	    (node instanceof globals.window.Node ||
	      (node.ownerDocument &&
	        node instanceof node.ownerDocument.defaultView.Node))
	    ? node
	    : create(name)
	}

	// Adopt existing svg elements
	function adopt(node) {
	  // check for presence of node
	  if (!node) return null

	  // make sure a node isn't already adopted
	  if (node.instance instanceof Base) return node.instance

	  if (node.nodeName === '#document-fragment') {
	    return new elements.Fragment(node)
	  }

	  // initialize variables
	  let className = capitalize(node.nodeName || 'Dom');

	  // Make sure that gradients are adopted correctly
	  if (className === 'LinearGradient' || className === 'RadialGradient') {
	    className = 'Gradient';

	    // Fallback to Dom if element is not known
	  } else if (!elements[className]) {
	    className = 'Dom';
	  }

	  return new elements[className](node)
	}

	let adopter = adopt;

	function register(element, name = element.name, asRoot = false) {
	  elements[name] = element;
	  if (asRoot) elements[root] = element;

	  addMethodNames(Object.getOwnPropertyNames(element.prototype));

	  return element
	}

	function getClass(name) {
	  return elements[name]
	}

	// Element id sequence
	let did = 1000;

	// Get next named element id
	function eid(name) {
	  return 'Svgjs' + capitalize(name) + did++
	}

	// Deep new id assignment
	function assignNewId(node) {
	  // do the same for SVG child nodes as well
	  for (let i = node.children.length - 1; i >= 0; i--) {
	    assignNewId(node.children[i]);
	  }

	  if (node.id) {
	    node.id = eid(node.nodeName);
	    return node
	  }

	  return node
	}

	// Method for extending objects
	function extend(modules, methods) {
	  let key, i;

	  modules = Array.isArray(modules) ? modules : [modules];

	  for (i = modules.length - 1; i >= 0; i--) {
	    for (key in methods) {
	      modules[i].prototype[key] = methods[key];
	    }
	  }
	}

	function wrapWithAttrCheck(fn) {
	  return function (...args) {
	    const o = args[args.length - 1];

	    if (o && o.constructor === Object && !(o instanceof Array)) {
	      return fn.apply(this, args.slice(0, -1)).attr(o)
	    } else {
	      return fn.apply(this, args)
	    }
	  }
	}

	// Get all siblings, including myself
	function siblings() {
	  return this.parent().children()
	}

	// Get the current position siblings
	function position() {
	  return this.parent().index(this)
	}

	// Get the next element (will return null if there is none)
	function next() {
	  return this.siblings()[this.position() + 1]
	}

	// Get the next element (will return null if there is none)
	function prev() {
	  return this.siblings()[this.position() - 1]
	}

	// Send given element one step forward
	function forward() {
	  const i = this.position();
	  const p = this.parent();

	  // move node one step forward
	  p.add(this.remove(), i + 1);

	  return this
	}

	// Send given element one step backward
	function backward() {
	  const i = this.position();
	  const p = this.parent();

	  p.add(this.remove(), i ? i - 1 : 0);

	  return this
	}

	// Send given element all the way to the front
	function front() {
	  const p = this.parent();

	  // Move node forward
	  p.add(this.remove());

	  return this
	}

	// Send given element all the way to the back
	function back() {
	  const p = this.parent();

	  // Move node back
	  p.add(this.remove(), 0);

	  return this
	}

	// Inserts a given element before the targeted element
	function before(element) {
	  element = makeInstance(element);
	  element.remove();

	  const i = this.position();

	  this.parent().add(element, i);

	  return this
	}

	// Inserts a given element after the targeted element
	function after(element) {
	  element = makeInstance(element);
	  element.remove();

	  const i = this.position();

	  this.parent().add(element, i + 1);

	  return this
	}

	function insertBefore(element) {
	  element = makeInstance(element);
	  element.before(this);
	  return this
	}

	function insertAfter(element) {
	  element = makeInstance(element);
	  element.after(this);
	  return this
	}

	registerMethods('Dom', {
	  siblings,
	  position,
	  next,
	  prev,
	  forward,
	  backward,
	  front,
	  back,
	  before,
	  after,
	  insertBefore,
	  insertAfter
	});

	// Parse unit value
	const numberAndUnit =
	  /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i;

	// Parse hex value
	const hex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;

	// Parse rgb value
	const rgb = /rgb\((\d+),(\d+),(\d+)\)/;

	// Parse reference id
	const reference = /(#[a-z_][a-z0-9\-_]*)/i;

	// splits a transformation chain
	const transforms = /\)\s*,?\s*/;

	// Whitespace
	const whitespace = /\s/g;

	// Test hex value
	const isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i;

	// Test rgb value
	const isRgb = /^rgb\(/;

	// Test for blank string
	const isBlank = /^(\s+)?$/;

	// Test for numeric string
	const isNumber = /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

	// Test for image url
	const isImage = /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i;

	// split at whitespace and comma
	const delimiter$1 = /[\s,]+/;

	// Test for path letter
	const isPathLetter = /[MLHVCSQTAZ]/i;

	// Return array of classes on the node
	function classes() {
	  const attr = this.attr('class');
	  return attr == null ? [] : attr.trim().split(delimiter$1)
	}

	// Return true if class exists on the node, false otherwise
	function hasClass(name) {
	  return this.classes().indexOf(name) !== -1
	}

	// Add class to the node
	function addClass(name) {
	  if (!this.hasClass(name)) {
	    const array = this.classes();
	    array.push(name);
	    this.attr('class', array.join(' '));
	  }

	  return this
	}

	// Remove class from the node
	function removeClass(name) {
	  if (this.hasClass(name)) {
	    this.attr(
	      'class',
	      this.classes()
	        .filter(function (c) {
	          return c !== name
	        })
	        .join(' ')
	    );
	  }

	  return this
	}

	// Toggle the presence of a class on the node
	function toggleClass(name) {
	  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)
	}

	registerMethods('Dom', {
	  classes,
	  hasClass,
	  addClass,
	  removeClass,
	  toggleClass
	});

	// Dynamic style generator
	function css(style, val) {
	  const ret = {};
	  if (arguments.length === 0) {
	    // get full style as object
	    this.node.style.cssText
	      .split(/\s*;\s*/)
	      .filter(function (el) {
	        return !!el.length
	      })
	      .forEach(function (el) {
	        const t = el.split(/\s*:\s*/);
	        ret[t[0]] = t[1];
	      });
	    return ret
	  }

	  if (arguments.length < 2) {
	    // get style properties as array
	    if (Array.isArray(style)) {
	      for (const name of style) {
	        const cased = name;
	        ret[name] = this.node.style.getPropertyValue(cased);
	      }
	      return ret
	    }

	    // get style for property
	    if (typeof style === 'string') {
	      return this.node.style.getPropertyValue(style)
	    }

	    // set styles in object
	    if (typeof style === 'object') {
	      for (const name in style) {
	        // set empty string if null/undefined/'' was given
	        this.node.style.setProperty(
	          name,
	          style[name] == null || isBlank.test(style[name]) ? '' : style[name]
	        );
	      }
	    }
	  }

	  // set style for property
	  if (arguments.length === 2) {
	    this.node.style.setProperty(
	      style,
	      val == null || isBlank.test(val) ? '' : val
	    );
	  }

	  return this
	}

	// Show element
	function show() {
	  return this.css('display', '')
	}

	// Hide element
	function hide() {
	  return this.css('display', 'none')
	}

	// Is element visible?
	function visible() {
	  return this.css('display') !== 'none'
	}

	registerMethods('Dom', {
	  css,
	  show,
	  hide,
	  visible
	});

	// Store data values on svg nodes
	function data(a, v, r) {
	  if (a == null) {
	    // get an object of attributes
	    return this.data(
	      map(
	        filter(
	          this.node.attributes,
	          (el) => el.nodeName.indexOf('data-') === 0
	        ),
	        (el) => el.nodeName.slice(5)
	      )
	    )
	  } else if (a instanceof Array) {
	    const data = {};
	    for (const key of a) {
	      data[key] = this.data(key);
	    }
	    return data
	  } else if (typeof a === 'object') {
	    for (v in a) {
	      this.data(v, a[v]);
	    }
	  } else if (arguments.length < 2) {
	    try {
	      return JSON.parse(this.attr('data-' + a))
	    } catch (e) {
	      return this.attr('data-' + a)
	    }
	  } else {
	    this.attr(
	      'data-' + a,
	      v === null
	        ? null
	        : r === true || typeof v === 'string' || typeof v === 'number'
	          ? v
	          : JSON.stringify(v)
	    );
	  }

	  return this
	}

	registerMethods('Dom', { data });

	// Remember arbitrary data
	function remember(k, v) {
	  // remember every item in an object individually
	  if (typeof arguments[0] === 'object') {
	    for (const key in k) {
	      this.remember(key, k[key]);
	    }
	  } else if (arguments.length === 1) {
	    // retrieve memory
	    return this.memory()[k]
	  } else {
	    // store memory
	    this.memory()[k] = v;
	  }

	  return this
	}

	// Erase a given memory
	function forget() {
	  if (arguments.length === 0) {
	    this._memory = {};
	  } else {
	    for (let i = arguments.length - 1; i >= 0; i--) {
	      delete this.memory()[arguments[i]];
	    }
	  }
	  return this
	}

	// This triggers creation of a new hidden class which is not performant
	// However, this function is not rarely used so it will not happen frequently
	// Return local memory object
	function memory() {
	  return (this._memory = this._memory || {})
	}

	registerMethods('Dom', { remember, forget, memory });

	function sixDigitHex(hex) {
	  return hex.length === 4
	    ? [
	        '#',
	        hex.substring(1, 2),
	        hex.substring(1, 2),
	        hex.substring(2, 3),
	        hex.substring(2, 3),
	        hex.substring(3, 4),
	        hex.substring(3, 4)
	      ].join('')
	    : hex
	}

	function componentHex(component) {
	  const integer = Math.round(component);
	  const bounded = Math.max(0, Math.min(255, integer));
	  const hex = bounded.toString(16);
	  return hex.length === 1 ? '0' + hex : hex
	}

	function is(object, space) {
	  for (let i = space.length; i--; ) {
	    if (object[space[i]] == null) {
	      return false
	    }
	  }
	  return true
	}

	function getParameters(a, b) {
	  const params = is(a, 'rgb')
	    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }
	    : is(a, 'xyz')
	      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }
	      : is(a, 'hsl')
	        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }
	        : is(a, 'lab')
	          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }
	          : is(a, 'lch')
	            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }
	            : is(a, 'cmyk')
	              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }
	              : { _a: 0, _b: 0, _c: 0, space: 'rgb' };

	  params.space = b || params.space;
	  return params
	}

	function cieSpace(space) {
	  if (space === 'lab' || space === 'xyz' || space === 'lch') {
	    return true
	  } else {
	    return false
	  }
	}

	function hueToRgb(p, q, t) {
	  if (t < 0) t += 1;
	  if (t > 1) t -= 1;
	  if (t < 1 / 6) return p + (q - p) * 6 * t
	  if (t < 1 / 2) return q
	  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6
	  return p
	}

	class Color {
	  constructor(...inputs) {
	    this.init(...inputs);
	  }

	  // Test if given value is a color
	  static isColor(color) {
	    return (
	      color && (color instanceof Color || this.isRgb(color) || this.test(color))
	    )
	  }

	  // Test if given value is an rgb object
	  static isRgb(color) {
	    return (
	      color &&
	      typeof color.r === 'number' &&
	      typeof color.g === 'number' &&
	      typeof color.b === 'number'
	    )
	  }

	  /*
	  Generating random colors
	  */
	  static random(mode = 'vibrant', t) {
	    // Get the math modules
	    const { random, round, sin, PI: pi } = Math;

	    // Run the correct generator
	    if (mode === 'vibrant') {
	      const l = (81 - 57) * random() + 57;
	      const c = (83 - 45) * random() + 45;
	      const h = 360 * random();
	      const color = new Color(l, c, h, 'lch');
	      return color
	    } else if (mode === 'sine') {
	      t = t == null ? random() : t;
	      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150);
	      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200);
	      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150);
	      const color = new Color(r, g, b);
	      return color
	    } else if (mode === 'pastel') {
	      const l = (94 - 86) * random() + 86;
	      const c = (26 - 9) * random() + 9;
	      const h = 360 * random();
	      const color = new Color(l, c, h, 'lch');
	      return color
	    } else if (mode === 'dark') {
	      const l = 10 + 10 * random();
	      const c = (125 - 75) * random() + 86;
	      const h = 360 * random();
	      const color = new Color(l, c, h, 'lch');
	      return color
	    } else if (mode === 'rgb') {
	      const r = 255 * random();
	      const g = 255 * random();
	      const b = 255 * random();
	      const color = new Color(r, g, b);
	      return color
	    } else if (mode === 'lab') {
	      const l = 100 * random();
	      const a = 256 * random() - 128;
	      const b = 256 * random() - 128;
	      const color = new Color(l, a, b, 'lab');
	      return color
	    } else if (mode === 'grey') {
	      const grey = 255 * random();
	      const color = new Color(grey, grey, grey);
	      return color
	    } else {
	      throw new Error('Unsupported random color mode')
	    }
	  }

	  // Test if given value is a color string
	  static test(color) {
	    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color))
	  }

	  cmyk() {
	    // Get the rgb values for the current color
	    const { _a, _b, _c } = this.rgb();
	    const [r, g, b] = [_a, _b, _c].map((v) => v / 255);

	    // Get the cmyk values in an unbounded format
	    const k = Math.min(1 - r, 1 - g, 1 - b);

	    if (k === 1) {
	      // Catch the black case
	      return new Color(0, 0, 0, 1, 'cmyk')
	    }

	    const c = (1 - r - k) / (1 - k);
	    const m = (1 - g - k) / (1 - k);
	    const y = (1 - b - k) / (1 - k);

	    // Construct the new color
	    const color = new Color(c, m, y, k, 'cmyk');
	    return color
	  }

	  hsl() {
	    // Get the rgb values
	    const { _a, _b, _c } = this.rgb();
	    const [r, g, b] = [_a, _b, _c].map((v) => v / 255);

	    // Find the maximum and minimum values to get the lightness
	    const max = Math.max(r, g, b);
	    const min = Math.min(r, g, b);
	    const l = (max + min) / 2;

	    // If the r, g, v values are identical then we are grey
	    const isGrey = max === min;

	    // Calculate the hue and saturation
	    const delta = max - min;
	    const s = isGrey
	      ? 0
	      : l > 0.5
	        ? delta / (2 - max - min)
	        : delta / (max + min);
	    const h = isGrey
	      ? 0
	      : max === r
	        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6
	        : max === g
	          ? ((b - r) / delta + 2) / 6
	          : max === b
	            ? ((r - g) / delta + 4) / 6
	            : 0;

	    // Construct and return the new color
	    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl');
	    return color
	  }

	  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {
	    // This catches the case when a falsy value is passed like ''
	    a = !a ? 0 : a;

	    // Reset all values in case the init function is rerun with new color space
	    if (this.space) {
	      for (const component in this.space) {
	        delete this[this.space[component]];
	      }
	    }

	    if (typeof a === 'number') {
	      // Allow for the case that we don't need d...
	      space = typeof d === 'string' ? d : space;
	      d = typeof d === 'string' ? 0 : d;

	      // Assign the values straight to the color
	      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space });
	      // If the user gave us an array, make the color from it
	    } else if (a instanceof Array) {
	      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb';
	      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 });
	    } else if (a instanceof Object) {
	      // Set the object up and assign its values directly
	      const values = getParameters(a, b);
	      Object.assign(this, values);
	    } else if (typeof a === 'string') {
	      if (isRgb.test(a)) {
	        const noWhitespace = a.replace(whitespace, '');
	        const [_a, _b, _c] = rgb
	          .exec(noWhitespace)
	          .slice(1, 4)
	          .map((v) => parseInt(v));
	        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' });
	      } else if (isHex.test(a)) {
	        const hexParse = (v) => parseInt(v, 16);
	        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse);
	        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' });
	      } else throw Error("Unsupported string format, can't construct Color")
	    }

	    // Now add the components as a convenience
	    const { _a, _b, _c, _d } = this;
	    const components =
	      this.space === 'rgb'
	        ? { r: _a, g: _b, b: _c }
	        : this.space === 'xyz'
	          ? { x: _a, y: _b, z: _c }
	          : this.space === 'hsl'
	            ? { h: _a, s: _b, l: _c }
	            : this.space === 'lab'
	              ? { l: _a, a: _b, b: _c }
	              : this.space === 'lch'
	                ? { l: _a, c: _b, h: _c }
	                : this.space === 'cmyk'
	                  ? { c: _a, m: _b, y: _c, k: _d }
	                  : {};
	    Object.assign(this, components);
	  }

	  lab() {
	    // Get the xyz color
	    const { x, y, z } = this.xyz();

	    // Get the lab components
	    const l = 116 * y - 16;
	    const a = 500 * (x - y);
	    const b = 200 * (y - z);

	    // Construct and return a new color
	    const color = new Color(l, a, b, 'lab');
	    return color
	  }

	  lch() {
	    // Get the lab color directly
	    const { l, a, b } = this.lab();

	    // Get the chromaticity and the hue using polar coordinates
	    const c = Math.sqrt(a ** 2 + b ** 2);
	    let h = (180 * Math.atan2(b, a)) / Math.PI;
	    if (h < 0) {
	      h *= -1;
	      h = 360 - h;
	    }

	    // Make a new color and return it
	    const color = new Color(l, c, h, 'lch');
	    return color
	  }
	  /*
	  Conversion Methods
	  */

	  rgb() {
	    if (this.space === 'rgb') {
	      return this
	    } else if (cieSpace(this.space)) {
	      // Convert to the xyz color space
	      let { x, y, z } = this;
	      if (this.space === 'lab' || this.space === 'lch') {
	        // Get the values in the lab space
	        let { l, a, b } = this;
	        if (this.space === 'lch') {
	          const { c, h } = this;
	          const dToR = Math.PI / 180;
	          a = c * Math.cos(dToR * h);
	          b = c * Math.sin(dToR * h);
	        }

	        // Undo the nonlinear function
	        const yL = (l + 16) / 116;
	        const xL = a / 500 + yL;
	        const zL = yL - b / 200;

	        // Get the xyz values
	        const ct = 16 / 116;
	        const mx = 0.008856;
	        const nm = 7.787;
	        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm);
	        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm);
	        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm);
	      }

	      // Convert xyz to unbounded rgb values
	      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986;
	      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415;
	      const bU = x * 0.0557 + y * -0.204 + z * 1.057;

	      // Convert the values to true rgb values
	      const pow = Math.pow;
	      const bd = 0.0031308;
	      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;
	      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;
	      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU;

	      // Make and return the color
	      const color = new Color(255 * r, 255 * g, 255 * b);
	      return color
	    } else if (this.space === 'hsl') {
	      // https://bgrins.github.io/TinyColor/docs/tinycolor.html
	      // Get the current hsl values
	      let { h, s, l } = this;
	      h /= 360;
	      s /= 100;
	      l /= 100;

	      // If we are grey, then just make the color directly
	      if (s === 0) {
	        l *= 255;
	        const color = new Color(l, l, l);
	        return color
	      }

	      // TODO I have no idea what this does :D If you figure it out, tell me!
	      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      const p = 2 * l - q;

	      // Get the rgb values
	      const r = 255 * hueToRgb(p, q, h + 1 / 3);
	      const g = 255 * hueToRgb(p, q, h);
	      const b = 255 * hueToRgb(p, q, h - 1 / 3);

	      // Make a new color
	      const color = new Color(r, g, b);
	      return color
	    } else if (this.space === 'cmyk') {
	      // https://gist.github.com/felipesabino/5066336
	      // Get the normalised cmyk values
	      const { c, m, y, k } = this;

	      // Get the rgb values
	      const r = 255 * (1 - Math.min(1, c * (1 - k) + k));
	      const g = 255 * (1 - Math.min(1, m * (1 - k) + k));
	      const b = 255 * (1 - Math.min(1, y * (1 - k) + k));

	      // Form the color and return it
	      const color = new Color(r, g, b);
	      return color
	    } else {
	      return this
	    }
	  }

	  toArray() {
	    const { _a, _b, _c, _d, space } = this;
	    return [_a, _b, _c, _d, space]
	  }

	  toHex() {
	    const [r, g, b] = this._clamped().map(componentHex);
	    return `#${r}${g}${b}`
	  }

	  toRgb() {
	    const [rV, gV, bV] = this._clamped();
	    const string = `rgb(${rV},${gV},${bV})`;
	    return string
	  }

	  toString() {
	    return this.toHex()
	  }

	  xyz() {
	    // Normalise the red, green and blue values
	    const { _a: r255, _b: g255, _c: b255 } = this.rgb();
	    const [r, g, b] = [r255, g255, b255].map((v) => v / 255);

	    // Convert to the lab rgb space
	    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
	    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
	    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

	    // Convert to the xyz color space without bounding the values
	    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;
	    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0;
	    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883;

	    // Get the proper xyz values by applying the bounding
	    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;
	    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;
	    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116;

	    // Make and return the color
	    const color = new Color(x, y, z, 'xyz');
	    return color
	  }

	  /*
	  Input and Output methods
	  */

	  _clamped() {
	    const { _a, _b, _c } = this.rgb();
	    const { max, min, round } = Math;
	    const format = (v) => max(0, min(round(v), 255));
	    return [_a, _b, _c].map(format)
	  }

	  /*
	  Constructing colors
	  */
	}

	class Point {
	  // Initialize
	  constructor(...args) {
	    this.init(...args);
	  }

	  // Clone point
	  clone() {
	    return new Point(this)
	  }

	  init(x, y) {
	    const base = { x: 0, y: 0 };

	    // ensure source as object
	    const source = Array.isArray(x)
	      ? { x: x[0], y: x[1] }
	      : typeof x === 'object'
	        ? { x: x.x, y: x.y }
	        : { x: x, y: y };

	    // merge source
	    this.x = source.x == null ? base.x : source.x;
	    this.y = source.y == null ? base.y : source.y;

	    return this
	  }

	  toArray() {
	    return [this.x, this.y]
	  }

	  transform(m) {
	    return this.clone().transformO(m)
	  }

	  // Transform point with matrix
	  transformO(m) {
	    if (!Matrix.isMatrixLike(m)) {
	      m = new Matrix(m);
	    }

	    const { x, y } = this;

	    // Perform the matrix multiplication
	    this.x = m.a * x + m.c * y + m.e;
	    this.y = m.b * x + m.d * y + m.f;

	    return this
	  }
	}

	function point(x, y) {
	  return new Point(x, y).transformO(this.screenCTM().inverseO())
	}

	function closeEnough(a, b, threshold) {
	  return Math.abs(b - a) < (threshold || 1e-6)
	}

	class Matrix {
	  constructor(...args) {
	    this.init(...args);
	  }

	  static formatTransforms(o) {
	    // Get all of the parameters required to form the matrix
	    const flipBoth = o.flip === 'both' || o.flip === true;
	    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1;
	    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1;
	    const skewX =
	      o.skew && o.skew.length
	        ? o.skew[0]
	        : isFinite(o.skew)
	          ? o.skew
	          : isFinite(o.skewX)
	            ? o.skewX
	            : 0;
	    const skewY =
	      o.skew && o.skew.length
	        ? o.skew[1]
	        : isFinite(o.skew)
	          ? o.skew
	          : isFinite(o.skewY)
	            ? o.skewY
	            : 0;
	    const scaleX =
	      o.scale && o.scale.length
	        ? o.scale[0] * flipX
	        : isFinite(o.scale)
	          ? o.scale * flipX
	          : isFinite(o.scaleX)
	            ? o.scaleX * flipX
	            : flipX;
	    const scaleY =
	      o.scale && o.scale.length
	        ? o.scale[1] * flipY
	        : isFinite(o.scale)
	          ? o.scale * flipY
	          : isFinite(o.scaleY)
	            ? o.scaleY * flipY
	            : flipY;
	    const shear = o.shear || 0;
	    const theta = o.rotate || o.theta || 0;
	    const origin = new Point(
	      o.origin || o.around || o.ox || o.originX,
	      o.oy || o.originY
	    );
	    const ox = origin.x;
	    const oy = origin.y;
	    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN
	    const position = new Point(
	      o.position || o.px || o.positionX || NaN,
	      o.py || o.positionY || NaN
	    );
	    const px = position.x;
	    const py = position.y;
	    const translate = new Point(
	      o.translate || o.tx || o.translateX,
	      o.ty || o.translateY
	    );
	    const tx = translate.x;
	    const ty = translate.y;
	    const relative = new Point(
	      o.relative || o.rx || o.relativeX,
	      o.ry || o.relativeY
	    );
	    const rx = relative.x;
	    const ry = relative.y;

	    // Populate all of the values
	    return {
	      scaleX,
	      scaleY,
	      skewX,
	      skewY,
	      shear,
	      theta,
	      rx,
	      ry,
	      tx,
	      ty,
	      ox,
	      oy,
	      px,
	      py
	    }
	  }

	  static fromArray(a) {
	    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }
	  }

	  static isMatrixLike(o) {
	    return (
	      o.a != null ||
	      o.b != null ||
	      o.c != null ||
	      o.d != null ||
	      o.e != null ||
	      o.f != null
	    )
	  }

	  // left matrix, right matrix, target matrix which is overwritten
	  static matrixMultiply(l, r, o) {
	    // Work out the product directly
	    const a = l.a * r.a + l.c * r.b;
	    const b = l.b * r.a + l.d * r.b;
	    const c = l.a * r.c + l.c * r.d;
	    const d = l.b * r.c + l.d * r.d;
	    const e = l.e + l.a * r.e + l.c * r.f;
	    const f = l.f + l.b * r.e + l.d * r.f;

	    // make sure to use local variables because l/r and o could be the same
	    o.a = a;
	    o.b = b;
	    o.c = c;
	    o.d = d;
	    o.e = e;
	    o.f = f;

	    return o
	  }

	  around(cx, cy, matrix) {
	    return this.clone().aroundO(cx, cy, matrix)
	  }

	  // Transform around a center point
	  aroundO(cx, cy, matrix) {
	    const dx = cx || 0;
	    const dy = cy || 0;
	    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy)
	  }

	  // Clones this matrix
	  clone() {
	    return new Matrix(this)
	  }

	  // Decomposes this matrix into its affine parameters
	  decompose(cx = 0, cy = 0) {
	    // Get the parameters from the matrix
	    const a = this.a;
	    const b = this.b;
	    const c = this.c;
	    const d = this.d;
	    const e = this.e;
	    const f = this.f;

	    // Figure out if the winding direction is clockwise or counterclockwise
	    const determinant = a * d - b * c;
	    const ccw = determinant > 0 ? 1 : -1;

	    // Since we only shear in x, we can use the x basis to get the x scale
	    // and the rotation of the resulting matrix
	    const sx = ccw * Math.sqrt(a * a + b * b);
	    const thetaRad = Math.atan2(ccw * b, ccw * a);
	    const theta = (180 / Math.PI) * thetaRad;
	    const ct = Math.cos(thetaRad);
	    const st = Math.sin(thetaRad);

	    // We can then solve the y basis vector simultaneously to get the other
	    // two affine parameters directly from these parameters
	    const lam = (a * c + b * d) / determinant;
	    const sy = (c * sx) / (lam * a - b) || (d * sx) / (lam * b + a);

	    // Use the translations
	    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy);
	    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy);

	    // Construct the decomposition and return it
	    return {
	      // Return the affine parameters
	      scaleX: sx,
	      scaleY: sy,
	      shear: lam,
	      rotate: theta,
	      translateX: tx,
	      translateY: ty,
	      originX: cx,
	      originY: cy,

	      // Return the matrix parameters
	      a: this.a,
	      b: this.b,
	      c: this.c,
	      d: this.d,
	      e: this.e,
	      f: this.f
	    }
	  }

	  // Check if two matrices are equal
	  equals(other) {
	    if (other === this) return true
	    const comp = new Matrix(other);
	    return (
	      closeEnough(this.a, comp.a) &&
	      closeEnough(this.b, comp.b) &&
	      closeEnough(this.c, comp.c) &&
	      closeEnough(this.d, comp.d) &&
	      closeEnough(this.e, comp.e) &&
	      closeEnough(this.f, comp.f)
	    )
	  }

	  // Flip matrix on x or y, at a given offset
	  flip(axis, around) {
	    return this.clone().flipO(axis, around)
	  }

	  flipO(axis, around) {
	    return axis === 'x'
	      ? this.scaleO(-1, 1, around, 0)
	      : axis === 'y'
	        ? this.scaleO(1, -1, 0, around)
	        : this.scaleO(-1, -1, axis, around || axis) // Define an x, y flip point
	  }

	  // Initialize
	  init(source) {
	    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0]);

	    // ensure source as object
	    source =
	      source instanceof Element
	        ? source.matrixify()
	        : typeof source === 'string'
	          ? Matrix.fromArray(source.split(delimiter$1).map(parseFloat))
	          : Array.isArray(source)
	            ? Matrix.fromArray(source)
	            : typeof source === 'object' && Matrix.isMatrixLike(source)
	              ? source
	              : typeof source === 'object'
	                ? new Matrix().transform(source)
	                : arguments.length === 6
	                  ? Matrix.fromArray([].slice.call(arguments))
	                  : base;

	    // Merge the source matrix with the base matrix
	    this.a = source.a != null ? source.a : base.a;
	    this.b = source.b != null ? source.b : base.b;
	    this.c = source.c != null ? source.c : base.c;
	    this.d = source.d != null ? source.d : base.d;
	    this.e = source.e != null ? source.e : base.e;
	    this.f = source.f != null ? source.f : base.f;

	    return this
	  }

	  inverse() {
	    return this.clone().inverseO()
	  }

	  // Inverses matrix
	  inverseO() {
	    // Get the current parameters out of the matrix
	    const a = this.a;
	    const b = this.b;
	    const c = this.c;
	    const d = this.d;
	    const e = this.e;
	    const f = this.f;

	    // Invert the 2x2 matrix in the top left
	    const det = a * d - b * c;
	    if (!det) throw new Error('Cannot invert ' + this)

	    // Calculate the top 2x2 matrix
	    const na = d / det;
	    const nb = -b / det;
	    const nc = -c / det;
	    const nd = a / det;

	    // Apply the inverted matrix to the top right
	    const ne = -(na * e + nc * f);
	    const nf = -(nb * e + nd * f);

	    // Construct the inverted matrix
	    this.a = na;
	    this.b = nb;
	    this.c = nc;
	    this.d = nd;
	    this.e = ne;
	    this.f = nf;

	    return this
	  }

	  lmultiply(matrix) {
	    return this.clone().lmultiplyO(matrix)
	  }

	  lmultiplyO(matrix) {
	    const r = this;
	    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix);

	    return Matrix.matrixMultiply(l, r, this)
	  }

	  // Left multiplies by the given matrix
	  multiply(matrix) {
	    return this.clone().multiplyO(matrix)
	  }

	  multiplyO(matrix) {
	    // Get the matrices
	    const l = this;
	    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix);

	    return Matrix.matrixMultiply(l, r, this)
	  }

	  // Rotate matrix
	  rotate(r, cx, cy) {
	    return this.clone().rotateO(r, cx, cy)
	  }

	  rotateO(r, cx = 0, cy = 0) {
	    // Convert degrees to radians
	    r = radians(r);

	    const cos = Math.cos(r);
	    const sin = Math.sin(r);

	    const { a, b, c, d, e, f } = this;

	    this.a = a * cos - b * sin;
	    this.b = b * cos + a * sin;
	    this.c = c * cos - d * sin;
	    this.d = d * cos + c * sin;
	    this.e = e * cos - f * sin + cy * sin - cx * cos + cx;
	    this.f = f * cos + e * sin - cx * sin - cy * cos + cy;

	    return this
	  }

	  // Scale matrix
	  scale() {
	    return this.clone().scaleO(...arguments)
	  }

	  scaleO(x, y = x, cx = 0, cy = 0) {
	    // Support uniform scaling
	    if (arguments.length === 3) {
	      cy = cx;
	      cx = y;
	      y = x;
	    }

	    const { a, b, c, d, e, f } = this;

	    this.a = a * x;
	    this.b = b * y;
	    this.c = c * x;
	    this.d = d * y;
	    this.e = e * x - cx * x + cx;
	    this.f = f * y - cy * y + cy;

	    return this
	  }

	  // Shear matrix
	  shear(a, cx, cy) {
	    return this.clone().shearO(a, cx, cy)
	  }

	  // eslint-disable-next-line no-unused-vars
	  shearO(lx, cx = 0, cy = 0) {
	    const { a, b, c, d, e, f } = this;

	    this.a = a + b * lx;
	    this.c = c + d * lx;
	    this.e = e + f * lx - cy * lx;

	    return this
	  }

	  // Skew Matrix
	  skew() {
	    return this.clone().skewO(...arguments)
	  }

	  skewO(x, y = x, cx = 0, cy = 0) {
	    // support uniformal skew
	    if (arguments.length === 3) {
	      cy = cx;
	      cx = y;
	      y = x;
	    }

	    // Convert degrees to radians
	    x = radians(x);
	    y = radians(y);

	    const lx = Math.tan(x);
	    const ly = Math.tan(y);

	    const { a, b, c, d, e, f } = this;

	    this.a = a + b * lx;
	    this.b = b + a * ly;
	    this.c = c + d * lx;
	    this.d = d + c * ly;
	    this.e = e + f * lx - cy * lx;
	    this.f = f + e * ly - cx * ly;

	    return this
	  }

	  // SkewX
	  skewX(x, cx, cy) {
	    return this.skew(x, 0, cx, cy)
	  }

	  // SkewY
	  skewY(y, cx, cy) {
	    return this.skew(0, y, cx, cy)
	  }

	  toArray() {
	    return [this.a, this.b, this.c, this.d, this.e, this.f]
	  }

	  // Convert matrix to string
	  toString() {
	    return (
	      'matrix(' +
	      this.a +
	      ',' +
	      this.b +
	      ',' +
	      this.c +
	      ',' +
	      this.d +
	      ',' +
	      this.e +
	      ',' +
	      this.f +
	      ')'
	    )
	  }

	  // Transform a matrix into another matrix by manipulating the space
	  transform(o) {
	    // Check if o is a matrix and then left multiply it directly
	    if (Matrix.isMatrixLike(o)) {
	      const matrix = new Matrix(o);
	      return matrix.multiplyO(this)
	    }

	    // Get the proposed transformations and the current transformations
	    const t = Matrix.formatTransforms(o);
	    const current = this;
	    const { x: ox, y: oy } = new Point(t.ox, t.oy).transform(current);

	    // Construct the resulting matrix
	    const transformer = new Matrix()
	      .translateO(t.rx, t.ry)
	      .lmultiplyO(current)
	      .translateO(-ox, -oy)
	      .scaleO(t.scaleX, t.scaleY)
	      .skewO(t.skewX, t.skewY)
	      .shearO(t.shear)
	      .rotateO(t.theta)
	      .translateO(ox, oy);

	    // If we want the origin at a particular place, we force it there
	    if (isFinite(t.px) || isFinite(t.py)) {
	      const origin = new Point(ox, oy).transform(transformer);
	      // TODO: Replace t.px with isFinite(t.px)
	      // Doesn't work because t.px is also 0 if it wasn't passed
	      const dx = isFinite(t.px) ? t.px - origin.x : 0;
	      const dy = isFinite(t.py) ? t.py - origin.y : 0;
	      transformer.translateO(dx, dy);
	    }

	    // Translate now after positioning
	    transformer.translateO(t.tx, t.ty);
	    return transformer
	  }

	  // Translate matrix
	  translate(x, y) {
	    return this.clone().translateO(x, y)
	  }

	  translateO(x, y) {
	    this.e += x || 0;
	    this.f += y || 0;
	    return this
	  }

	  valueOf() {
	    return {
	      a: this.a,
	      b: this.b,
	      c: this.c,
	      d: this.d,
	      e: this.e,
	      f: this.f
	    }
	  }
	}

	function ctm() {
	  return new Matrix(this.node.getCTM())
	}

	function screenCTM() {
	  try {
	    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537
	       This is needed because FF does not return the transformation matrix
	       for the inner coordinate system when getScreenCTM() is called on nested svgs.
	       However all other Browsers do that */
	    if (typeof this.isRoot === 'function' && !this.isRoot()) {
	      const rect = this.rect(1, 1);
	      const m = rect.node.getScreenCTM();
	      rect.remove();
	      return new Matrix(m)
	    }
	    return new Matrix(this.node.getScreenCTM())
	  } catch (e) {
	    console.warn(
	      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`
	    );
	    return new Matrix()
	  }
	}

	register(Matrix, 'Matrix');

	function parser() {
	  // Reuse cached element if possible
	  if (!parser.nodes) {
	    const svg = makeInstance().size(2, 0);
	    svg.node.style.cssText = [
	      'opacity: 0',
	      'position: absolute',
	      'left: -100%',
	      'top: -100%',
	      'overflow: hidden'
	    ].join(';');

	    svg.attr('focusable', 'false');
	    svg.attr('aria-hidden', 'true');

	    const path = svg.path().node;

	    parser.nodes = { svg, path };
	  }

	  if (!parser.nodes.svg.node.parentNode) {
	    const b = globals.document.body || globals.document.documentElement;
	    parser.nodes.svg.addTo(b);
	  }

	  return parser.nodes
	}

	function isNulledBox(box) {
	  return !box.width && !box.height && !box.x && !box.y
	}

	function domContains(node) {
	  return (
	    node === globals.document ||
	    (
	      globals.document.documentElement.contains ||
	      function (node) {
	        // This is IE - it does not support contains() for top-level SVGs
	        while (node.parentNode) {
	          node = node.parentNode;
	        }
	        return node === globals.document
	      }
	    ).call(globals.document.documentElement, node)
	  )
	}

	class Box {
	  constructor(...args) {
	    this.init(...args);
	  }

	  addOffset() {
	    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled
	    this.x += globals.window.pageXOffset;
	    this.y += globals.window.pageYOffset;
	    return new Box(this)
	  }

	  init(source) {
	    const base = [0, 0, 0, 0];
	    source =
	      typeof source === 'string'
	        ? source.split(delimiter$1).map(parseFloat)
	        : Array.isArray(source)
	          ? source
	          : typeof source === 'object'
	            ? [
	                source.left != null ? source.left : source.x,
	                source.top != null ? source.top : source.y,
	                source.width,
	                source.height
	              ]
	            : arguments.length === 4
	              ? [].slice.call(arguments)
	              : base;

	    this.x = source[0] || 0;
	    this.y = source[1] || 0;
	    this.width = this.w = source[2] || 0;
	    this.height = this.h = source[3] || 0;

	    // Add more bounding box properties
	    this.x2 = this.x + this.w;
	    this.y2 = this.y + this.h;
	    this.cx = this.x + this.w / 2;
	    this.cy = this.y + this.h / 2;

	    return this
	  }

	  isNulled() {
	    return isNulledBox(this)
	  }

	  // Merge rect box with another, return a new instance
	  merge(box) {
	    const x = Math.min(this.x, box.x);
	    const y = Math.min(this.y, box.y);
	    const width = Math.max(this.x + this.width, box.x + box.width) - x;
	    const height = Math.max(this.y + this.height, box.y + box.height) - y;

	    return new Box(x, y, width, height)
	  }

	  toArray() {
	    return [this.x, this.y, this.width, this.height]
	  }

	  toString() {
	    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height
	  }

	  transform(m) {
	    if (!(m instanceof Matrix)) {
	      m = new Matrix(m);
	    }

	    let xMin = Infinity;
	    let xMax = -Infinity;
	    let yMin = Infinity;
	    let yMax = -Infinity;

	    const pts = [
	      new Point(this.x, this.y),
	      new Point(this.x2, this.y),
	      new Point(this.x, this.y2),
	      new Point(this.x2, this.y2)
	    ];

	    pts.forEach(function (p) {
	      p = p.transform(m);
	      xMin = Math.min(xMin, p.x);
	      xMax = Math.max(xMax, p.x);
	      yMin = Math.min(yMin, p.y);
	      yMax = Math.max(yMax, p.y);
	    });

	    return new Box(xMin, yMin, xMax - xMin, yMax - yMin)
	  }
	}

	function getBox(el, getBBoxFn, retry) {
	  let box;

	  try {
	    // Try to get the box with the provided function
	    box = getBBoxFn(el.node);

	    // If the box is worthless and not even in the dom, retry
	    // by throwing an error here...
	    if (isNulledBox(box) && !domContains(el.node)) {
	      throw new Error('Element not in the dom')
	    }
	  } catch (e) {
	    // ... and calling the retry handler here
	    box = retry(el);
	  }

	  return box
	}

	function bbox() {
	  // Function to get bbox is getBBox()
	  const getBBox = (node) => node.getBBox();

	  // Take all measures so that a stupid browser renders the element
	  // so we can get the bbox from it when we try again
	  const retry = (el) => {
	    try {
	      const clone = el.clone().addTo(parser().svg).show();
	      const box = clone.node.getBBox();
	      clone.remove();
	      return box
	    } catch (e) {
	      // We give up...
	      throw new Error(
	        `Getting bbox of element "${
          el.node.nodeName
        }" is not possible: ${e.toString()}`
	      )
	    }
	  };

	  const box = getBox(this, getBBox, retry);
	  const bbox = new Box(box);

	  return bbox
	}

	function rbox(el) {
	  const getRBox = (node) => node.getBoundingClientRect();
	  const retry = (el) => {
	    // There is no point in trying tricks here because if we insert the element into the dom ourselves
	    // it obviously will be at the wrong position
	    throw new Error(
	      `Getting rbox of element "${el.node.nodeName}" is not possible`
	    )
	  };

	  const box = getBox(this, getRBox, retry);
	  const rbox = new Box(box);

	  // If an element was passed, we want the bbox in the coordinate system of that element
	  if (el) {
	    return rbox.transform(el.screenCTM().inverseO())
	  }

	  // Else we want it in absolute screen coordinates
	  // Therefore we need to add the scrollOffset
	  return rbox.addOffset()
	}

	// Checks whether the given point is inside the bounding box
	function inside(x, y) {
	  const box = this.bbox();

	  return (
	    x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height
	  )
	}

	registerMethods({
	  viewbox: {
	    viewbox(x, y, width, height) {
	      // act as getter
	      if (x == null) return new Box(this.attr('viewBox'))

	      // act as setter
	      return this.attr('viewBox', new Box(x, y, width, height))
	    },

	    zoom(level, point) {
	      // Its best to rely on the attributes here and here is why:
	      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)
	      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely
	      //                        that means, their clientRect is always as big as the content.
	      //                        Furthermore this size is incorrect if the element is further transformed by its parents
	      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!
	      // getBBox: returns the bounding box of its content - that doesn't help!
	      let { width, height } = this.attr(['width', 'height']);

	      // Width and height is a string when a number with a unit is present which we can't use
	      // So we try clientXYZ
	      if (
	        (!width && !height) ||
	        typeof width === 'string' ||
	        typeof height === 'string'
	      ) {
	        width = this.node.clientWidth;
	        height = this.node.clientHeight;
	      }

	      // Giving up...
	      if (!width || !height) {
	        throw new Error(
	          'Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element'
	        )
	      }

	      const v = this.viewbox();

	      const zoomX = width / v.width;
	      const zoomY = height / v.height;
	      const zoom = Math.min(zoomX, zoomY);

	      if (level == null) {
	        return zoom
	      }

	      let zoomAmount = zoom / level;

	      // Set the zoomAmount to the highest value which is safe to process and recover from
	      // The * 100 is a bit of wiggle room for the matrix transformation
	      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100;

	      point =
	        point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y);

	      const box = new Box(v).transform(
	        new Matrix({ scale: zoomAmount, origin: point })
	      );

	      return this.viewbox(box)
	    }
	  }
	});

	register(Box, 'Box');

	// import { subClassArray } from './ArrayPolyfill.js'

	class List extends Array {
	  constructor(arr = [], ...args) {
	    super(arr, ...args);
	    if (typeof arr === 'number') return this
	    this.length = 0;
	    this.push(...arr);
	  }
	}

	extend([List], {
	  each(fnOrMethodName, ...args) {
	    if (typeof fnOrMethodName === 'function') {
	      return this.map((el, i, arr) => {
	        return fnOrMethodName.call(el, el, i, arr)
	      })
	    } else {
	      return this.map((el) => {
	        return el[fnOrMethodName](...args)
	      })
	    }
	  },

	  toArray() {
	    return Array.prototype.concat.apply([], this)
	  }
	});

	const reserved = ['toArray', 'constructor', 'each'];

	List.extend = function (methods) {
	  methods = methods.reduce((obj, name) => {
	    // Don't overwrite own methods
	    if (reserved.includes(name)) return obj

	    // Don't add private methods
	    if (name[0] === '_') return obj

	    // Allow access to original Array methods through a prefix
	    if (name in Array.prototype) {
	      obj['$' + name] = Array.prototype[name];
	    }

	    // Relay every call to each()
	    obj[name] = function (...attrs) {
	      return this.each(name, ...attrs)
	    };
	    return obj
	  }, {});

	  extend([List], methods);
	};

	function baseFind(query, parent) {
	  return new List(
	    map((parent || globals.document).querySelectorAll(query), function (node) {
	      return adopt(node)
	    })
	  )
	}

	// Scoped find method
	function find(query) {
	  return baseFind(query, this.node)
	}

	function findOne(query) {
	  return adopt(this.node.querySelector(query))
	}

	let listenerId = 0;
	const windowEvents = {};

	function getEvents(instance) {
	  let n = instance.getEventHolder();

	  // We dont want to save events in global space
	  if (n === globals.window) n = windowEvents;
	  if (!n.events) n.events = {};
	  return n.events
	}

	function getEventTarget(instance) {
	  return instance.getEventTarget()
	}

	function clearEvents(instance) {
	  let n = instance.getEventHolder();
	  if (n === globals.window) n = windowEvents;
	  if (n.events) n.events = {};
	}

	// Add event binder in the SVG namespace
	function on(node, events, listener, binding, options) {
	  const l = listener.bind(binding || node);
	  const instance = makeInstance(node);
	  const bag = getEvents(instance);
	  const n = getEventTarget(instance);

	  // events can be an array of events or a string of events
	  events = Array.isArray(events) ? events : events.split(delimiter$1);

	  // add id to listener
	  if (!listener._svgjsListenerId) {
	    listener._svgjsListenerId = ++listenerId;
	  }

	  events.forEach(function (event) {
	    const ev = event.split('.')[0];
	    const ns = event.split('.')[1] || '*';

	    // ensure valid object
	    bag[ev] = bag[ev] || {};
	    bag[ev][ns] = bag[ev][ns] || {};

	    // reference listener
	    bag[ev][ns][listener._svgjsListenerId] = l;

	    // add listener
	    n.addEventListener(ev, l, options || false);
	  });
	}

	// Add event unbinder in the SVG namespace
	function off(node, events, listener, options) {
	  const instance = makeInstance(node);
	  const bag = getEvents(instance);
	  const n = getEventTarget(instance);

	  // listener can be a function or a number
	  if (typeof listener === 'function') {
	    listener = listener._svgjsListenerId;
	    if (!listener) return
	  }

	  // events can be an array of events or a string or undefined
	  events = Array.isArray(events) ? events : (events || '').split(delimiter$1);

	  events.forEach(function (event) {
	    const ev = event && event.split('.')[0];
	    const ns = event && event.split('.')[1];
	    let namespace, l;

	    if (listener) {
	      // remove listener reference
	      if (bag[ev] && bag[ev][ns || '*']) {
	        // removeListener
	        n.removeEventListener(
	          ev,
	          bag[ev][ns || '*'][listener],
	          options || false
	        );

	        delete bag[ev][ns || '*'][listener];
	      }
	    } else if (ev && ns) {
	      // remove all listeners for a namespaced event
	      if (bag[ev] && bag[ev][ns]) {
	        for (l in bag[ev][ns]) {
	          off(n, [ev, ns].join('.'), l);
	        }

	        delete bag[ev][ns];
	      }
	    } else if (ns) {
	      // remove all listeners for a specific namespace
	      for (event in bag) {
	        for (namespace in bag[event]) {
	          if (ns === namespace) {
	            off(n, [event, ns].join('.'));
	          }
	        }
	      }
	    } else if (ev) {
	      // remove all listeners for the event
	      if (bag[ev]) {
	        for (namespace in bag[ev]) {
	          off(n, [ev, namespace].join('.'));
	        }

	        delete bag[ev];
	      }
	    } else {
	      // remove all listeners on a given node
	      for (event in bag) {
	        off(n, event);
	      }

	      clearEvents(instance);
	    }
	  });
	}

	function dispatch(node, event, data, options) {
	  const n = getEventTarget(node);

	  // Dispatch event
	  if (event instanceof globals.window.Event) {
	    n.dispatchEvent(event);
	  } else {
	    event = new globals.window.CustomEvent(event, {
	      detail: data,
	      cancelable: true,
	      ...options
	    });
	    n.dispatchEvent(event);
	  }
	  return event
	}

	class EventTarget extends Base {
	  addEventListener() {}

	  dispatch(event, data, options) {
	    return dispatch(this, event, data, options)
	  }

	  dispatchEvent(event) {
	    const bag = this.getEventHolder().events;
	    if (!bag) return true

	    const events = bag[event.type];

	    for (const i in events) {
	      for (const j in events[i]) {
	        events[i][j](event);
	      }
	    }

	    return !event.defaultPrevented
	  }

	  // Fire given event
	  fire(event, data, options) {
	    this.dispatch(event, data, options);
	    return this
	  }

	  getEventHolder() {
	    return this
	  }

	  getEventTarget() {
	    return this
	  }

	  // Unbind event from listener
	  off(event, listener, options) {
	    off(this, event, listener, options);
	    return this
	  }

	  // Bind given event to listener
	  on(event, listener, binding, options) {
	    on(this, event, listener, binding, options);
	    return this
	  }

	  removeEventListener() {}
	}

	register(EventTarget, 'EventTarget');

	function noop() {}

	// Default animation values
	const timeline = {
	  duration: 400,
	  ease: '>',
	  delay: 0
	};

	// Default attribute values
	const attrs = {
	  // fill and stroke
	  'fill-opacity': 1,
	  'stroke-opacity': 1,
	  'stroke-width': 0,
	  'stroke-linejoin': 'miter',
	  'stroke-linecap': 'butt',
	  fill: '#000000',
	  stroke: '#000000',
	  opacity: 1,

	  // position
	  x: 0,
	  y: 0,
	  cx: 0,
	  cy: 0,

	  // size
	  width: 0,
	  height: 0,

	  // radius
	  r: 0,
	  rx: 0,
	  ry: 0,

	  // gradient
	  offset: 0,
	  'stop-opacity': 1,
	  'stop-color': '#000000',

	  // text
	  'text-anchor': 'start'
	};

	class SVGArray extends Array {
	  constructor(...args) {
	    super(...args);
	    this.init(...args);
	  }

	  clone() {
	    return new this.constructor(this)
	  }

	  init(arr) {
	    // This catches the case, that native map tries to create an array with new Array(1)
	    if (typeof arr === 'number') return this
	    this.length = 0;
	    this.push(...this.parse(arr));
	    return this
	  }

	  // Parse whitespace separated string
	  parse(array = []) {
	    // If already is an array, no need to parse it
	    if (array instanceof Array) return array

	    return array.trim().split(delimiter$1).map(parseFloat)
	  }

	  toArray() {
	    return Array.prototype.concat.apply([], this)
	  }

	  toSet() {
	    return new Set(this)
	  }

	  toString() {
	    return this.join(' ')
	  }

	  // Flattens the array if needed
	  valueOf() {
	    const ret = [];
	    ret.push(...this);
	    return ret
	  }
	}

	// Module for unit conversions
	class SVGNumber {
	  // Initialize
	  constructor(...args) {
	    this.init(...args);
	  }

	  convert(unit) {
	    return new SVGNumber(this.value, unit)
	  }

	  // Divide number
	  divide(number) {
	    number = new SVGNumber(number);
	    return new SVGNumber(this / number, this.unit || number.unit)
	  }

	  init(value, unit) {
	    unit = Array.isArray(value) ? value[1] : unit;
	    value = Array.isArray(value) ? value[0] : value;

	    // initialize defaults
	    this.value = 0;
	    this.unit = unit || '';

	    // parse value
	    if (typeof value === 'number') {
	      // ensure a valid numeric value
	      this.value = isNaN(value)
	        ? 0
	        : !isFinite(value)
	          ? value < 0
	            ? -3.4e38
	            : +3.4e38
	          : value;
	    } else if (typeof value === 'string') {
	      unit = value.match(numberAndUnit);

	      if (unit) {
	        // make value numeric
	        this.value = parseFloat(unit[1]);

	        // normalize
	        if (unit[5] === '%') {
	          this.value /= 100;
	        } else if (unit[5] === 's') {
	          this.value *= 1000;
	        }

	        // store unit
	        this.unit = unit[5];
	      }
	    } else {
	      if (value instanceof SVGNumber) {
	        this.value = value.valueOf();
	        this.unit = value.unit;
	      }
	    }

	    return this
	  }

	  // Subtract number
	  minus(number) {
	    number = new SVGNumber(number);
	    return new SVGNumber(this - number, this.unit || number.unit)
	  }

	  // Add number
	  plus(number) {
	    number = new SVGNumber(number);
	    return new SVGNumber(this + number, this.unit || number.unit)
	  }

	  // Multiply number
	  times(number) {
	    number = new SVGNumber(number);
	    return new SVGNumber(this * number, this.unit || number.unit)
	  }

	  toArray() {
	    return [this.value, this.unit]
	  }

	  toJSON() {
	    return this.toString()
	  }

	  toString() {
	    return (
	      (this.unit === '%'
	        ? ~~(this.value * 1e8) / 1e6
	        : this.unit === 's'
	          ? this.value / 1e3
	          : this.value) + this.unit
	    )
	  }

	  valueOf() {
	    return this.value
	  }
	}

	const colorAttributes = new Set([
	  'fill',
	  'stroke',
	  'color',
	  'bgcolor',
	  'stop-color',
	  'flood-color',
	  'lighting-color'
	]);

	const hooks = [];
	function registerAttrHook(fn) {
	  hooks.push(fn);
	}

	// Set svg element attribute
	function attr(attr, val, ns) {
	  // act as full getter
	  if (attr == null) {
	    // get an object of attributes
	    attr = {};
	    val = this.node.attributes;

	    for (const node of val) {
	      attr[node.nodeName] = isNumber.test(node.nodeValue)
	        ? parseFloat(node.nodeValue)
	        : node.nodeValue;
	    }

	    return attr
	  } else if (attr instanceof Array) {
	    // loop through array and get all values
	    return attr.reduce((last, curr) => {
	      last[curr] = this.attr(curr);
	      return last
	    }, {})
	  } else if (typeof attr === 'object' && attr.constructor === Object) {
	    // apply every attribute individually if an object is passed
	    for (val in attr) this.attr(val, attr[val]);
	  } else if (val === null) {
	    // remove value
	    this.node.removeAttribute(attr);
	  } else if (val == null) {
	    // act as a getter if the first and only argument is not an object
	    val = this.node.getAttribute(attr);
	    return val == null
	      ? attrs[attr]
	      : isNumber.test(val)
	        ? parseFloat(val)
	        : val
	  } else {
	    // Loop through hooks and execute them to convert value
	    val = hooks.reduce((_val, hook) => {
	      return hook(attr, _val, this)
	    }, val);

	    // ensure correct numeric values (also accepts NaN and Infinity)
	    if (typeof val === 'number') {
	      val = new SVGNumber(val);
	    } else if (colorAttributes.has(attr) && Color.isColor(val)) {
	      // ensure full hex color
	      val = new Color(val);
	    } else if (val.constructor === Array) {
	      // Check for plain arrays and parse array values
	      val = new SVGArray(val);
	    }

	    // if the passed attribute is leading...
	    if (attr === 'leading') {
	      // ... call the leading method instead
	      if (this.leading) {
	        this.leading(val);
	      }
	    } else {
	      // set given attribute on node
	      typeof ns === 'string'
	        ? this.node.setAttributeNS(ns, attr, val.toString())
	        : this.node.setAttribute(attr, val.toString());
	    }

	    // rebuild if required
	    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {
	      this.rebuild();
	    }
	  }

	  return this
	}

	class Dom extends EventTarget {
	  constructor(node, attrs) {
	    super();
	    this.node = node;
	    this.type = node.nodeName;

	    if (attrs && node !== attrs) {
	      this.attr(attrs);
	    }
	  }

	  // Add given element at a position
	  add(element, i) {
	    element = makeInstance(element);

	    // If non-root svg nodes are added we have to remove their namespaces
	    if (
	      element.removeNamespace &&
	      this.node instanceof globals.window.SVGElement
	    ) {
	      element.removeNamespace();
	    }

	    if (i == null) {
	      this.node.appendChild(element.node);
	    } else if (element.node !== this.node.childNodes[i]) {
	      this.node.insertBefore(element.node, this.node.childNodes[i]);
	    }

	    return this
	  }

	  // Add element to given container and return self
	  addTo(parent, i) {
	    return makeInstance(parent).put(this, i)
	  }

	  // Returns all child elements
	  children() {
	    return new List(
	      map(this.node.children, function (node) {
	        return adopt(node)
	      })
	    )
	  }

	  // Remove all elements in this container
	  clear() {
	    // remove children
	    while (this.node.hasChildNodes()) {
	      this.node.removeChild(this.node.lastChild);
	    }

	    return this
	  }

	  // Clone element
	  clone(deep = true, assignNewIds = true) {
	    // write dom data to the dom so the clone can pickup the data
	    this.writeDataToDom();

	    // clone element
	    let nodeClone = this.node.cloneNode(deep);
	    if (assignNewIds) {
	      // assign new id
	      nodeClone = assignNewId(nodeClone);
	    }
	    return new this.constructor(nodeClone)
	  }

	  // Iterates over all children and invokes a given block
	  each(block, deep) {
	    const children = this.children();
	    let i, il;

	    for (i = 0, il = children.length; i < il; i++) {
	      block.apply(children[i], [i, children]);

	      if (deep) {
	        children[i].each(block, deep);
	      }
	    }

	    return this
	  }

	  element(nodeName, attrs) {
	    return this.put(new Dom(create(nodeName), attrs))
	  }

	  // Get first child
	  first() {
	    return adopt(this.node.firstChild)
	  }

	  // Get a element at the given index
	  get(i) {
	    return adopt(this.node.childNodes[i])
	  }

	  getEventHolder() {
	    return this.node
	  }

	  getEventTarget() {
	    return this.node
	  }

	  // Checks if the given element is a child
	  has(element) {
	    return this.index(element) >= 0
	  }

	  html(htmlOrFn, outerHTML) {
	    return this.xml(htmlOrFn, outerHTML, html)
	  }

	  // Get / set id
	  id(id) {
	    // generate new id if no id set
	    if (typeof id === 'undefined' && !this.node.id) {
	      this.node.id = eid(this.type);
	    }

	    // don't set directly with this.node.id to make `null` work correctly
	    return this.attr('id', id)
	  }

	  // Gets index of given element
	  index(element) {
	    return [].slice.call(this.node.childNodes).indexOf(element.node)
	  }

	  // Get the last child
	  last() {
	    return adopt(this.node.lastChild)
	  }

	  // matches the element vs a css selector
	  matches(selector) {
	    const el = this.node;
	    const matcher =
	      el.matches ||
	      el.matchesSelector ||
	      el.msMatchesSelector ||
	      el.mozMatchesSelector ||
	      el.webkitMatchesSelector ||
	      el.oMatchesSelector ||
	      null;
	    return matcher && matcher.call(el, selector)
	  }

	  // Returns the parent element instance
	  parent(type) {
	    let parent = this;

	    // check for parent
	    if (!parent.node.parentNode) return null

	    // get parent element
	    parent = adopt(parent.node.parentNode);

	    if (!type) return parent

	    // loop through ancestors if type is given
	    do {
	      if (
	        typeof type === 'string' ? parent.matches(type) : parent instanceof type
	      )
	        return parent
	    } while ((parent = adopt(parent.node.parentNode)))

	    return parent
	  }

	  // Basically does the same as `add()` but returns the added element instead
	  put(element, i) {
	    element = makeInstance(element);
	    this.add(element, i);
	    return element
	  }

	  // Add element to given container and return container
	  putIn(parent, i) {
	    return makeInstance(parent).add(this, i)
	  }

	  // Remove element
	  remove() {
	    if (this.parent()) {
	      this.parent().removeElement(this);
	    }

	    return this
	  }

	  // Remove a given child
	  removeElement(element) {
	    this.node.removeChild(element.node);

	    return this
	  }

	  // Replace this with element
	  replace(element) {
	    element = makeInstance(element);

	    if (this.node.parentNode) {
	      this.node.parentNode.replaceChild(element.node, this.node);
	    }

	    return element
	  }

	  round(precision = 2, map = null) {
	    const factor = 10 ** precision;
	    const attrs = this.attr(map);

	    for (const i in attrs) {
	      if (typeof attrs[i] === 'number') {
	        attrs[i] = Math.round(attrs[i] * factor) / factor;
	      }
	    }

	    this.attr(attrs);
	    return this
	  }

	  // Import / Export raw svg
	  svg(svgOrFn, outerSVG) {
	    return this.xml(svgOrFn, outerSVG, svg)
	  }

	  // Return id on string conversion
	  toString() {
	    return this.id()
	  }

	  words(text) {
	    // This is faster than removing all children and adding a new one
	    this.node.textContent = text;
	    return this
	  }

	  wrap(node) {
	    const parent = this.parent();

	    if (!parent) {
	      return this.addTo(node)
	    }

	    const position = parent.index(this);
	    return parent.put(node, position).put(this)
	  }

	  // write svgjs data to the dom
	  writeDataToDom() {
	    // dump variables recursively
	    this.each(function () {
	      this.writeDataToDom();
	    });

	    return this
	  }

	  // Import / Export raw svg
	  xml(xmlOrFn, outerXML, ns) {
	    if (typeof xmlOrFn === 'boolean') {
	      ns = outerXML;
	      outerXML = xmlOrFn;
	      xmlOrFn = null;
	    }

	    // act as getter if no svg string is given
	    if (xmlOrFn == null || typeof xmlOrFn === 'function') {
	      // The default for exports is, that the outerNode is included
	      outerXML = outerXML == null ? true : outerXML;

	      // write svgjs data to the dom
	      this.writeDataToDom();
	      let current = this;

	      // An export modifier was passed
	      if (xmlOrFn != null) {
	        current = adopt(current.node.cloneNode(true));

	        // If the user wants outerHTML we need to process this node, too
	        if (outerXML) {
	          const result = xmlOrFn(current);
	          current = result || current;

	          // The user does not want this node? Well, then he gets nothing
	          if (result === false) return ''
	        }

	        // Deep loop through all children and apply modifier
	        current.each(function () {
	          const result = xmlOrFn(this);
	          const _this = result || this;

	          // If modifier returns false, discard node
	          if (result === false) {
	            this.remove();

	            // If modifier returns new node, use it
	          } else if (result && this !== _this) {
	            this.replace(_this);
	          }
	        }, true);
	      }

	      // Return outer or inner content
	      return outerXML ? current.node.outerHTML : current.node.innerHTML
	    }

	    // Act as setter if we got a string

	    // The default for import is, that the current node is not replaced
	    outerXML = outerXML == null ? false : outerXML;

	    // Create temporary holder
	    const well = create('wrapper', ns);
	    const fragment = globals.document.createDocumentFragment();

	    // Dump raw svg
	    well.innerHTML = xmlOrFn;

	    // Transplant nodes into the fragment
	    for (let len = well.children.length; len--; ) {
	      fragment.appendChild(well.firstElementChild);
	    }

	    const parent = this.parent();

	    // Add the whole fragment at once
	    return outerXML ? this.replace(fragment) && parent : this.add(fragment)
	  }
	}

	extend(Dom, { attr, find, findOne });
	register(Dom, 'Dom');

	class Element extends Dom {
	  constructor(node, attrs) {
	    super(node, attrs);

	    // initialize data object
	    this.dom = {};

	    // create circular reference
	    this.node.instance = this;

	    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {
	      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)
	      this.setData(
	        JSON.parse(node.getAttribute('data-svgjs')) ??
	          JSON.parse(node.getAttribute('svgjs:data')) ??
	          {}
	      );
	    }
	  }

	  // Move element by its center
	  center(x, y) {
	    return this.cx(x).cy(y)
	  }

	  // Move by center over x-axis
	  cx(x) {
	    return x == null
	      ? this.x() + this.width() / 2
	      : this.x(x - this.width() / 2)
	  }

	  // Move by center over y-axis
	  cy(y) {
	    return y == null
	      ? this.y() + this.height() / 2
	      : this.y(y - this.height() / 2)
	  }

	  // Get defs
	  defs() {
	    const root = this.root();
	    return root && root.defs()
	  }

	  // Relative move over x and y axes
	  dmove(x, y) {
	    return this.dx(x).dy(y)
	  }

	  // Relative move over x axis
	  dx(x = 0) {
	    return this.x(new SVGNumber(x).plus(this.x()))
	  }

	  // Relative move over y axis
	  dy(y = 0) {
	    return this.y(new SVGNumber(y).plus(this.y()))
	  }

	  getEventHolder() {
	    return this
	  }

	  // Set height of element
	  height(height) {
	    return this.attr('height', height)
	  }

	  // Move element to given x and y values
	  move(x, y) {
	    return this.x(x).y(y)
	  }

	  // return array of all ancestors of given type up to the root svg
	  parents(until = this.root()) {
	    const isSelector = typeof until === 'string';
	    if (!isSelector) {
	      until = makeInstance(until);
	    }
	    const parents = new List();
	    let parent = this;

	    while (
	      (parent = parent.parent()) &&
	      parent.node !== globals.document &&
	      parent.nodeName !== '#document-fragment'
	    ) {
	      parents.push(parent);

	      if (!isSelector && parent.node === until.node) {
	        break
	      }
	      if (isSelector && parent.matches(until)) {
	        break
	      }
	      if (parent.node === this.root().node) {
	        // We worked our way to the root and didn't match `until`
	        return null
	      }
	    }

	    return parents
	  }

	  // Get referenced element form attribute value
	  reference(attr) {
	    attr = this.attr(attr);
	    if (!attr) return null

	    const m = (attr + '').match(reference);
	    return m ? makeInstance(m[1]) : null
	  }

	  // Get parent document
	  root() {
	    const p = this.parent(getClass(root));
	    return p && p.root()
	  }

	  // set given data to the elements data property
	  setData(o) {
	    this.dom = o;
	    return this
	  }

	  // Set element size to given width and height
	  size(width, height) {
	    const p = proportionalSize(this, width, height);

	    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height))
	  }

	  // Set width of element
	  width(width) {
	    return this.attr('width', width)
	  }

	  // write svgjs data to the dom
	  writeDataToDom() {
	    writeDataToDom(this, this.dom);
	    return super.writeDataToDom()
	  }

	  // Move over x-axis
	  x(x) {
	    return this.attr('x', x)
	  }

	  // Move over y-axis
	  y(y) {
	    return this.attr('y', y)
	  }
	}

	extend(Element, {
	  bbox,
	  rbox,
	  inside,
	  point,
	  ctm,
	  screenCTM
	});

	register(Element, 'Element');

	// Define list of available attributes for stroke and fill
	const sugar = {
	  stroke: [
	    'color',
	    'width',
	    'opacity',
	    'linecap',
	    'linejoin',
	    'miterlimit',
	    'dasharray',
	    'dashoffset'
	  ],
	  fill: ['color', 'opacity', 'rule'],
	  prefix: function (t, a) {
	    return a === 'color' ? t : t + '-' + a
	  }
	}

	// Add sugar for fill and stroke
	;['fill', 'stroke'].forEach(function (m) {
	  const extension = {};
	  let i;

	  extension[m] = function (o) {
	    if (typeof o === 'undefined') {
	      return this.attr(m)
	    }
	    if (
	      typeof o === 'string' ||
	      o instanceof Color ||
	      Color.isRgb(o) ||
	      o instanceof Element
	    ) {
	      this.attr(m, o);
	    } else {
	      // set all attributes from sugar.fill and sugar.stroke list
	      for (i = sugar[m].length - 1; i >= 0; i--) {
	        if (o[sugar[m][i]] != null) {
	          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);
	        }
	      }
	    }

	    return this
	  };

	  registerMethods(['Element', 'Runner'], extension);
	});

	registerMethods(['Element', 'Runner'], {
	  // Let the user set the matrix directly
	  matrix: function (mat, b, c, d, e, f) {
	    // Act as a getter
	    if (mat == null) {
	      return new Matrix(this)
	    }

	    // Act as a setter, the user can pass a matrix or a set of numbers
	    return this.attr('transform', new Matrix(mat, b, c, d, e, f))
	  },

	  // Map rotation to transform
	  rotate: function (angle, cx, cy) {
	    return this.transform({ rotate: angle, ox: cx, oy: cy }, true)
	  },

	  // Map skew to transform
	  skew: function (x, y, cx, cy) {
	    return arguments.length === 1 || arguments.length === 3
	      ? this.transform({ skew: x, ox: y, oy: cx }, true)
	      : this.transform({ skew: [x, y], ox: cx, oy: cy }, true)
	  },

	  shear: function (lam, cx, cy) {
	    return this.transform({ shear: lam, ox: cx, oy: cy }, true)
	  },

	  // Map scale to transform
	  scale: function (x, y, cx, cy) {
	    return arguments.length === 1 || arguments.length === 3
	      ? this.transform({ scale: x, ox: y, oy: cx }, true)
	      : this.transform({ scale: [x, y], ox: cx, oy: cy }, true)
	  },

	  // Map translate to transform
	  translate: function (x, y) {
	    return this.transform({ translate: [x, y] }, true)
	  },

	  // Map relative translations to transform
	  relative: function (x, y) {
	    return this.transform({ relative: [x, y] }, true)
	  },

	  // Map flip to transform
	  flip: function (direction = 'both', origin = 'center') {
	    if ('xybothtrue'.indexOf(direction) === -1) {
	      origin = direction;
	      direction = 'both';
	    }

	    return this.transform({ flip: direction, origin: origin }, true)
	  },

	  // Opacity
	  opacity: function (value) {
	    return this.attr('opacity', value)
	  }
	});

	registerMethods('radius', {
	  // Add x and y radius
	  radius: function (x, y = x) {
	    const type = (this._element || this).type;
	    return type === 'radialGradient'
	      ? this.attr('r', new SVGNumber(x))
	      : this.rx(x).ry(y)
	  }
	});

	registerMethods('Path', {
	  // Get path length
	  length: function () {
	    return this.node.getTotalLength()
	  },
	  // Get point at length
	  pointAt: function (length) {
	    return new Point(this.node.getPointAtLength(length))
	  }
	});

	registerMethods(['Element', 'Runner'], {
	  // Set font
	  font: function (a, v) {
	    if (typeof a === 'object') {
	      for (v in a) this.font(v, a[v]);
	      return this
	    }

	    return a === 'leading'
	      ? this.leading(v)
	      : a === 'anchor'
	        ? this.attr('text-anchor', v)
	        : a === 'size' ||
	            a === 'family' ||
	            a === 'weight' ||
	            a === 'stretch' ||
	            a === 'variant' ||
	            a === 'style'
	          ? this.attr('font-' + a, v)
	          : this.attr(a, v)
	  }
	});

	// Add events to elements
	const methods = [
	  'click',
	  'dblclick',
	  'mousedown',
	  'mouseup',
	  'mouseover',
	  'mouseout',
	  'mousemove',
	  'mouseenter',
	  'mouseleave',
	  'touchstart',
	  'touchmove',
	  'touchleave',
	  'touchend',
	  'touchcancel',
	  'contextmenu',
	  'wheel',
	  'pointerdown',
	  'pointermove',
	  'pointerup',
	  'pointerleave',
	  'pointercancel'
	].reduce(function (last, event) {
	  // add event to Element
	  const fn = function (f) {
	    if (f === null) {
	      this.off(event);
	    } else {
	      this.on(event, f);
	    }
	    return this
	  };

	  last[event] = fn;
	  return last
	}, {});

	registerMethods('Element', methods);

	// Reset all transformations
	function untransform() {
	  return this.attr('transform', null)
	}

	// merge the whole transformation chain into one matrix and returns it
	function matrixify() {
	  const matrix = (this.attr('transform') || '')
	    // split transformations
	    .split(transforms)
	    .slice(0, -1)
	    .map(function (str) {
	      // generate key => value pairs
	      const kv = str.trim().split('(');
	      return [
	        kv[0],
	        kv[1].split(delimiter$1).map(function (str) {
	          return parseFloat(str)
	        })
	      ]
	    })
	    .reverse()
	    // merge every transformation into one matrix
	    .reduce(function (matrix, transform) {
	      if (transform[0] === 'matrix') {
	        return matrix.lmultiply(Matrix.fromArray(transform[1]))
	      }
	      return matrix[transform[0]].apply(matrix, transform[1])
	    }, new Matrix());

	  return matrix
	}

	// add an element to another parent without changing the visual representation on the screen
	function toParent(parent, i) {
	  if (this === parent) return this

	  if (isDescriptive(this.node)) return this.addTo(parent, i)

	  const ctm = this.screenCTM();
	  const pCtm = parent.screenCTM().inverse();

	  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm));

	  return this
	}

	// same as above with parent equals root-svg
	function toRoot(i) {
	  return this.toParent(this.root(), i)
	}

	// Add transformations
	function transform(o, relative) {
	  // Act as a getter if no object was passed
	  if (o == null || typeof o === 'string') {
	    const decomposed = new Matrix(this).decompose();
	    return o == null ? decomposed : decomposed[o]
	  }

	  if (!Matrix.isMatrixLike(o)) {
	    // Set the origin according to the defined transform
	    o = { ...o, origin: getOrigin(o, this) };
	  }

	  // The user can pass a boolean, an Element or an Matrix or nothing
	  const cleanRelative = relative === true ? this : relative || false;
	  const result = new Matrix(cleanRelative).transform(o);
	  return this.attr('transform', result)
	}

	registerMethods('Element', {
	  untransform,
	  matrixify,
	  toParent,
	  toRoot,
	  transform
	});

	class Container extends Element {
	  flatten() {
	    this.each(function () {
	      if (this instanceof Container) {
	        return this.flatten().ungroup()
	      }
	    });

	    return this
	  }

	  ungroup(parent = this.parent(), index = parent.index(this)) {
	    // when parent != this, we want append all elements to the end
	    index = index === -1 ? parent.children().length : index;

	    this.each(function (i, children) {
	      // reverse each
	      return children[children.length - i - 1].toParent(parent, index)
	    });

	    return this.remove()
	  }
	}

	register(Container, 'Container');

	class Defs extends Container {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('defs', node), attrs);
	  }

	  flatten() {
	    return this
	  }

	  ungroup() {
	    return this
	  }
	}

	register(Defs, 'Defs');

	class Shape extends Element {}

	register(Shape, 'Shape');

	// Radius x value
	function rx(rx) {
	  return this.attr('rx', rx)
	}

	// Radius y value
	function ry(ry) {
	  return this.attr('ry', ry)
	}

	// Move over x-axis
	function x$3(x) {
	  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())
	}

	// Move over y-axis
	function y$3(y) {
	  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())
	}

	// Move by center over x-axis
	function cx$1(x) {
	  return this.attr('cx', x)
	}

	// Move by center over y-axis
	function cy$1(y) {
	  return this.attr('cy', y)
	}

	// Set width of element
	function width$2(width) {
	  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2))
	}

	// Set height of element
	function height$2(height) {
	  return height == null
	    ? this.ry() * 2
	    : this.ry(new SVGNumber(height).divide(2))
	}

	var circled = /*#__PURE__*/Object.freeze({
		__proto__: null,
		cx: cx$1,
		cy: cy$1,
		height: height$2,
		rx: rx,
		ry: ry,
		width: width$2,
		x: x$3,
		y: y$3
	});

	class Ellipse extends Shape {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('ellipse', node), attrs);
	  }

	  size(width, height) {
	    const p = proportionalSize(this, width, height);

	    return this.rx(new SVGNumber(p.width).divide(2)).ry(
	      new SVGNumber(p.height).divide(2)
	    )
	  }
	}

	extend(Ellipse, circled);

	registerMethods('Container', {
	  // Create an ellipse
	  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {
	    return this.put(new Ellipse()).size(width, height).move(0, 0)
	  })
	});

	register(Ellipse, 'Ellipse');

	class Fragment extends Dom {
	  constructor(node = globals.document.createDocumentFragment()) {
	    super(node);
	  }

	  // Import / Export raw xml
	  xml(xmlOrFn, outerXML, ns) {
	    if (typeof xmlOrFn === 'boolean') {
	      ns = outerXML;
	      outerXML = xmlOrFn;
	      xmlOrFn = null;
	    }

	    // because this is a fragment we have to put all elements into a wrapper first
	    // before we can get the innerXML from it
	    if (xmlOrFn == null || typeof xmlOrFn === 'function') {
	      const wrapper = new Dom(create('wrapper', ns));
	      wrapper.add(this.node.cloneNode(true));

	      return wrapper.xml(false, ns)
	    }

	    // Act as setter if we got a string
	    return super.xml(xmlOrFn, false, ns)
	  }
	}

	register(Fragment, 'Fragment');

	function from(x, y) {
	  return (this._element || this).type === 'radialGradient'
	    ? this.attr({ fx: new SVGNumber(x), fy: new SVGNumber(y) })
	    : this.attr({ x1: new SVGNumber(x), y1: new SVGNumber(y) })
	}

	function to(x, y) {
	  return (this._element || this).type === 'radialGradient'
	    ? this.attr({ cx: new SVGNumber(x), cy: new SVGNumber(y) })
	    : this.attr({ x2: new SVGNumber(x), y2: new SVGNumber(y) })
	}

	var gradiented = /*#__PURE__*/Object.freeze({
		__proto__: null,
		from: from,
		to: to
	});

	class Gradient extends Container {
	  constructor(type, attrs) {
	    super(
	      nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type),
	      attrs
	    );
	  }

	  // custom attr to handle transform
	  attr(a, b, c) {
	    if (a === 'transform') a = 'gradientTransform';
	    return super.attr(a, b, c)
	  }

	  bbox() {
	    return new Box()
	  }

	  targets() {
	    return baseFind('svg [fill*=' + this.id() + ']')
	  }

	  // Alias string conversion to fill
	  toString() {
	    return this.url()
	  }

	  // Update gradient
	  update(block) {
	    // remove all stops
	    this.clear();

	    // invoke passed block
	    if (typeof block === 'function') {
	      block.call(this, this);
	    }

	    return this
	  }

	  // Return the fill id
	  url() {
	    return 'url(#' + this.id() + ')'
	  }
	}

	extend(Gradient, gradiented);

	registerMethods({
	  Container: {
	    // Create gradient element in defs
	    gradient(...args) {
	      return this.defs().gradient(...args)
	    }
	  },
	  // define gradient
	  Defs: {
	    gradient: wrapWithAttrCheck(function (type, block) {
	      return this.put(new Gradient(type)).update(block)
	    })
	  }
	});

	register(Gradient, 'Gradient');

	class Pattern extends Container {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('pattern', node), attrs);
	  }

	  // custom attr to handle transform
	  attr(a, b, c) {
	    if (a === 'transform') a = 'patternTransform';
	    return super.attr(a, b, c)
	  }

	  bbox() {
	    return new Box()
	  }

	  targets() {
	    return baseFind('svg [fill*=' + this.id() + ']')
	  }

	  // Alias string conversion to fill
	  toString() {
	    return this.url()
	  }

	  // Update pattern by rebuilding
	  update(block) {
	    // remove content
	    this.clear();

	    // invoke passed block
	    if (typeof block === 'function') {
	      block.call(this, this);
	    }

	    return this
	  }

	  // Return the fill id
	  url() {
	    return 'url(#' + this.id() + ')'
	  }
	}

	registerMethods({
	  Container: {
	    // Create pattern element in defs
	    pattern(...args) {
	      return this.defs().pattern(...args)
	    }
	  },
	  Defs: {
	    pattern: wrapWithAttrCheck(function (width, height, block) {
	      return this.put(new Pattern()).update(block).attr({
	        x: 0,
	        y: 0,
	        width: width,
	        height: height,
	        patternUnits: 'userSpaceOnUse'
	      })
	    })
	  }
	});

	register(Pattern, 'Pattern');

	class Image extends Shape {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('image', node), attrs);
	  }

	  // (re)load image
	  load(url, callback) {
	    if (!url) return this

	    const img = new globals.window.Image();

	    on(
	      img,
	      'load',
	      function (e) {
	        const p = this.parent(Pattern);

	        // ensure image size
	        if (this.width() === 0 && this.height() === 0) {
	          this.size(img.width, img.height);
	        }

	        if (p instanceof Pattern) {
	          // ensure pattern size if not set
	          if (p.width() === 0 && p.height() === 0) {
	            p.size(this.width(), this.height());
	          }
	        }

	        if (typeof callback === 'function') {
	          callback.call(this, e);
	        }
	      },
	      this
	    );

	    on(img, 'load error', function () {
	      // dont forget to unbind memory leaking events
	      off(img);
	    });

	    return this.attr('href', (img.src = url), xlink)
	  }
	}

	registerAttrHook(function (attr, val, _this) {
	  // convert image fill and stroke to patterns
	  if (attr === 'fill' || attr === 'stroke') {
	    if (isImage.test(val)) {
	      val = _this.root().defs().image(val);
	    }
	  }

	  if (val instanceof Image) {
	    val = _this
	      .root()
	      .defs()
	      .pattern(0, 0, (pattern) => {
	        pattern.add(val);
	      });
	  }

	  return val
	});

	registerMethods({
	  Container: {
	    // create image element, load image and set its size
	    image: wrapWithAttrCheck(function (source, callback) {
	      return this.put(new Image()).size(0, 0).load(source, callback)
	    })
	  }
	});

	register(Image, 'Image');

	class PointArray extends SVGArray {
	  // Get bounding box of points
	  bbox() {
	    let maxX = -Infinity;
	    let maxY = -Infinity;
	    let minX = Infinity;
	    let minY = Infinity;
	    this.forEach(function (el) {
	      maxX = Math.max(el[0], maxX);
	      maxY = Math.max(el[1], maxY);
	      minX = Math.min(el[0], minX);
	      minY = Math.min(el[1], minY);
	    });
	    return new Box(minX, minY, maxX - minX, maxY - minY)
	  }

	  // Move point string
	  move(x, y) {
	    const box = this.bbox();

	    // get relative offset
	    x -= box.x;
	    y -= box.y;

	    // move every point
	    if (!isNaN(x) && !isNaN(y)) {
	      for (let i = this.length - 1; i >= 0; i--) {
	        this[i] = [this[i][0] + x, this[i][1] + y];
	      }
	    }

	    return this
	  }

	  // Parse point string and flat array
	  parse(array = [0, 0]) {
	    const points = [];

	    // if it is an array, we flatten it and therefore clone it to 1 depths
	    if (array instanceof Array) {
	      array = Array.prototype.concat.apply([], array);
	    } else {
	      // Else, it is considered as a string
	      // parse points
	      array = array.trim().split(delimiter$1).map(parseFloat);
	    }

	    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints
	    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.
	    if (array.length % 2 !== 0) array.pop();

	    // wrap points in two-tuples
	    for (let i = 0, len = array.length; i < len; i = i + 2) {
	      points.push([array[i], array[i + 1]]);
	    }

	    return points
	  }

	  // Resize poly string
	  size(width, height) {
	    let i;
	    const box = this.bbox();

	    // recalculate position of all points according to new size
	    for (i = this.length - 1; i >= 0; i--) {
	      if (box.width)
	        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x;
	      if (box.height)
	        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y;
	    }

	    return this
	  }

	  // Convert array to line object
	  toLine() {
	    return {
	      x1: this[0][0],
	      y1: this[0][1],
	      x2: this[1][0],
	      y2: this[1][1]
	    }
	  }

	  // Convert array to string
	  toString() {
	    const array = [];
	    // convert to a poly point string
	    for (let i = 0, il = this.length; i < il; i++) {
	      array.push(this[i].join(','));
	    }

	    return array.join(' ')
	  }

	  transform(m) {
	    return this.clone().transformO(m)
	  }

	  // transform points with matrix (similar to Point.transform)
	  transformO(m) {
	    if (!Matrix.isMatrixLike(m)) {
	      m = new Matrix(m);
	    }

	    for (let i = this.length; i--; ) {
	      // Perform the matrix multiplication
	      const [x, y] = this[i];
	      this[i][0] = m.a * x + m.c * y + m.e;
	      this[i][1] = m.b * x + m.d * y + m.f;
	    }

	    return this
	  }
	}

	const MorphArray = PointArray;

	// Move by left top corner over x-axis
	function x$2(x) {
	  return x == null ? this.bbox().x : this.move(x, this.bbox().y)
	}

	// Move by left top corner over y-axis
	function y$2(y) {
	  return y == null ? this.bbox().y : this.move(this.bbox().x, y)
	}

	// Set width of element
	function width$1(width) {
	  const b = this.bbox();
	  return width == null ? b.width : this.size(width, b.height)
	}

	// Set height of element
	function height$1(height) {
	  const b = this.bbox();
	  return height == null ? b.height : this.size(b.width, height)
	}

	var pointed = /*#__PURE__*/Object.freeze({
		__proto__: null,
		MorphArray: MorphArray,
		height: height$1,
		width: width$1,
		x: x$2,
		y: y$2
	});

	class Line extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('line', node), attrs);
	  }

	  // Get array
	  array() {
	    return new PointArray([
	      [this.attr('x1'), this.attr('y1')],
	      [this.attr('x2'), this.attr('y2')]
	    ])
	  }

	  // Move by left top corner
	  move(x, y) {
	    return this.attr(this.array().move(x, y).toLine())
	  }

	  // Overwrite native plot() method
	  plot(x1, y1, x2, y2) {
	    if (x1 == null) {
	      return this.array()
	    } else if (typeof y1 !== 'undefined') {
	      x1 = { x1, y1, x2, y2 };
	    } else {
	      x1 = new PointArray(x1).toLine();
	    }

	    return this.attr(x1)
	  }

	  // Set element size to given width and height
	  size(width, height) {
	    const p = proportionalSize(this, width, height);
	    return this.attr(this.array().size(p.width, p.height).toLine())
	  }
	}

	extend(Line, pointed);

	registerMethods({
	  Container: {
	    // Create a line element
	    line: wrapWithAttrCheck(function (...args) {
	      // make sure plot is called as a setter
	      // x1 is not necessarily a number, it can also be an array, a string and a PointArray
	      return Line.prototype.plot.apply(
	        this.put(new Line()),
	        args[0] != null ? args : [0, 0, 0, 0]
	      )
	    })
	  }
	});

	register(Line, 'Line');

	class Marker extends Container {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('marker', node), attrs);
	  }

	  // Set height of element
	  height(height) {
	    return this.attr('markerHeight', height)
	  }

	  orient(orient) {
	    return this.attr('orient', orient)
	  }

	  // Set marker refX and refY
	  ref(x, y) {
	    return this.attr('refX', x).attr('refY', y)
	  }

	  // Return the fill id
	  toString() {
	    return 'url(#' + this.id() + ')'
	  }

	  // Update marker
	  update(block) {
	    // remove all content
	    this.clear();

	    // invoke passed block
	    if (typeof block === 'function') {
	      block.call(this, this);
	    }

	    return this
	  }

	  // Set width of element
	  width(width) {
	    return this.attr('markerWidth', width)
	  }
	}

	registerMethods({
	  Container: {
	    marker(...args) {
	      // Create marker element in defs
	      return this.defs().marker(...args)
	    }
	  },
	  Defs: {
	    // Create marker
	    marker: wrapWithAttrCheck(function (width, height, block) {
	      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto
	      return this.put(new Marker())
	        .size(width, height)
	        .ref(width / 2, height / 2)
	        .viewbox(0, 0, width, height)
	        .attr('orient', 'auto')
	        .update(block)
	    })
	  },
	  marker: {
	    // Create and attach markers
	    marker(marker, width, height, block) {
	      let attr = ['marker'];

	      // Build attribute name
	      if (marker !== 'all') attr.push(marker);
	      attr = attr.join('-');

	      // Set marker attribute
	      marker =
	        arguments[1] instanceof Marker
	          ? arguments[1]
	          : this.defs().marker(width, height, block);

	      return this.attr(attr, marker)
	    }
	  }
	});

	register(Marker, 'Marker');

	/***
	Base Class
	==========
	The base stepper class that will be
	***/

	function makeSetterGetter(k, f) {
	  return function (v) {
	    if (v == null) return this[k]
	    this[k] = v;
	    if (f) f.call(this);
	    return this
	  }
	}

	const easing = {
	  '-': function (pos) {
	    return pos
	  },
	  '<>': function (pos) {
	    return -Math.cos(pos * Math.PI) / 2 + 0.5
	  },
	  '>': function (pos) {
	    return Math.sin((pos * Math.PI) / 2)
	  },
	  '<': function (pos) {
	    return -Math.cos((pos * Math.PI) / 2) + 1
	  },
	  bezier: function (x1, y1, x2, y2) {
	    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo
	    return function (t) {
	      if (t < 0) {
	        if (x1 > 0) {
	          return (y1 / x1) * t
	        } else if (x2 > 0) {
	          return (y2 / x2) * t
	        } else {
	          return 0
	        }
	      } else if (t > 1) {
	        if (x2 < 1) {
	          return ((1 - y2) / (1 - x2)) * t + (y2 - x2) / (1 - x2)
	        } else if (x1 < 1) {
	          return ((1 - y1) / (1 - x1)) * t + (y1 - x1) / (1 - x1)
	        } else {
	          return 1
	        }
	      } else {
	        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3
	      }
	    }
	  },
	  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo
	  steps: function (steps, stepPosition = 'end') {
	    // deal with "jump-" prefix
	    stepPosition = stepPosition.split('-').reverse()[0];

	    let jumps = steps;
	    if (stepPosition === 'none') {
	      --jumps;
	    } else if (stepPosition === 'both') {
	      ++jumps;
	    }

	    // The beforeFlag is essentially useless
	    return (t, beforeFlag = false) => {
	      // Step is called currentStep in referenced url
	      let step = Math.floor(t * steps);
	      const jumping = (t * step) % 1 === 0;

	      if (stepPosition === 'start' || stepPosition === 'both') {
	        ++step;
	      }

	      if (beforeFlag && jumping) {
	        --step;
	      }

	      if (t >= 0 && step < 0) {
	        step = 0;
	      }

	      if (t <= 1 && step > jumps) {
	        step = jumps;
	      }

	      return step / jumps
	    }
	  }
	};

	class Stepper {
	  done() {
	    return false
	  }
	}

	/***
	Easing Functions
	================
	***/

	class Ease extends Stepper {
	  constructor(fn = timeline.ease) {
	    super();
	    this.ease = easing[fn] || fn;
	  }

	  step(from, to, pos) {
	    if (typeof from !== 'number') {
	      return pos < 1 ? from : to
	    }
	    return from + (to - from) * this.ease(pos)
	  }
	}

	/***
	Controller Types
	================
	***/

	class Controller extends Stepper {
	  constructor(fn) {
	    super();
	    this.stepper = fn;
	  }

	  done(c) {
	    return c.done
	  }

	  step(current, target, dt, c) {
	    return this.stepper(current, target, dt, c)
	  }
	}

	function recalculate() {
	  // Apply the default parameters
	  const duration = (this._duration || 500) / 1000;
	  const overshoot = this._overshoot || 0;

	  // Calculate the PID natural response
	  const eps = 1e-10;
	  const pi = Math.PI;
	  const os = Math.log(overshoot / 100 + eps);
	  const zeta = -os / Math.sqrt(pi * pi + os * os);
	  const wn = 3.9 / (zeta * duration);

	  // Calculate the Spring values
	  this.d = 2 * zeta * wn;
	  this.k = wn * wn;
	}

	class Spring extends Controller {
	  constructor(duration = 500, overshoot = 0) {
	    super();
	    this.duration(duration).overshoot(overshoot);
	  }

	  step(current, target, dt, c) {
	    if (typeof current === 'string') return current
	    c.done = dt === Infinity;
	    if (dt === Infinity) return target
	    if (dt === 0) return current

	    if (dt > 100) dt = 16;

	    dt /= 1000;

	    // Get the previous velocity
	    const velocity = c.velocity || 0;

	    // Apply the control to get the new position and store it
	    const acceleration = -this.d * velocity - this.k * (current - target);
	    const newPosition = current + velocity * dt + (acceleration * dt * dt) / 2;

	    // Store the velocity
	    c.velocity = velocity + acceleration * dt;

	    // Figure out if we have converged, and if so, pass the value
	    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002;
	    return c.done ? target : newPosition
	  }
	}

	extend(Spring, {
	  duration: makeSetterGetter('_duration', recalculate),
	  overshoot: makeSetterGetter('_overshoot', recalculate)
	});

	class PID extends Controller {
	  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {
	    super();
	    this.p(p).i(i).d(d).windup(windup);
	  }

	  step(current, target, dt, c) {
	    if (typeof current === 'string') return current
	    c.done = dt === Infinity;

	    if (dt === Infinity) return target
	    if (dt === 0) return current

	    const p = target - current;
	    let i = (c.integral || 0) + p * dt;
	    const d = (p - (c.error || 0)) / dt;
	    const windup = this._windup;

	    // antiwindup
	    if (windup !== false) {
	      i = Math.max(-windup, Math.min(i, windup));
	    }

	    c.error = p;
	    c.integral = i;

	    c.done = Math.abs(p) < 0.001;

	    return c.done ? target : current + (this.P * p + this.I * i + this.D * d)
	  }
	}

	extend(PID, {
	  windup: makeSetterGetter('_windup'),
	  p: makeSetterGetter('P'),
	  i: makeSetterGetter('I'),
	  d: makeSetterGetter('D')
	});

	const segmentParameters = {
	  M: 2,
	  L: 2,
	  H: 1,
	  V: 1,
	  C: 6,
	  S: 4,
	  Q: 4,
	  T: 2,
	  A: 7,
	  Z: 0
	};

	const pathHandlers = {
	  M: function (c, p, p0) {
	    p.x = p0.x = c[0];
	    p.y = p0.y = c[1];

	    return ['M', p.x, p.y]
	  },
	  L: function (c, p) {
	    p.x = c[0];
	    p.y = c[1];
	    return ['L', c[0], c[1]]
	  },
	  H: function (c, p) {
	    p.x = c[0];
	    return ['H', c[0]]
	  },
	  V: function (c, p) {
	    p.y = c[0];
	    return ['V', c[0]]
	  },
	  C: function (c, p) {
	    p.x = c[4];
	    p.y = c[5];
	    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]
	  },
	  S: function (c, p) {
	    p.x = c[2];
	    p.y = c[3];
	    return ['S', c[0], c[1], c[2], c[3]]
	  },
	  Q: function (c, p) {
	    p.x = c[2];
	    p.y = c[3];
	    return ['Q', c[0], c[1], c[2], c[3]]
	  },
	  T: function (c, p) {
	    p.x = c[0];
	    p.y = c[1];
	    return ['T', c[0], c[1]]
	  },
	  Z: function (c, p, p0) {
	    p.x = p0.x;
	    p.y = p0.y;
	    return ['Z']
	  },
	  A: function (c, p) {
	    p.x = c[5];
	    p.y = c[6];
	    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]
	  }
	};

	const mlhvqtcsaz = 'mlhvqtcsaz'.split('');

	for (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {
	  pathHandlers[mlhvqtcsaz[i]] = (function (i) {
	    return function (c, p, p0) {
	      if (i === 'H') c[0] = c[0] + p.x;
	      else if (i === 'V') c[0] = c[0] + p.y;
	      else if (i === 'A') {
	        c[5] = c[5] + p.x;
	        c[6] = c[6] + p.y;
	      } else {
	        for (let j = 0, jl = c.length; j < jl; ++j) {
	          c[j] = c[j] + (j % 2 ? p.y : p.x);
	        }
	      }

	      return pathHandlers[i](c, p, p0)
	    }
	  })(mlhvqtcsaz[i].toUpperCase());
	}

	function makeAbsolut(parser) {
	  const command = parser.segment[0];
	  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0)
	}

	function segmentComplete(parser) {
	  return (
	    parser.segment.length &&
	    parser.segment.length - 1 ===
	      segmentParameters[parser.segment[0].toUpperCase()]
	  )
	}

	function startNewSegment(parser, token) {
	  parser.inNumber && finalizeNumber(parser, false);
	  const pathLetter = isPathLetter.test(token);

	  if (pathLetter) {
	    parser.segment = [token];
	  } else {
	    const lastCommand = parser.lastCommand;
	    const small = lastCommand.toLowerCase();
	    const isSmall = lastCommand === small;
	    parser.segment = [small === 'm' ? (isSmall ? 'l' : 'L') : lastCommand];
	  }

	  parser.inSegment = true;
	  parser.lastCommand = parser.segment[0];

	  return pathLetter
	}

	function finalizeNumber(parser, inNumber) {
	  if (!parser.inNumber) throw new Error('Parser Error')
	  parser.number && parser.segment.push(parseFloat(parser.number));
	  parser.inNumber = inNumber;
	  parser.number = '';
	  parser.pointSeen = false;
	  parser.hasExponent = false;

	  if (segmentComplete(parser)) {
	    finalizeSegment(parser);
	  }
	}

	function finalizeSegment(parser) {
	  parser.inSegment = false;
	  if (parser.absolute) {
	    parser.segment = makeAbsolut(parser);
	  }
	  parser.segments.push(parser.segment);
	}

	function isArcFlag(parser) {
	  if (!parser.segment.length) return false
	  const isArc = parser.segment[0].toUpperCase() === 'A';
	  const length = parser.segment.length;

	  return isArc && (length === 4 || length === 5)
	}

	function isExponential(parser) {
	  return parser.lastToken.toUpperCase() === 'E'
	}

	const pathDelimiters = new Set([' ', ',', '\t', '\n', '\r', '\f']);
	function pathParser(d, toAbsolute = true) {
	  let index = 0;
	  let token = '';
	  const parser = {
	    segment: [],
	    inNumber: false,
	    number: '',
	    lastToken: '',
	    inSegment: false,
	    segments: [],
	    pointSeen: false,
	    hasExponent: false,
	    absolute: toAbsolute,
	    p0: new Point(),
	    p: new Point()
	  };

	  while (((parser.lastToken = token), (token = d.charAt(index++)))) {
	    if (!parser.inSegment) {
	      if (startNewSegment(parser, token)) {
	        continue
	      }
	    }

	    if (token === '.') {
	      if (parser.pointSeen || parser.hasExponent) {
	        finalizeNumber(parser, false);
	        --index;
	        continue
	      }
	      parser.inNumber = true;
	      parser.pointSeen = true;
	      parser.number += token;
	      continue
	    }

	    if (!isNaN(parseInt(token))) {
	      if (parser.number === '0' || isArcFlag(parser)) {
	        parser.inNumber = true;
	        parser.number = token;
	        finalizeNumber(parser, true);
	        continue
	      }

	      parser.inNumber = true;
	      parser.number += token;
	      continue
	    }

	    if (pathDelimiters.has(token)) {
	      if (parser.inNumber) {
	        finalizeNumber(parser, false);
	      }
	      continue
	    }

	    if (token === '-' || token === '+') {
	      if (parser.inNumber && !isExponential(parser)) {
	        finalizeNumber(parser, false);
	        --index;
	        continue
	      }
	      parser.number += token;
	      parser.inNumber = true;
	      continue
	    }

	    if (token.toUpperCase() === 'E') {
	      parser.number += token;
	      parser.hasExponent = true;
	      continue
	    }

	    if (isPathLetter.test(token)) {
	      if (parser.inNumber) {
	        finalizeNumber(parser, false);
	      } else if (!segmentComplete(parser)) {
	        throw new Error('parser Error')
	      } else {
	        finalizeSegment(parser);
	      }
	      --index;
	    }
	  }

	  if (parser.inNumber) {
	    finalizeNumber(parser, false);
	  }

	  if (parser.inSegment && segmentComplete(parser)) {
	    finalizeSegment(parser);
	  }

	  return parser.segments
	}

	function arrayToString(a) {
	  let s = '';
	  for (let i = 0, il = a.length; i < il; i++) {
	    s += a[i][0];

	    if (a[i][1] != null) {
	      s += a[i][1];

	      if (a[i][2] != null) {
	        s += ' ';
	        s += a[i][2];

	        if (a[i][3] != null) {
	          s += ' ';
	          s += a[i][3];
	          s += ' ';
	          s += a[i][4];

	          if (a[i][5] != null) {
	            s += ' ';
	            s += a[i][5];
	            s += ' ';
	            s += a[i][6];

	            if (a[i][7] != null) {
	              s += ' ';
	              s += a[i][7];
	            }
	          }
	        }
	      }
	    }
	  }

	  return s + ' '
	}

	class PathArray extends SVGArray {
	  // Get bounding box of path
	  bbox() {
	    parser().path.setAttribute('d', this.toString());
	    return new Box(parser.nodes.path.getBBox())
	  }

	  // Move path string
	  move(x, y) {
	    // get bounding box of current situation
	    const box = this.bbox();

	    // get relative offset
	    x -= box.x;
	    y -= box.y;

	    if (!isNaN(x) && !isNaN(y)) {
	      // move every point
	      for (let l, i = this.length - 1; i >= 0; i--) {
	        l = this[i][0];

	        if (l === 'M' || l === 'L' || l === 'T') {
	          this[i][1] += x;
	          this[i][2] += y;
	        } else if (l === 'H') {
	          this[i][1] += x;
	        } else if (l === 'V') {
	          this[i][1] += y;
	        } else if (l === 'C' || l === 'S' || l === 'Q') {
	          this[i][1] += x;
	          this[i][2] += y;
	          this[i][3] += x;
	          this[i][4] += y;

	          if (l === 'C') {
	            this[i][5] += x;
	            this[i][6] += y;
	          }
	        } else if (l === 'A') {
	          this[i][6] += x;
	          this[i][7] += y;
	        }
	      }
	    }

	    return this
	  }

	  // Absolutize and parse path to array
	  parse(d = 'M0 0') {
	    if (Array.isArray(d)) {
	      d = Array.prototype.concat.apply([], d).toString();
	    }

	    return pathParser(d)
	  }

	  // Resize path string
	  size(width, height) {
	    // get bounding box of current situation
	    const box = this.bbox();
	    let i, l;

	    // If the box width or height is 0 then we ignore
	    // transformations on the respective axis
	    box.width = box.width === 0 ? 1 : box.width;
	    box.height = box.height === 0 ? 1 : box.height;

	    // recalculate position of all points according to new size
	    for (i = this.length - 1; i >= 0; i--) {
	      l = this[i][0];

	      if (l === 'M' || l === 'L' || l === 'T') {
	        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x;
	        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y;
	      } else if (l === 'H') {
	        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x;
	      } else if (l === 'V') {
	        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y;
	      } else if (l === 'C' || l === 'S' || l === 'Q') {
	        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x;
	        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y;
	        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x;
	        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y;

	        if (l === 'C') {
	          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x;
	          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y;
	        }
	      } else if (l === 'A') {
	        // resize radii
	        this[i][1] = (this[i][1] * width) / box.width;
	        this[i][2] = (this[i][2] * height) / box.height;

	        // move position values
	        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x;
	        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y;
	      }
	    }

	    return this
	  }

	  // Convert array to string
	  toString() {
	    return arrayToString(this)
	  }
	}

	const getClassForType = (value) => {
	  const type = typeof value;

	  if (type === 'number') {
	    return SVGNumber
	  } else if (type === 'string') {
	    if (Color.isColor(value)) {
	      return Color
	    } else if (delimiter$1.test(value)) {
	      return isPathLetter.test(value) ? PathArray : SVGArray
	    } else if (numberAndUnit.test(value)) {
	      return SVGNumber
	    } else {
	      return NonMorphable
	    }
	  } else if (morphableTypes.indexOf(value.constructor) > -1) {
	    return value.constructor
	  } else if (Array.isArray(value)) {
	    return SVGArray
	  } else if (type === 'object') {
	    return ObjectBag
	  } else {
	    return NonMorphable
	  }
	};

	class Morphable {
	  constructor(stepper) {
	    this._stepper = stepper || new Ease('-');

	    this._from = null;
	    this._to = null;
	    this._type = null;
	    this._context = null;
	    this._morphObj = null;
	  }

	  at(pos) {
	    return this._morphObj.morph(
	      this._from,
	      this._to,
	      pos,
	      this._stepper,
	      this._context
	    )
	  }

	  done() {
	    const complete = this._context.map(this._stepper.done).reduce(function (
	      last,
	      curr
	    ) {
	      return last && curr
	    }, true);
	    return complete
	  }

	  from(val) {
	    if (val == null) {
	      return this._from
	    }

	    this._from = this._set(val);
	    return this
	  }

	  stepper(stepper) {
	    if (stepper == null) return this._stepper
	    this._stepper = stepper;
	    return this
	  }

	  to(val) {
	    if (val == null) {
	      return this._to
	    }

	    this._to = this._set(val);
	    return this
	  }

	  type(type) {
	    // getter
	    if (type == null) {
	      return this._type
	    }

	    // setter
	    this._type = type;
	    return this
	  }

	  _set(value) {
	    if (!this._type) {
	      this.type(getClassForType(value));
	    }

	    let result = new this._type(value);
	    if (this._type === Color) {
	      result = this._to
	        ? result[this._to[4]]()
	        : this._from
	          ? result[this._from[4]]()
	          : result;
	    }

	    if (this._type === ObjectBag) {
	      result = this._to
	        ? result.align(this._to)
	        : this._from
	          ? result.align(this._from)
	          : result;
	    }

	    result = result.toConsumable();

	    this._morphObj = this._morphObj || new this._type();
	    this._context =
	      this._context ||
	      Array.apply(null, Array(result.length))
	        .map(Object)
	        .map(function (o) {
	          o.done = true;
	          return o
	        });
	    return result
	  }
	}

	class NonMorphable {
	  constructor(...args) {
	    this.init(...args);
	  }

	  init(val) {
	    val = Array.isArray(val) ? val[0] : val;
	    this.value = val;
	    return this
	  }

	  toArray() {
	    return [this.value]
	  }

	  valueOf() {
	    return this.value
	  }
	}

	class TransformBag {
	  constructor(...args) {
	    this.init(...args);
	  }

	  init(obj) {
	    if (Array.isArray(obj)) {
	      obj = {
	        scaleX: obj[0],
	        scaleY: obj[1],
	        shear: obj[2],
	        rotate: obj[3],
	        translateX: obj[4],
	        translateY: obj[5],
	        originX: obj[6],
	        originY: obj[7]
	      };
	    }

	    Object.assign(this, TransformBag.defaults, obj);
	    return this
	  }

	  toArray() {
	    const v = this;

	    return [
	      v.scaleX,
	      v.scaleY,
	      v.shear,
	      v.rotate,
	      v.translateX,
	      v.translateY,
	      v.originX,
	      v.originY
	    ]
	  }
	}

	TransformBag.defaults = {
	  scaleX: 1,
	  scaleY: 1,
	  shear: 0,
	  rotate: 0,
	  translateX: 0,
	  translateY: 0,
	  originX: 0,
	  originY: 0
	};

	const sortByKey = (a, b) => {
	  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0
	};

	class ObjectBag {
	  constructor(...args) {
	    this.init(...args);
	  }

	  align(other) {
	    const values = this.values;
	    for (let i = 0, il = values.length; i < il; ++i) {
	      // If the type is the same we only need to check if the color is in the correct format
	      if (values[i + 1] === other[i + 1]) {
	        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {
	          const space = other[i + 7];
	          const color = new Color(this.values.splice(i + 3, 5))
	            [space]()
	            .toArray();
	          this.values.splice(i + 3, 0, ...color);
	        }

	        i += values[i + 2] + 2;
	        continue
	      }

	      if (!other[i + 1]) {
	        return this
	      }

	      // The types differ, so we overwrite the new type with the old one
	      // And initialize it with the types default (e.g. black for color or 0 for number)
	      const defaultObject = new other[i + 1]().toArray();

	      // Than we fix the values array
	      const toDelete = values[i + 2] + 3;

	      values.splice(
	        i,
	        toDelete,
	        other[i],
	        other[i + 1],
	        other[i + 2],
	        ...defaultObject
	      );

	      i += values[i + 2] + 2;
	    }
	    return this
	  }

	  init(objOrArr) {
	    this.values = [];

	    if (Array.isArray(objOrArr)) {
	      this.values = objOrArr.slice();
	      return
	    }

	    objOrArr = objOrArr || {};
	    const entries = [];

	    for (const i in objOrArr) {
	      const Type = getClassForType(objOrArr[i]);
	      const val = new Type(objOrArr[i]).toArray();
	      entries.push([i, Type, val.length, ...val]);
	    }

	    entries.sort(sortByKey);

	    this.values = entries.reduce((last, curr) => last.concat(curr), []);
	    return this
	  }

	  toArray() {
	    return this.values
	  }

	  valueOf() {
	    const obj = {};
	    const arr = this.values;

	    // for (var i = 0, len = arr.length; i < len; i += 2) {
	    while (arr.length) {
	      const key = arr.shift();
	      const Type = arr.shift();
	      const num = arr.shift();
	      const values = arr.splice(0, num);
	      obj[key] = new Type(values); // .valueOf()
	    }

	    return obj
	  }
	}

	const morphableTypes = [NonMorphable, TransformBag, ObjectBag];

	function registerMorphableType(type = []) {
	  morphableTypes.push(...[].concat(type));
	}

	function makeMorphable() {
	  extend(morphableTypes, {
	    to(val) {
	      return new Morphable()
	        .type(this.constructor)
	        .from(this.toArray()) // this.valueOf())
	        .to(val)
	    },
	    fromArray(arr) {
	      this.init(arr);
	      return this
	    },
	    toConsumable() {
	      return this.toArray()
	    },
	    morph(from, to, pos, stepper, context) {
	      const mapper = function (i, index) {
	        return stepper.step(i, to[index], pos, context[index], context)
	      };

	      return this.fromArray(from.map(mapper))
	    }
	  });
	}

	class Path extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('path', node), attrs);
	  }

	  // Get array
	  array() {
	    return this._array || (this._array = new PathArray(this.attr('d')))
	  }

	  // Clear array cache
	  clear() {
	    delete this._array;
	    return this
	  }

	  // Set height of element
	  height(height) {
	    return height == null
	      ? this.bbox().height
	      : this.size(this.bbox().width, height)
	  }

	  // Move by left top corner
	  move(x, y) {
	    return this.attr('d', this.array().move(x, y))
	  }

	  // Plot new path
	  plot(d) {
	    return d == null
	      ? this.array()
	      : this.clear().attr(
	          'd',
	          typeof d === 'string' ? d : (this._array = new PathArray(d))
	        )
	  }

	  // Set element size to given width and height
	  size(width, height) {
	    const p = proportionalSize(this, width, height);
	    return this.attr('d', this.array().size(p.width, p.height))
	  }

	  // Set width of element
	  width(width) {
	    return width == null
	      ? this.bbox().width
	      : this.size(width, this.bbox().height)
	  }

	  // Move by left top corner over x-axis
	  x(x) {
	    return x == null ? this.bbox().x : this.move(x, this.bbox().y)
	  }

	  // Move by left top corner over y-axis
	  y(y) {
	    return y == null ? this.bbox().y : this.move(this.bbox().x, y)
	  }
	}

	// Define morphable array
	Path.prototype.MorphArray = PathArray;

	// Add parent method
	registerMethods({
	  Container: {
	    // Create a wrapped path element
	    path: wrapWithAttrCheck(function (d) {
	      // make sure plot is called as a setter
	      return this.put(new Path()).plot(d || new PathArray())
	    })
	  }
	});

	register(Path, 'Path');

	// Get array
	function array() {
	  return this._array || (this._array = new PointArray(this.attr('points')))
	}

	// Clear array cache
	function clear() {
	  delete this._array;
	  return this
	}

	// Move by left top corner
	function move$2(x, y) {
	  return this.attr('points', this.array().move(x, y))
	}

	// Plot new path
	function plot(p) {
	  return p == null
	    ? this.array()
	    : this.clear().attr(
	        'points',
	        typeof p === 'string' ? p : (this._array = new PointArray(p))
	      )
	}

	// Set element size to given width and height
	function size$1(width, height) {
	  const p = proportionalSize(this, width, height);
	  return this.attr('points', this.array().size(p.width, p.height))
	}

	var poly = /*#__PURE__*/Object.freeze({
		__proto__: null,
		array: array,
		clear: clear,
		move: move$2,
		plot: plot,
		size: size$1
	});

	class Polygon extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('polygon', node), attrs);
	  }
	}

	registerMethods({
	  Container: {
	    // Create a wrapped polygon element
	    polygon: wrapWithAttrCheck(function (p) {
	      // make sure plot is called as a setter
	      return this.put(new Polygon()).plot(p || new PointArray())
	    })
	  }
	});

	extend(Polygon, pointed);
	extend(Polygon, poly);
	register(Polygon, 'Polygon');

	class Polyline extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('polyline', node), attrs);
	  }
	}

	registerMethods({
	  Container: {
	    // Create a wrapped polygon element
	    polyline: wrapWithAttrCheck(function (p) {
	      // make sure plot is called as a setter
	      return this.put(new Polyline()).plot(p || new PointArray())
	    })
	  }
	});

	extend(Polyline, pointed);
	extend(Polyline, poly);
	register(Polyline, 'Polyline');

	class Rect extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('rect', node), attrs);
	  }
	}

	extend(Rect, { rx, ry });

	registerMethods({
	  Container: {
	    // Create a rect element
	    rect: wrapWithAttrCheck(function (width, height) {
	      return this.put(new Rect()).size(width, height)
	    })
	  }
	});

	register(Rect, 'Rect');

	class Queue {
	  constructor() {
	    this._first = null;
	    this._last = null;
	  }

	  // Shows us the first item in the list
	  first() {
	    return this._first && this._first.value
	  }

	  // Shows us the last item in the list
	  last() {
	    return this._last && this._last.value
	  }

	  push(value) {
	    // An item stores an id and the provided value
	    const item =
	      typeof value.next !== 'undefined'
	        ? value
	        : { value: value, next: null, prev: null };

	    // Deal with the queue being empty or populated
	    if (this._last) {
	      item.prev = this._last;
	      this._last.next = item;
	      this._last = item;
	    } else {
	      this._last = item;
	      this._first = item;
	    }

	    // Return the current item
	    return item
	  }

	  // Removes the item that was returned from the push
	  remove(item) {
	    // Relink the previous item
	    if (item.prev) item.prev.next = item.next;
	    if (item.next) item.next.prev = item.prev;
	    if (item === this._last) this._last = item.prev;
	    if (item === this._first) this._first = item.next;

	    // Invalidate item
	    item.prev = null;
	    item.next = null;
	  }

	  shift() {
	    // Check if we have a value
	    const remove = this._first;
	    if (!remove) return null

	    // If we do, remove it and relink things
	    this._first = remove.next;
	    if (this._first) this._first.prev = null;
	    this._last = this._first ? this._last : null;
	    return remove.value
	  }
	}

	const Animator = {
	  nextDraw: null,
	  frames: new Queue(),
	  timeouts: new Queue(),
	  immediates: new Queue(),
	  timer: () => globals.window.performance || globals.window.Date,
	  transforms: [],

	  frame(fn) {
	    // Store the node
	    const node = Animator.frames.push({ run: fn });

	    // Request an animation frame if we don't have one
	    if (Animator.nextDraw === null) {
	      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
	    }

	    // Return the node so we can remove it easily
	    return node
	  },

	  timeout(fn, delay) {
	    delay = delay || 0;

	    // Work out when the event should fire
	    const time = Animator.timer().now() + delay;

	    // Add the timeout to the end of the queue
	    const node = Animator.timeouts.push({ run: fn, time: time });

	    // Request another animation frame if we need one
	    if (Animator.nextDraw === null) {
	      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
	    }

	    return node
	  },

	  immediate(fn) {
	    // Add the immediate fn to the end of the queue
	    const node = Animator.immediates.push(fn);
	    // Request another animation frame if we need one
	    if (Animator.nextDraw === null) {
	      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
	    }

	    return node
	  },

	  cancelFrame(node) {
	    node != null && Animator.frames.remove(node);
	  },

	  clearTimeout(node) {
	    node != null && Animator.timeouts.remove(node);
	  },

	  cancelImmediate(node) {
	    node != null && Animator.immediates.remove(node);
	  },

	  _draw(now) {
	    // Run all the timeouts we can run, if they are not ready yet, add them
	    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])
	    let nextTimeout = null;
	    const lastTimeout = Animator.timeouts.last();
	    while ((nextTimeout = Animator.timeouts.shift())) {
	      // Run the timeout if its time, or push it to the end
	      if (now >= nextTimeout.time) {
	        nextTimeout.run();
	      } else {
	        Animator.timeouts.push(nextTimeout);
	      }

	      // If we hit the last item, we should stop shifting out more items
	      if (nextTimeout === lastTimeout) break
	    }

	    // Run all of the animation frames
	    let nextFrame = null;
	    const lastFrame = Animator.frames.last();
	    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {
	      nextFrame.run(now);
	    }

	    let nextImmediate = null;
	    while ((nextImmediate = Animator.immediates.shift())) {
	      nextImmediate();
	    }

	    // If we have remaining timeouts or frames, draw until we don't anymore
	    Animator.nextDraw =
	      Animator.timeouts.first() || Animator.frames.first()
	        ? globals.window.requestAnimationFrame(Animator._draw)
	        : null;
	  }
	};

	const makeSchedule = function (runnerInfo) {
	  const start = runnerInfo.start;
	  const duration = runnerInfo.runner.duration();
	  const end = start + duration;
	  return {
	    start: start,
	    duration: duration,
	    end: end,
	    runner: runnerInfo.runner
	  }
	};

	const defaultSource = function () {
	  const w = globals.window;
	  return (w.performance || w.Date).now()
	};

	class Timeline extends EventTarget {
	  // Construct a new timeline on the given element
	  constructor(timeSource = defaultSource) {
	    super();

	    this._timeSource = timeSource;

	    // terminate resets all variables to their initial state
	    this.terminate();
	  }

	  active() {
	    return !!this._nextFrame
	  }

	  finish() {
	    // Go to end and pause
	    this.time(this.getEndTimeOfTimeline() + 1);
	    return this.pause()
	  }

	  // Calculates the end of the timeline
	  getEndTime() {
	    const lastRunnerInfo = this.getLastRunnerInfo();
	    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0;
	    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;
	    return lastStartTime + lastDuration
	  }

	  getEndTimeOfTimeline() {
	    const endTimes = this._runners.map((i) => i.start + i.runner.duration());
	    return Math.max(0, ...endTimes)
	  }

	  getLastRunnerInfo() {
	    return this.getRunnerInfoById(this._lastRunnerId)
	  }

	  getRunnerInfoById(id) {
	    return this._runners[this._runnerIds.indexOf(id)] || null
	  }

	  pause() {
	    this._paused = true;
	    return this._continue()
	  }

	  persist(dtOrForever) {
	    if (dtOrForever == null) return this._persist
	    this._persist = dtOrForever;
	    return this
	  }

	  play() {
	    // Now make sure we are not paused and continue the animation
	    this._paused = false;
	    return this.updateTime()._continue()
	  }

	  reverse(yes) {
	    const currentSpeed = this.speed();
	    if (yes == null) return this.speed(-currentSpeed)

	    const positive = Math.abs(currentSpeed);
	    return this.speed(yes ? -positive : positive)
	  }

	  // schedules a runner on the timeline
	  schedule(runner, delay, when) {
	    if (runner == null) {
	      return this._runners.map(makeSchedule)
	    }

	    // The start time for the next animation can either be given explicitly,
	    // derived from the current timeline time or it can be relative to the
	    // last start time to chain animations directly

	    let absoluteStartTime = 0;
	    const endTime = this.getEndTime();
	    delay = delay || 0;

	    // Work out when to start the animation
	    if (when == null || when === 'last' || when === 'after') {
	      // Take the last time and increment
	      absoluteStartTime = endTime;
	    } else if (when === 'absolute' || when === 'start') {
	      absoluteStartTime = delay;
	      delay = 0;
	    } else if (when === 'now') {
	      absoluteStartTime = this._time;
	    } else if (when === 'relative') {
	      const runnerInfo = this.getRunnerInfoById(runner.id);
	      if (runnerInfo) {
	        absoluteStartTime = runnerInfo.start + delay;
	        delay = 0;
	      }
	    } else if (when === 'with-last') {
	      const lastRunnerInfo = this.getLastRunnerInfo();
	      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;
	      absoluteStartTime = lastStartTime;
	    } else {
	      throw new Error('Invalid value for the "when" parameter')
	    }

	    // Manage runner
	    runner.unschedule();
	    runner.timeline(this);

	    const persist = runner.persist();
	    const runnerInfo = {
	      persist: persist === null ? this._persist : persist,
	      start: absoluteStartTime + delay,
	      runner
	    };

	    this._lastRunnerId = runner.id;

	    this._runners.push(runnerInfo);
	    this._runners.sort((a, b) => a.start - b.start);
	    this._runnerIds = this._runners.map((info) => info.runner.id);

	    this.updateTime()._continue();
	    return this
	  }

	  seek(dt) {
	    return this.time(this._time + dt)
	  }

	  source(fn) {
	    if (fn == null) return this._timeSource
	    this._timeSource = fn;
	    return this
	  }

	  speed(speed) {
	    if (speed == null) return this._speed
	    this._speed = speed;
	    return this
	  }

	  stop() {
	    // Go to start and pause
	    this.time(0);
	    return this.pause()
	  }

	  time(time) {
	    if (time == null) return this._time
	    this._time = time;
	    return this._continue(true)
	  }

	  // Remove the runner from this timeline
	  unschedule(runner) {
	    const index = this._runnerIds.indexOf(runner.id);
	    if (index < 0) return this

	    this._runners.splice(index, 1);
	    this._runnerIds.splice(index, 1);

	    runner.timeline(null);
	    return this
	  }

	  // Makes sure, that after pausing the time doesn't jump
	  updateTime() {
	    if (!this.active()) {
	      this._lastSourceTime = this._timeSource();
	    }
	    return this
	  }

	  // Checks if we are running and continues the animation
	  _continue(immediateStep = false) {
	    Animator.cancelFrame(this._nextFrame);
	    this._nextFrame = null;

	    if (immediateStep) return this._stepImmediate()
	    if (this._paused) return this

	    this._nextFrame = Animator.frame(this._step);
	    return this
	  }

	  _stepFn(immediateStep = false) {
	    // Get the time delta from the last time and update the time
	    const time = this._timeSource();
	    let dtSource = time - this._lastSourceTime;

	    if (immediateStep) dtSource = 0;

	    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime);
	    this._lastSourceTime = time;

	    // Only update the time if we use the timeSource.
	    // Otherwise use the current time
	    if (!immediateStep) {
	      // Update the time
	      this._time += dtTime;
	      this._time = this._time < 0 ? 0 : this._time;
	    }
	    this._lastStepTime = this._time;
	    this.fire('time', this._time);

	    // This is for the case that the timeline was seeked so that the time
	    // is now before the startTime of the runner. That is why we need to set
	    // the runner to position 0

	    // FIXME:
	    // However, resetting in insertion order leads to bugs. Considering the case,
	    // where 2 runners change the same attribute but in different times,
	    // resetting both of them will lead to the case where the later defined
	    // runner always wins the reset even if the other runner started earlier
	    // and therefore should win the attribute battle
	    // this can be solved by resetting them backwards
	    for (let k = this._runners.length; k--; ) {
	      // Get and run the current runner and ignore it if its inactive
	      const runnerInfo = this._runners[k];
	      const runner = runnerInfo.runner;

	      // Make sure that we give the actual difference
	      // between runner start time and now
	      const dtToStart = this._time - runnerInfo.start;

	      // Dont run runner if not started yet
	      // and try to reset it
	      if (dtToStart <= 0) {
	        runner.reset();
	      }
	    }

	    // Run all of the runners directly
	    let runnersLeft = false;
	    for (let i = 0, len = this._runners.length; i < len; i++) {
	      // Get and run the current runner and ignore it if its inactive
	      const runnerInfo = this._runners[i];
	      const runner = runnerInfo.runner;
	      let dt = dtTime;

	      // Make sure that we give the actual difference
	      // between runner start time and now
	      const dtToStart = this._time - runnerInfo.start;

	      // Dont run runner if not started yet
	      if (dtToStart <= 0) {
	        runnersLeft = true;
	        continue
	      } else if (dtToStart < dt) {
	        // Adjust dt to make sure that animation is on point
	        dt = dtToStart;
	      }

	      if (!runner.active()) continue

	      // If this runner is still going, signal that we need another animation
	      // frame, otherwise, remove the completed runner
	      const finished = runner.step(dt).done;
	      if (!finished) {
	        runnersLeft = true;
	        // continue
	      } else if (runnerInfo.persist !== true) {
	        // runner is finished. And runner might get removed
	        const endTime = runner.duration() - runner.time() + this._time;

	        if (endTime + runnerInfo.persist < this._time) {
	          // Delete runner and correct index
	          runner.unschedule();
	          --i;
	          --len;
	        }
	      }
	    }

	    // Basically: we continue when there are runners right from us in time
	    // when -->, and when runners are left from us when <--
	    if (
	      (runnersLeft && !(this._speed < 0 && this._time === 0)) ||
	      (this._runnerIds.length && this._speed < 0 && this._time > 0)
	    ) {
	      this._continue();
	    } else {
	      this.pause();
	      this.fire('finished');
	    }

	    return this
	  }

	  terminate() {
	    // cleanup memory

	    // Store the timing variables
	    this._startTime = 0;
	    this._speed = 1.0;

	    // Determines how long a runner is hold in memory. Can be a dt or true/false
	    this._persist = 0;

	    // Keep track of the running animations and their starting parameters
	    this._nextFrame = null;
	    this._paused = true;
	    this._runners = [];
	    this._runnerIds = [];
	    this._lastRunnerId = -1;
	    this._time = 0;
	    this._lastSourceTime = 0;
	    this._lastStepTime = 0;

	    // Make sure that step is always called in class context
	    this._step = this._stepFn.bind(this, false);
	    this._stepImmediate = this._stepFn.bind(this, true);
	  }
	}

	registerMethods({
	  Element: {
	    timeline: function (timeline) {
	      if (timeline == null) {
	        this._timeline = this._timeline || new Timeline();
	        return this._timeline
	      } else {
	        this._timeline = timeline;
	        return this
	      }
	    }
	  }
	});

	class Runner extends EventTarget {
	  constructor(options) {
	    super();

	    // Store a unique id on the runner, so that we can identify it later
	    this.id = Runner.id++;

	    // Ensure a default value
	    options = options == null ? timeline.duration : options;

	    // Ensure that we get a controller
	    options = typeof options === 'function' ? new Controller(options) : options;

	    // Declare all of the variables
	    this._element = null;
	    this._timeline = null;
	    this.done = false;
	    this._queue = [];

	    // Work out the stepper and the duration
	    this._duration = typeof options === 'number' && options;
	    this._isDeclarative = options instanceof Controller;
	    this._stepper = this._isDeclarative ? options : new Ease();

	    // We copy the current values from the timeline because they can change
	    this._history = {};

	    // Store the state of the runner
	    this.enabled = true;
	    this._time = 0;
	    this._lastTime = 0;

	    // At creation, the runner is in reset state
	    this._reseted = true;

	    // Save transforms applied to this runner
	    this.transforms = new Matrix();
	    this.transformId = 1;

	    // Looping variables
	    this._haveReversed = false;
	    this._reverse = false;
	    this._loopsDone = 0;
	    this._swing = false;
	    this._wait = 0;
	    this._times = 1;

	    this._frameId = null;

	    // Stores how long a runner is stored after being done
	    this._persist = this._isDeclarative ? true : null;
	  }

	  static sanitise(duration, delay, when) {
	    // Initialise the default parameters
	    let times = 1;
	    let swing = false;
	    let wait = 0;
	    duration = duration ?? timeline.duration;
	    delay = delay ?? timeline.delay;
	    when = when || 'last';

	    // If we have an object, unpack the values
	    if (typeof duration === 'object' && !(duration instanceof Stepper)) {
	      delay = duration.delay ?? delay;
	      when = duration.when ?? when;
	      swing = duration.swing || swing;
	      times = duration.times ?? times;
	      wait = duration.wait ?? wait;
	      duration = duration.duration ?? timeline.duration;
	    }

	    return {
	      duration: duration,
	      delay: delay,
	      swing: swing,
	      times: times,
	      wait: wait,
	      when: when
	    }
	  }

	  active(enabled) {
	    if (enabled == null) return this.enabled
	    this.enabled = enabled;
	    return this
	  }

	  /*
	  Private Methods
	  ===============
	  Methods that shouldn't be used externally
	  */
	  addTransform(transform) {
	    this.transforms.lmultiplyO(transform);
	    return this
	  }

	  after(fn) {
	    return this.on('finished', fn)
	  }

	  animate(duration, delay, when) {
	    const o = Runner.sanitise(duration, delay, when);
	    const runner = new Runner(o.duration);
	    if (this._timeline) runner.timeline(this._timeline);
	    if (this._element) runner.element(this._element);
	    return runner.loop(o).schedule(o.delay, o.when)
	  }

	  clearTransform() {
	    this.transforms = new Matrix();
	    return this
	  }

	  // TODO: Keep track of all transformations so that deletion is faster
	  clearTransformsFromQueue() {
	    if (
	      !this.done ||
	      !this._timeline ||
	      !this._timeline._runnerIds.includes(this.id)
	    ) {
	      this._queue = this._queue.filter((item) => {
	        return !item.isTransform
	      });
	    }
	  }

	  delay(delay) {
	    return this.animate(0, delay)
	  }

	  duration() {
	    return this._times * (this._wait + this._duration) - this._wait
	  }

	  during(fn) {
	    return this.queue(null, fn)
	  }

	  ease(fn) {
	    this._stepper = new Ease(fn);
	    return this
	  }
	  /*
	  Runner Definitions
	  ==================
	  These methods help us define the runtime behaviour of the Runner or they
	  help us make new runners from the current runner
	  */

	  element(element) {
	    if (element == null) return this._element
	    this._element = element;
	    element._prepareRunner();
	    return this
	  }

	  finish() {
	    return this.step(Infinity)
	  }

	  loop(times, swing, wait) {
	    // Deal with the user passing in an object
	    if (typeof times === 'object') {
	      swing = times.swing;
	      wait = times.wait;
	      times = times.times;
	    }

	    // Sanitise the values and store them
	    this._times = times || Infinity;
	    this._swing = swing || false;
	    this._wait = wait || 0;

	    // Allow true to be passed
	    if (this._times === true) {
	      this._times = Infinity;
	    }

	    return this
	  }

	  loops(p) {
	    const loopDuration = this._duration + this._wait;
	    if (p == null) {
	      const loopsDone = Math.floor(this._time / loopDuration);
	      const relativeTime = this._time - loopsDone * loopDuration;
	      const position = relativeTime / this._duration;
	      return Math.min(loopsDone + position, this._times)
	    }
	    const whole = Math.floor(p);
	    const partial = p % 1;
	    const time = loopDuration * whole + this._duration * partial;
	    return this.time(time)
	  }

	  persist(dtOrForever) {
	    if (dtOrForever == null) return this._persist
	    this._persist = dtOrForever;
	    return this
	  }

	  position(p) {
	    // Get all of the variables we need
	    const x = this._time;
	    const d = this._duration;
	    const w = this._wait;
	    const t = this._times;
	    const s = this._swing;
	    const r = this._reverse;
	    let position;

	    if (p == null) {
	      /*
	      This function converts a time to a position in the range [0, 1]
	      The full explanation can be found in this desmos demonstration
	        https://www.desmos.com/calculator/u4fbavgche
	      The logic is slightly simplified here because we can use booleans
	      */

	      // Figure out the value without thinking about the start or end time
	      const f = function (x) {
	        const swinging = s * Math.floor((x % (2 * (w + d))) / (w + d));
	        const backwards = (swinging && !r) || (!swinging && r);
	        const uncliped =
	          (Math.pow(-1, backwards) * (x % (w + d))) / d + backwards;
	        const clipped = Math.max(Math.min(uncliped, 1), 0);
	        return clipped
	      };

	      // Figure out the value by incorporating the start time
	      const endTime = t * (w + d) - w;
	      position =
	        x <= 0
	          ? Math.round(f(1e-5))
	          : x < endTime
	            ? f(x)
	            : Math.round(f(endTime - 1e-5));
	      return position
	    }

	    // Work out the loops done and add the position to the loops done
	    const loopsDone = Math.floor(this.loops());
	    const swingForward = s && loopsDone % 2 === 0;
	    const forwards = (swingForward && !r) || (r && swingForward);
	    position = loopsDone + (forwards ? p : 1 - p);
	    return this.loops(position)
	  }

	  progress(p) {
	    if (p == null) {
	      return Math.min(1, this._time / this.duration())
	    }
	    return this.time(p * this.duration())
	  }

	  /*
	  Basic Functionality
	  ===================
	  These methods allow us to attach basic functions to the runner directly
	  */
	  queue(initFn, runFn, retargetFn, isTransform) {
	    this._queue.push({
	      initialiser: initFn || noop,
	      runner: runFn || noop,
	      retarget: retargetFn,
	      isTransform: isTransform,
	      initialised: false,
	      finished: false
	    });
	    const timeline = this.timeline();
	    timeline && this.timeline()._continue();
	    return this
	  }

	  reset() {
	    if (this._reseted) return this
	    this.time(0);
	    this._reseted = true;
	    return this
	  }

	  reverse(reverse) {
	    this._reverse = reverse == null ? !this._reverse : reverse;
	    return this
	  }

	  schedule(timeline, delay, when) {
	    // The user doesn't need to pass a timeline if we already have one
	    if (!(timeline instanceof Timeline)) {
	      when = delay;
	      delay = timeline;
	      timeline = this.timeline();
	    }

	    // If there is no timeline, yell at the user...
	    if (!timeline) {
	      throw Error('Runner cannot be scheduled without timeline')
	    }

	    // Schedule the runner on the timeline provided
	    timeline.schedule(this, delay, when);
	    return this
	  }

	  step(dt) {
	    // If we are inactive, this stepper just gets skipped
	    if (!this.enabled) return this

	    // Update the time and get the new position
	    dt = dt == null ? 16 : dt;
	    this._time += dt;
	    const position = this.position();

	    // Figure out if we need to run the stepper in this frame
	    const running = this._lastPosition !== position && this._time >= 0;
	    this._lastPosition = position;

	    // Figure out if we just started
	    const duration = this.duration();
	    const justStarted = this._lastTime <= 0 && this._time > 0;
	    const justFinished = this._lastTime < duration && this._time >= duration;

	    this._lastTime = this._time;
	    if (justStarted) {
	      this.fire('start', this);
	    }

	    // Work out if the runner is finished set the done flag here so animations
	    // know, that they are running in the last step (this is good for
	    // transformations which can be merged)
	    const declarative = this._isDeclarative;
	    this.done = !declarative && !justFinished && this._time >= duration;

	    // Runner is running. So its not in reset state anymore
	    this._reseted = false;

	    let converged = false;
	    // Call initialise and the run function
	    if (running || declarative) {
	      this._initialise(running);

	      // clear the transforms on this runner so they dont get added again and again
	      this.transforms = new Matrix();
	      converged = this._run(declarative ? dt : position);

	      this.fire('step', this);
	    }
	    // correct the done flag here
	    // declarative animations itself know when they converged
	    this.done = this.done || (converged && declarative);
	    if (justFinished) {
	      this.fire('finished', this);
	    }
	    return this
	  }

	  /*
	  Runner animation methods
	  ========================
	  Control how the animation plays
	  */
	  time(time) {
	    if (time == null) {
	      return this._time
	    }
	    const dt = time - this._time;
	    this.step(dt);
	    return this
	  }

	  timeline(timeline) {
	    // check explicitly for undefined so we can set the timeline to null
	    if (typeof timeline === 'undefined') return this._timeline
	    this._timeline = timeline;
	    return this
	  }

	  unschedule() {
	    const timeline = this.timeline();
	    timeline && timeline.unschedule(this);
	    return this
	  }

	  // Run each initialise function in the runner if required
	  _initialise(running) {
	    // If we aren't running, we shouldn't initialise when not declarative
	    if (!running && !this._isDeclarative) return

	    // Loop through all of the initialisers
	    for (let i = 0, len = this._queue.length; i < len; ++i) {
	      // Get the current initialiser
	      const current = this._queue[i];

	      // Determine whether we need to initialise
	      const needsIt = this._isDeclarative || (!current.initialised && running);
	      running = !current.finished;

	      // Call the initialiser if we need to
	      if (needsIt && running) {
	        current.initialiser.call(this);
	        current.initialised = true;
	      }
	    }
	  }

	  // Save a morpher to the morpher list so that we can retarget it later
	  _rememberMorpher(method, morpher) {
	    this._history[method] = {
	      morpher: morpher,
	      caller: this._queue[this._queue.length - 1]
	    };

	    // We have to resume the timeline in case a controller
	    // is already done without being ever run
	    // This can happen when e.g. this is done:
	    //    anim = el.animate(new SVG.Spring)
	    // and later
	    //    anim.move(...)
	    if (this._isDeclarative) {
	      const timeline = this.timeline();
	      timeline && timeline.play();
	    }
	  }

	  // Try to set the target for a morpher if the morpher exists, otherwise
	  // Run each run function for the position or dt given
	  _run(positionOrDt) {
	    // Run all of the _queue directly
	    let allfinished = true;
	    for (let i = 0, len = this._queue.length; i < len; ++i) {
	      // Get the current function to run
	      const current = this._queue[i];

	      // Run the function if its not finished, we keep track of the finished
	      // flag for the sake of declarative _queue
	      const converged = current.runner.call(this, positionOrDt);
	      current.finished = current.finished || converged === true;
	      allfinished = allfinished && current.finished;
	    }

	    // We report when all of the constructors are finished
	    return allfinished
	  }

	  // do nothing and return false
	  _tryRetarget(method, target, extra) {
	    if (this._history[method]) {
	      // if the last method wasn't even initialised, throw it away
	      if (!this._history[method].caller.initialised) {
	        const index = this._queue.indexOf(this._history[method].caller);
	        this._queue.splice(index, 1);
	        return false
	      }

	      // for the case of transformations, we use the special retarget function
	      // which has access to the outer scope
	      if (this._history[method].caller.retarget) {
	        this._history[method].caller.retarget.call(this, target, extra);
	        // for everything else a simple morpher change is sufficient
	      } else {
	        this._history[method].morpher.to(target);
	      }

	      this._history[method].caller.finished = false;
	      const timeline = this.timeline();
	      timeline && timeline.play();
	      return true
	    }
	    return false
	  }
	}

	Runner.id = 0;

	class FakeRunner {
	  constructor(transforms = new Matrix(), id = -1, done = true) {
	    this.transforms = transforms;
	    this.id = id;
	    this.done = done;
	  }

	  clearTransformsFromQueue() {}
	}

	extend([Runner, FakeRunner], {
	  mergeWith(runner) {
	    return new FakeRunner(
	      runner.transforms.lmultiply(this.transforms),
	      runner.id
	    )
	  }
	});

	// FakeRunner.emptyRunner = new FakeRunner()

	const lmultiply = (last, curr) => last.lmultiplyO(curr);
	const getRunnerTransform = (runner) => runner.transforms;

	function mergeTransforms() {
	  // Find the matrix to apply to the element and apply it
	  const runners = this._transformationRunners.runners;
	  const netTransform = runners
	    .map(getRunnerTransform)
	    .reduce(lmultiply, new Matrix());

	  this.transform(netTransform);

	  this._transformationRunners.merge();

	  if (this._transformationRunners.length() === 1) {
	    this._frameId = null;
	  }
	}

	class RunnerArray {
	  constructor() {
	    this.runners = [];
	    this.ids = [];
	  }

	  add(runner) {
	    if (this.runners.includes(runner)) return
	    const id = runner.id + 1;

	    this.runners.push(runner);
	    this.ids.push(id);

	    return this
	  }

	  clearBefore(id) {
	    const deleteCnt = this.ids.indexOf(id + 1) || 1;
	    this.ids.splice(0, deleteCnt, 0);
	    this.runners
	      .splice(0, deleteCnt, new FakeRunner())
	      .forEach((r) => r.clearTransformsFromQueue());
	    return this
	  }

	  edit(id, newRunner) {
	    const index = this.ids.indexOf(id + 1);
	    this.ids.splice(index, 1, id + 1);
	    this.runners.splice(index, 1, newRunner);
	    return this
	  }

	  getByID(id) {
	    return this.runners[this.ids.indexOf(id + 1)]
	  }

	  length() {
	    return this.ids.length
	  }

	  merge() {
	    let lastRunner = null;
	    for (let i = 0; i < this.runners.length; ++i) {
	      const runner = this.runners[i];

	      const condition =
	        lastRunner &&
	        runner.done &&
	        lastRunner.done &&
	        // don't merge runner when persisted on timeline
	        (!runner._timeline ||
	          !runner._timeline._runnerIds.includes(runner.id)) &&
	        (!lastRunner._timeline ||
	          !lastRunner._timeline._runnerIds.includes(lastRunner.id));

	      if (condition) {
	        // the +1 happens in the function
	        this.remove(runner.id);
	        const newRunner = runner.mergeWith(lastRunner);
	        this.edit(lastRunner.id, newRunner);
	        lastRunner = newRunner;
	        --i;
	      } else {
	        lastRunner = runner;
	      }
	    }

	    return this
	  }

	  remove(id) {
	    const index = this.ids.indexOf(id + 1);
	    this.ids.splice(index, 1);
	    this.runners.splice(index, 1);
	    return this
	  }
	}

	registerMethods({
	  Element: {
	    animate(duration, delay, when) {
	      const o = Runner.sanitise(duration, delay, when);
	      const timeline = this.timeline();
	      return new Runner(o.duration)
	        .loop(o)
	        .element(this)
	        .timeline(timeline.play())
	        .schedule(o.delay, o.when)
	    },

	    delay(by, when) {
	      return this.animate(0, by, when)
	    },

	    // this function searches for all runners on the element and deletes the ones
	    // which run before the current one. This is because absolute transformations
	    // overwrite anything anyway so there is no need to waste time computing
	    // other runners
	    _clearTransformRunnersBefore(currentRunner) {
	      this._transformationRunners.clearBefore(currentRunner.id);
	    },

	    _currentTransform(current) {
	      return (
	        this._transformationRunners.runners
	          // we need the equal sign here to make sure, that also transformations
	          // on the same runner which execute before the current transformation are
	          // taken into account
	          .filter((runner) => runner.id <= current.id)
	          .map(getRunnerTransform)
	          .reduce(lmultiply, new Matrix())
	      )
	    },

	    _addRunner(runner) {
	      this._transformationRunners.add(runner);

	      // Make sure that the runner merge is executed at the very end of
	      // all Animator functions. That is why we use immediate here to execute
	      // the merge right after all frames are run
	      Animator.cancelImmediate(this._frameId);
	      this._frameId = Animator.immediate(mergeTransforms.bind(this));
	    },

	    _prepareRunner() {
	      if (this._frameId == null) {
	        this._transformationRunners = new RunnerArray().add(
	          new FakeRunner(new Matrix(this))
	        );
	      }
	    }
	  }
	});

	// Will output the elements from array A that are not in the array B
	const difference = (a, b) => a.filter((x) => !b.includes(x));

	extend(Runner, {
	  attr(a, v) {
	    return this.styleAttr('attr', a, v)
	  },

	  // Add animatable styles
	  css(s, v) {
	    return this.styleAttr('css', s, v)
	  },

	  styleAttr(type, nameOrAttrs, val) {
	    if (typeof nameOrAttrs === 'string') {
	      return this.styleAttr(type, { [nameOrAttrs]: val })
	    }

	    let attrs = nameOrAttrs;
	    if (this._tryRetarget(type, attrs)) return this

	    let morpher = new Morphable(this._stepper).to(attrs);
	    let keys = Object.keys(attrs);

	    this.queue(
	      function () {
	        morpher = morpher.from(this.element()[type](keys));
	      },
	      function (pos) {
	        this.element()[type](morpher.at(pos).valueOf());
	        return morpher.done()
	      },
	      function (newToAttrs) {
	        // Check if any new keys were added
	        const newKeys = Object.keys(newToAttrs);
	        const differences = difference(newKeys, keys);

	        // If their are new keys, initialize them and add them to morpher
	        if (differences.length) {
	          // Get the values
	          const addedFromAttrs = this.element()[type](differences);

	          // Get the already initialized values
	          const oldFromAttrs = new ObjectBag(morpher.from()).valueOf();

	          // Merge old and new
	          Object.assign(oldFromAttrs, addedFromAttrs);
	          morpher.from(oldFromAttrs);
	        }

	        // Get the object from the morpher
	        const oldToAttrs = new ObjectBag(morpher.to()).valueOf();

	        // Merge in new attributes
	        Object.assign(oldToAttrs, newToAttrs);

	        // Change morpher target
	        morpher.to(oldToAttrs);

	        // Make sure that we save the work we did so we don't need it to do again
	        keys = newKeys;
	        attrs = newToAttrs;
	      }
	    );

	    this._rememberMorpher(type, morpher);
	    return this
	  },

	  zoom(level, point) {
	    if (this._tryRetarget('zoom', level, point)) return this

	    let morpher = new Morphable(this._stepper).to(new SVGNumber(level));

	    this.queue(
	      function () {
	        morpher = morpher.from(this.element().zoom());
	      },
	      function (pos) {
	        this.element().zoom(morpher.at(pos), point);
	        return morpher.done()
	      },
	      function (newLevel, newPoint) {
	        point = newPoint;
	        morpher.to(newLevel);
	      }
	    );

	    this._rememberMorpher('zoom', morpher);
	    return this
	  },

	  /**
	   ** absolute transformations
	   **/

	  //
	  // M v -----|-----(D M v = F v)------|----->  T v
	  //
	  // 1. define the final state (T) and decompose it (once)
	  //    t = [tx, ty, the, lam, sy, sx]
	  // 2. on every frame: pull the current state of all previous transforms
	  //    (M - m can change)
	  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]
	  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)
	  //   - Note F(0) = M
	  //   - Note F(1) = T
	  // 4. Now you get the delta matrix as a result: D = F * inv(M)

	  transform(transforms, relative, affine) {
	    // If we have a declarative function, we should retarget it if possible
	    relative = transforms.relative || relative;
	    if (
	      this._isDeclarative &&
	      !relative &&
	      this._tryRetarget('transform', transforms)
	    ) {
	      return this
	    }

	    // Parse the parameters
	    const isMatrix = Matrix.isMatrixLike(transforms);
	    affine =
	      transforms.affine != null
	        ? transforms.affine
	        : affine != null
	          ? affine
	          : !isMatrix;

	    // Create a morpher and set its type
	    const morpher = new Morphable(this._stepper).type(
	      affine ? TransformBag : Matrix
	    );

	    let origin;
	    let element;
	    let current;
	    let currentAngle;
	    let startTransform;

	    function setup() {
	      // make sure element and origin is defined
	      element = element || this.element();
	      origin = origin || getOrigin(transforms, element);

	      startTransform = new Matrix(relative ? undefined : element);

	      // add the runner to the element so it can merge transformations
	      element._addRunner(this);

	      // Deactivate all transforms that have run so far if we are absolute
	      if (!relative) {
	        element._clearTransformRunnersBefore(this);
	      }
	    }

	    function run(pos) {
	      // clear all other transforms before this in case something is saved
	      // on this runner. We are absolute. We dont need these!
	      if (!relative) this.clearTransform();

	      const { x, y } = new Point(origin).transform(
	        element._currentTransform(this)
	      );

	      let target = new Matrix({ ...transforms, origin: [x, y] });
	      let start = this._isDeclarative && current ? current : startTransform;

	      if (affine) {
	        target = target.decompose(x, y);
	        start = start.decompose(x, y);

	        // Get the current and target angle as it was set
	        const rTarget = target.rotate;
	        const rCurrent = start.rotate;

	        // Figure out the shortest path to rotate directly
	        const possibilities = [rTarget - 360, rTarget, rTarget + 360];
	        const distances = possibilities.map((a) => Math.abs(a - rCurrent));
	        const shortest = Math.min(...distances);
	        const index = distances.indexOf(shortest);
	        target.rotate = possibilities[index];
	      }

	      if (relative) {
	        // we have to be careful here not to overwrite the rotation
	        // with the rotate method of Matrix
	        if (!isMatrix) {
	          target.rotate = transforms.rotate || 0;
	        }
	        if (this._isDeclarative && currentAngle) {
	          start.rotate = currentAngle;
	        }
	      }

	      morpher.from(start);
	      morpher.to(target);

	      const affineParameters = morpher.at(pos);
	      currentAngle = affineParameters.rotate;
	      current = new Matrix(affineParameters);

	      this.addTransform(current);
	      element._addRunner(this);
	      return morpher.done()
	    }

	    function retarget(newTransforms) {
	      // only get a new origin if it changed since the last call
	      if (
	        (newTransforms.origin || 'center').toString() !==
	        (transforms.origin || 'center').toString()
	      ) {
	        origin = getOrigin(newTransforms, element);
	      }

	      // overwrite the old transformations with the new ones
	      transforms = { ...newTransforms, origin };
	    }

	    this.queue(setup, run, retarget, true);
	    this._isDeclarative && this._rememberMorpher('transform', morpher);
	    return this
	  },

	  // Animatable x-axis
	  x(x) {
	    return this._queueNumber('x', x)
	  },

	  // Animatable y-axis
	  y(y) {
	    return this._queueNumber('y', y)
	  },

	  ax(x) {
	    return this._queueNumber('ax', x)
	  },

	  ay(y) {
	    return this._queueNumber('ay', y)
	  },

	  dx(x = 0) {
	    return this._queueNumberDelta('x', x)
	  },

	  dy(y = 0) {
	    return this._queueNumberDelta('y', y)
	  },

	  dmove(x, y) {
	    return this.dx(x).dy(y)
	  },

	  _queueNumberDelta(method, to) {
	    to = new SVGNumber(to);

	    // Try to change the target if we have this method already registered
	    if (this._tryRetarget(method, to)) return this

	    // Make a morpher and queue the animation
	    const morpher = new Morphable(this._stepper).to(to);
	    let from = null;
	    this.queue(
	      function () {
	        from = this.element()[method]();
	        morpher.from(from);
	        morpher.to(from + to);
	      },
	      function (pos) {
	        this.element()[method](morpher.at(pos));
	        return morpher.done()
	      },
	      function (newTo) {
	        morpher.to(from + new SVGNumber(newTo));
	      }
	    );

	    // Register the morpher so that if it is changed again, we can retarget it
	    this._rememberMorpher(method, morpher);
	    return this
	  },

	  _queueObject(method, to) {
	    // Try to change the target if we have this method already registered
	    if (this._tryRetarget(method, to)) return this

	    // Make a morpher and queue the animation
	    const morpher = new Morphable(this._stepper).to(to);
	    this.queue(
	      function () {
	        morpher.from(this.element()[method]());
	      },
	      function (pos) {
	        this.element()[method](morpher.at(pos));
	        return morpher.done()
	      }
	    );

	    // Register the morpher so that if it is changed again, we can retarget it
	    this._rememberMorpher(method, morpher);
	    return this
	  },

	  _queueNumber(method, value) {
	    return this._queueObject(method, new SVGNumber(value))
	  },

	  // Animatable center x-axis
	  cx(x) {
	    return this._queueNumber('cx', x)
	  },

	  // Animatable center y-axis
	  cy(y) {
	    return this._queueNumber('cy', y)
	  },

	  // Add animatable move
	  move(x, y) {
	    return this.x(x).y(y)
	  },

	  amove(x, y) {
	    return this.ax(x).ay(y)
	  },

	  // Add animatable center
	  center(x, y) {
	    return this.cx(x).cy(y)
	  },

	  // Add animatable size
	  size(width, height) {
	    // animate bbox based size for all other elements
	    let box;

	    if (!width || !height) {
	      box = this._element.bbox();
	    }

	    if (!width) {
	      width = (box.width / box.height) * height;
	    }

	    if (!height) {
	      height = (box.height / box.width) * width;
	    }

	    return this.width(width).height(height)
	  },

	  // Add animatable width
	  width(width) {
	    return this._queueNumber('width', width)
	  },

	  // Add animatable height
	  height(height) {
	    return this._queueNumber('height', height)
	  },

	  // Add animatable plot
	  plot(a, b, c, d) {
	    // Lines can be plotted with 4 arguments
	    if (arguments.length === 4) {
	      return this.plot([a, b, c, d])
	    }

	    if (this._tryRetarget('plot', a)) return this

	    const morpher = new Morphable(this._stepper)
	      .type(this._element.MorphArray)
	      .to(a);

	    this.queue(
	      function () {
	        morpher.from(this._element.array());
	      },
	      function (pos) {
	        this._element.plot(morpher.at(pos));
	        return morpher.done()
	      }
	    );

	    this._rememberMorpher('plot', morpher);
	    return this
	  },

	  // Add leading method
	  leading(value) {
	    return this._queueNumber('leading', value)
	  },

	  // Add animatable viewbox
	  viewbox(x, y, width, height) {
	    return this._queueObject('viewbox', new Box(x, y, width, height))
	  },

	  update(o) {
	    if (typeof o !== 'object') {
	      return this.update({
	        offset: arguments[0],
	        color: arguments[1],
	        opacity: arguments[2]
	      })
	    }

	    if (o.opacity != null) this.attr('stop-opacity', o.opacity);
	    if (o.color != null) this.attr('stop-color', o.color);
	    if (o.offset != null) this.attr('offset', o.offset);

	    return this
	  }
	});

	extend(Runner, { rx, ry, from, to });
	register(Runner, 'Runner');

	class Svg extends Container {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('svg', node), attrs);
	    this.namespace();
	  }

	  // Creates and returns defs element
	  defs() {
	    if (!this.isRoot()) return this.root().defs()

	    return adopt(this.node.querySelector('defs')) || this.put(new Defs())
	  }

	  isRoot() {
	    return (
	      !this.node.parentNode ||
	      (!(this.node.parentNode instanceof globals.window.SVGElement) &&
	        this.node.parentNode.nodeName !== '#document-fragment')
	    )
	  }

	  // Add namespaces
	  namespace() {
	    if (!this.isRoot()) return this.root().namespace()
	    return this.attr({ xmlns: svg, version: '1.1' }).attr(
	      'xmlns:xlink',
	      xlink,
	      xmlns
	    )
	  }

	  removeNamespace() {
	    return this.attr({ xmlns: null, version: null })
	      .attr('xmlns:xlink', null, xmlns)
	      .attr('xmlns:svgjs', null, xmlns)
	  }

	  // Check if this is a root svg
	  // If not, call root() from this element
	  root() {
	    if (this.isRoot()) return this
	    return super.root()
	  }
	}

	registerMethods({
	  Container: {
	    // Create nested svg document
	    nested: wrapWithAttrCheck(function () {
	      return this.put(new Svg())
	    })
	  }
	});

	register(Svg, 'Svg', true);

	let Symbol$1 = class Symbol extends Container {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('symbol', node), attrs);
	  }
	};

	registerMethods({
	  Container: {
	    symbol: wrapWithAttrCheck(function () {
	      return this.put(new Symbol$1())
	    })
	  }
	});

	register(Symbol$1, 'Symbol');

	// Create plain text node
	function plain(text) {
	  // clear if build mode is disabled
	  if (this._build === false) {
	    this.clear();
	  }

	  // create text node
	  this.node.appendChild(globals.document.createTextNode(text));

	  return this
	}

	// Get length of text element
	function length() {
	  return this.node.getComputedTextLength()
	}

	// Move over x-axis
	// Text is moved by its bounding box
	// text-anchor does NOT matter
	function x$1(x, box = this.bbox()) {
	  if (x == null) {
	    return box.x
	  }

	  return this.attr('x', this.attr('x') + x - box.x)
	}

	// Move over y-axis
	function y$1(y, box = this.bbox()) {
	  if (y == null) {
	    return box.y
	  }

	  return this.attr('y', this.attr('y') + y - box.y)
	}

	function move$1(x, y, box = this.bbox()) {
	  return this.x(x, box).y(y, box)
	}

	// Move center over x-axis
	function cx(x, box = this.bbox()) {
	  if (x == null) {
	    return box.cx
	  }

	  return this.attr('x', this.attr('x') + x - box.cx)
	}

	// Move center over y-axis
	function cy(y, box = this.bbox()) {
	  if (y == null) {
	    return box.cy
	  }

	  return this.attr('y', this.attr('y') + y - box.cy)
	}

	function center(x, y, box = this.bbox()) {
	  return this.cx(x, box).cy(y, box)
	}

	function ax(x) {
	  return this.attr('x', x)
	}

	function ay(y) {
	  return this.attr('y', y)
	}

	function amove(x, y) {
	  return this.ax(x).ay(y)
	}

	// Enable / disable build mode
	function build(build) {
	  this._build = !!build;
	  return this
	}

	var textable = /*#__PURE__*/Object.freeze({
		__proto__: null,
		amove: amove,
		ax: ax,
		ay: ay,
		build: build,
		center: center,
		cx: cx,
		cy: cy,
		length: length,
		move: move$1,
		plain: plain,
		x: x$1,
		y: y$1
	});

	class Text extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('text', node), attrs);

	    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3); // store leading value for rebuilding
	    this._rebuild = true; // enable automatic updating of dy values
	    this._build = false; // disable build mode for adding multiple lines
	  }

	  // Set / get leading
	  leading(value) {
	    // act as getter
	    if (value == null) {
	      return this.dom.leading
	    }

	    // act as setter
	    this.dom.leading = new SVGNumber(value);

	    return this.rebuild()
	  }

	  // Rebuild appearance type
	  rebuild(rebuild) {
	    // store new rebuild flag if given
	    if (typeof rebuild === 'boolean') {
	      this._rebuild = rebuild;
	    }

	    // define position of all lines
	    if (this._rebuild) {
	      const self = this;
	      let blankLineOffset = 0;
	      const leading = this.dom.leading;

	      this.each(function (i) {
	        if (isDescriptive(this.node)) return

	        const fontSize = globals.window
	          .getComputedStyle(this.node)
	          .getPropertyValue('font-size');

	        const dy = leading * new SVGNumber(fontSize);

	        if (this.dom.newLined) {
	          this.attr('x', self.attr('x'));

	          if (this.text() === '\n') {
	            blankLineOffset += dy;
	          } else {
	            this.attr('dy', i ? dy + blankLineOffset : 0);
	            blankLineOffset = 0;
	          }
	        }
	      });

	      this.fire('rebuild');
	    }

	    return this
	  }

	  // overwrite method from parent to set data properly
	  setData(o) {
	    this.dom = o;
	    this.dom.leading = new SVGNumber(o.leading || 1.3);
	    return this
	  }

	  writeDataToDom() {
	    writeDataToDom(this, this.dom, { leading: 1.3 });
	    return this
	  }

	  // Set the text content
	  text(text) {
	    // act as getter
	    if (text === undefined) {
	      const children = this.node.childNodes;
	      let firstLine = 0;
	      text = '';

	      for (let i = 0, len = children.length; i < len; ++i) {
	        // skip textPaths - they are no lines
	        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {
	          if (i === 0) firstLine = i + 1;
	          continue
	        }

	        // add newline if its not the first child and newLined is set to true
	        if (
	          i !== firstLine &&
	          children[i].nodeType !== 3 &&
	          adopt(children[i]).dom.newLined === true
	        ) {
	          text += '\n';
	        }

	        // add content of this node
	        text += children[i].textContent;
	      }

	      return text
	    }

	    // remove existing content
	    this.clear().build(true);

	    if (typeof text === 'function') {
	      // call block
	      text.call(this, this);
	    } else {
	      // store text and make sure text is not blank
	      text = (text + '').split('\n');

	      // build new lines
	      for (let j = 0, jl = text.length; j < jl; j++) {
	        this.newLine(text[j]);
	      }
	    }

	    // disable build mode and rebuild lines
	    return this.build(false).rebuild()
	  }
	}

	extend(Text, textable);

	registerMethods({
	  Container: {
	    // Create text element
	    text: wrapWithAttrCheck(function (text = '') {
	      return this.put(new Text()).text(text)
	    }),

	    // Create plain text element
	    plain: wrapWithAttrCheck(function (text = '') {
	      return this.put(new Text()).plain(text)
	    })
	  }
	});

	register(Text, 'Text');

	class Tspan extends Shape {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('tspan', node), attrs);
	    this._build = false; // disable build mode for adding multiple lines
	  }

	  // Shortcut dx
	  dx(dx) {
	    return this.attr('dx', dx)
	  }

	  // Shortcut dy
	  dy(dy) {
	    return this.attr('dy', dy)
	  }

	  // Create new line
	  newLine() {
	    // mark new line
	    this.dom.newLined = true;

	    // fetch parent
	    const text = this.parent();

	    // early return in case we are not in a text element
	    if (!(text instanceof Text)) {
	      return this
	    }

	    const i = text.index(this);

	    const fontSize = globals.window
	      .getComputedStyle(this.node)
	      .getPropertyValue('font-size');
	    const dy = text.dom.leading * new SVGNumber(fontSize);

	    // apply new position
	    return this.dy(i ? dy : 0).attr('x', text.x())
	  }

	  // Set text content
	  text(text) {
	    if (text == null)
	      return this.node.textContent + (this.dom.newLined ? '\n' : '')

	    if (typeof text === 'function') {
	      this.clear().build(true);
	      text.call(this, this);
	      this.build(false);
	    } else {
	      this.plain(text);
	    }

	    return this
	  }
	}

	extend(Tspan, textable);

	registerMethods({
	  Tspan: {
	    tspan: wrapWithAttrCheck(function (text = '') {
	      const tspan = new Tspan();

	      // clear if build mode is disabled
	      if (!this._build) {
	        this.clear();
	      }

	      // add new tspan
	      return this.put(tspan).text(text)
	    })
	  },
	  Text: {
	    newLine: function (text = '') {
	      return this.tspan(text).newLine()
	    }
	  }
	});

	register(Tspan, 'Tspan');

	class Circle extends Shape {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('circle', node), attrs);
	  }

	  radius(r) {
	    return this.attr('r', r)
	  }

	  // Radius x value
	  rx(rx) {
	    return this.attr('r', rx)
	  }

	  // Alias radius x value
	  ry(ry) {
	    return this.rx(ry)
	  }

	  size(size) {
	    return this.radius(new SVGNumber(size).divide(2))
	  }
	}

	extend(Circle, { x: x$3, y: y$3, cx: cx$1, cy: cy$1, width: width$2, height: height$2 });

	registerMethods({
	  Container: {
	    // Create circle element
	    circle: wrapWithAttrCheck(function (size = 0) {
	      return this.put(new Circle()).size(size).move(0, 0)
	    })
	  }
	});

	register(Circle, 'Circle');

	class ClipPath extends Container {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('clipPath', node), attrs);
	  }

	  // Unclip all clipped elements and remove itself
	  remove() {
	    // unclip all targets
	    this.targets().forEach(function (el) {
	      el.unclip();
	    });

	    // remove clipPath from parent
	    return super.remove()
	  }

	  targets() {
	    return baseFind('svg [clip-path*=' + this.id() + ']')
	  }
	}

	registerMethods({
	  Container: {
	    // Create clipping element
	    clip: wrapWithAttrCheck(function () {
	      return this.defs().put(new ClipPath())
	    })
	  },
	  Element: {
	    // Distribute clipPath to svg element
	    clipper() {
	      return this.reference('clip-path')
	    },

	    clipWith(element) {
	      // use given clip or create a new one
	      const clipper =
	        element instanceof ClipPath
	          ? element
	          : this.parent().clip().add(element);

	      // apply mask
	      return this.attr('clip-path', 'url(#' + clipper.id() + ')')
	    },

	    // Unclip element
	    unclip() {
	      return this.attr('clip-path', null)
	    }
	  }
	});

	register(ClipPath, 'ClipPath');

	class ForeignObject extends Element {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('foreignObject', node), attrs);
	  }
	}

	registerMethods({
	  Container: {
	    foreignObject: wrapWithAttrCheck(function (width, height) {
	      return this.put(new ForeignObject()).size(width, height)
	    })
	  }
	});

	register(ForeignObject, 'ForeignObject');

	function dmove(dx, dy) {
	  this.children().forEach((child) => {
	    let bbox;

	    // We have to wrap this for elements that dont have a bbox
	    // e.g. title and other descriptive elements
	    try {
	      // Get the childs bbox
	      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039
	      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs
	      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).
	      // Funnily enough the broken behavior would work for us but that breaks it in chrome
	      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself
	      bbox =
	        child.node instanceof getWindow().SVGSVGElement
	          ? new Box(child.attr(['x', 'y', 'width', 'height']))
	          : child.bbox();
	    } catch (e) {
	      return
	    }

	    // Get childs matrix
	    const m = new Matrix(child);
	    // Translate childs matrix by amount and
	    // transform it back into parents space
	    const matrix = m.translate(dx, dy).transform(m.inverse());
	    // Calculate new x and y from old box
	    const p = new Point(bbox.x, bbox.y).transform(matrix);
	    // Move element
	    child.move(p.x, p.y);
	  });

	  return this
	}

	function dx(dx) {
	  return this.dmove(dx, 0)
	}

	function dy(dy) {
	  return this.dmove(0, dy)
	}

	function height(height, box = this.bbox()) {
	  if (height == null) return box.height
	  return this.size(box.width, height, box)
	}

	function move(x = 0, y = 0, box = this.bbox()) {
	  const dx = x - box.x;
	  const dy = y - box.y;

	  return this.dmove(dx, dy)
	}

	function size(width, height, box = this.bbox()) {
	  const p = proportionalSize(this, width, height, box);
	  const scaleX = p.width / box.width;
	  const scaleY = p.height / box.height;

	  this.children().forEach((child) => {
	    const o = new Point(box).transform(new Matrix(child).inverse());
	    child.scale(scaleX, scaleY, o.x, o.y);
	  });

	  return this
	}

	function width(width, box = this.bbox()) {
	  if (width == null) return box.width
	  return this.size(width, box.height, box)
	}

	function x(x, box = this.bbox()) {
	  if (x == null) return box.x
	  return this.move(x, box.y, box)
	}

	function y(y, box = this.bbox()) {
	  if (y == null) return box.y
	  return this.move(box.x, y, box)
	}

	var containerGeometry = /*#__PURE__*/Object.freeze({
		__proto__: null,
		dmove: dmove,
		dx: dx,
		dy: dy,
		height: height,
		move: move,
		size: size,
		width: width,
		x: x,
		y: y
	});

	class G extends Container {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('g', node), attrs);
	  }
	}

	extend(G, containerGeometry);

	registerMethods({
	  Container: {
	    // Create a group element
	    group: wrapWithAttrCheck(function () {
	      return this.put(new G())
	    })
	  }
	});

	register(G, 'G');

	class A extends Container {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('a', node), attrs);
	  }

	  // Link target attribute
	  target(target) {
	    return this.attr('target', target)
	  }

	  // Link url
	  to(url) {
	    return this.attr('href', url, xlink)
	  }
	}

	extend(A, containerGeometry);

	registerMethods({
	  Container: {
	    // Create a hyperlink element
	    link: wrapWithAttrCheck(function (url) {
	      return this.put(new A()).to(url)
	    })
	  },
	  Element: {
	    unlink() {
	      const link = this.linker();

	      if (!link) return this

	      const parent = link.parent();

	      if (!parent) {
	        return this.remove()
	      }

	      const index = parent.index(link);
	      parent.add(this, index);

	      link.remove();
	      return this
	    },
	    linkTo(url) {
	      // reuse old link if possible
	      let link = this.linker();

	      if (!link) {
	        link = new A();
	        this.wrap(link);
	      }

	      if (typeof url === 'function') {
	        url.call(link, link);
	      } else {
	        link.to(url);
	      }

	      return this
	    },
	    linker() {
	      const link = this.parent();
	      if (link && link.node.nodeName.toLowerCase() === 'a') {
	        return link
	      }

	      return null
	    }
	  }
	});

	register(A, 'A');

	class Mask extends Container {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('mask', node), attrs);
	  }

	  // Unmask all masked elements and remove itself
	  remove() {
	    // unmask all targets
	    this.targets().forEach(function (el) {
	      el.unmask();
	    });

	    // remove mask from parent
	    return super.remove()
	  }

	  targets() {
	    return baseFind('svg [mask*=' + this.id() + ']')
	  }
	}

	registerMethods({
	  Container: {
	    mask: wrapWithAttrCheck(function () {
	      return this.defs().put(new Mask())
	    })
	  },
	  Element: {
	    // Distribute mask to svg element
	    masker() {
	      return this.reference('mask')
	    },

	    maskWith(element) {
	      // use given mask or create a new one
	      const masker =
	        element instanceof Mask ? element : this.parent().mask().add(element);

	      // apply mask
	      return this.attr('mask', 'url(#' + masker.id() + ')')
	    },

	    // Unmask element
	    unmask() {
	      return this.attr('mask', null)
	    }
	  }
	});

	register(Mask, 'Mask');

	class Stop extends Element {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('stop', node), attrs);
	  }

	  // add color stops
	  update(o) {
	    if (typeof o === 'number' || o instanceof SVGNumber) {
	      o = {
	        offset: arguments[0],
	        color: arguments[1],
	        opacity: arguments[2]
	      };
	    }

	    // set attributes
	    if (o.opacity != null) this.attr('stop-opacity', o.opacity);
	    if (o.color != null) this.attr('stop-color', o.color);
	    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset));

	    return this
	  }
	}

	registerMethods({
	  Gradient: {
	    // Add a color stop
	    stop: function (offset, color, opacity) {
	      return this.put(new Stop()).update(offset, color, opacity)
	    }
	  }
	});

	register(Stop, 'Stop');

	function cssRule(selector, rule) {
	  if (!selector) return ''
	  if (!rule) return selector

	  let ret = selector + '{';

	  for (const i in rule) {
	    ret += unCamelCase(i) + ':' + rule[i] + ';';
	  }

	  ret += '}';

	  return ret
	}

	let Style$2 = class Style extends Element {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('style', node), attrs);
	  }

	  addText(w = '') {
	    this.node.textContent += w;
	    return this
	  }

	  font(name, src, params = {}) {
	    return this.rule('@font-face', {
	      fontFamily: name,
	      src: src,
	      ...params
	    })
	  }

	  rule(selector, obj) {
	    return this.addText(cssRule(selector, obj))
	  }
	};

	registerMethods('Dom', {
	  style(selector, obj) {
	    return this.put(new Style$2()).rule(selector, obj)
	  },
	  fontface(name, src, params) {
	    return this.put(new Style$2()).font(name, src, params)
	  }
	});

	register(Style$2, 'Style');

	class TextPath extends Text {
	  // Initialize node
	  constructor(node, attrs = node) {
	    super(nodeOrNew('textPath', node), attrs);
	  }

	  // return the array of the path track element
	  array() {
	    const track = this.track();

	    return track ? track.array() : null
	  }

	  // Plot path if any
	  plot(d) {
	    const track = this.track();
	    let pathArray = null;

	    if (track) {
	      pathArray = track.plot(d);
	    }

	    return d == null ? pathArray : this
	  }

	  // Get the path element
	  track() {
	    return this.reference('href')
	  }
	}

	registerMethods({
	  Container: {
	    textPath: wrapWithAttrCheck(function (text, path) {
	      // Convert text to instance if needed
	      if (!(text instanceof Text)) {
	        text = this.text(text);
	      }

	      return text.path(path)
	    })
	  },
	  Text: {
	    // Create path for text to run on
	    path: wrapWithAttrCheck(function (track, importNodes = true) {
	      const textPath = new TextPath();

	      // if track is a path, reuse it
	      if (!(track instanceof Path)) {
	        // create path element
	        track = this.defs().path(track);
	      }

	      // link textPath to path and add content
	      textPath.attr('href', '#' + track, xlink);

	      // Transplant all nodes from text to textPath
	      let node;
	      if (importNodes) {
	        while ((node = this.node.firstChild)) {
	          textPath.node.appendChild(node);
	        }
	      }

	      // add textPath element as child node and return textPath
	      return this.put(textPath)
	    }),

	    // Get the textPath children
	    textPath() {
	      return this.findOne('textPath')
	    }
	  },
	  Path: {
	    // creates a textPath from this path
	    text: wrapWithAttrCheck(function (text) {
	      // Convert text to instance if needed
	      if (!(text instanceof Text)) {
	        text = new Text().addTo(this.parent()).text(text);
	      }

	      // Create textPath from text and path and return
	      return text.path(this)
	    }),

	    targets() {
	      return baseFind('svg textPath').filter((node) => {
	        return (node.attr('href') || '').includes(this.id())
	      })

	      // Does not work in IE11. Use when IE support is dropped
	      // return baseFind('svg textPath[*|href*=' + this.id() + ']')
	    }
	  }
	});

	TextPath.prototype.MorphArray = PathArray;
	register(TextPath, 'TextPath');

	class Use extends Shape {
	  constructor(node, attrs = node) {
	    super(nodeOrNew('use', node), attrs);
	  }

	  // Use element as a reference
	  use(element, file) {
	    // Set lined element
	    return this.attr('href', (file || '') + '#' + element, xlink)
	  }
	}

	registerMethods({
	  Container: {
	    // Create a use element
	    use: wrapWithAttrCheck(function (element, file) {
	      return this.put(new Use()).use(element, file)
	    })
	  }
	});

	register(Use, 'Use');

	/* Optional Modules */
	const SVG = makeInstance;

	extend([Svg, Symbol$1, Image, Pattern, Marker], getMethodsFor('viewbox'));

	extend([Line, Polyline, Polygon, Path], getMethodsFor('marker'));

	extend(Text, getMethodsFor('Text'));
	extend(Path, getMethodsFor('Path'));

	extend(Defs, getMethodsFor('Defs'));

	extend([Text, Tspan], getMethodsFor('Tspan'));

	extend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'));

	extend(EventTarget, getMethodsFor('EventTarget'));
	extend(Dom, getMethodsFor('Dom'));
	extend(Element, getMethodsFor('Element'));
	extend(Shape, getMethodsFor('Shape'));
	extend([Container, Fragment], getMethodsFor('Container'));
	extend(Gradient, getMethodsFor('Gradient'));

	extend(Runner, getMethodsFor('Runner'));

	List.extend(getMethodNames());

	registerMorphableType([
	  SVGNumber,
	  Color,
	  Box,
	  Matrix,
	  SVGArray,
	  PointArray,
	  PathArray,
	  Point
	]);

	makeMorphable();

	/**
	 * Lexing or parsing positional information for error reporting.
	 * This object is immutable.
	 */
	class SourceLocation {
	  // The + prefix indicates that these fields aren't writeable
	  // Lexer holding the input string.
	  // Start offset, zero-based inclusive.
	  // End offset, zero-based exclusive.
	  constructor(lexer, start, end) {
	    this.lexer = void 0;
	    this.start = void 0;
	    this.end = void 0;
	    this.lexer = lexer;
	    this.start = start;
	    this.end = end;
	  }
	  /**
	   * Merges two `SourceLocation`s from location providers, given they are
	   * provided in order of appearance.
	   * - Returns the first one's location if only the first is provided.
	   * - Returns a merged range of the first and the last if both are provided
	   *   and their lexers match.
	   * - Otherwise, returns null.
	   */


	  static range(first, second) {
	    if (!second) {
	      return first && first.loc;
	    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
	      return null;
	    } else {
	      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
	    }
	  }

	}

	/**
	 * Interface required to break circular dependency between Token, Lexer, and
	 * ParseError.
	 */

	/**
	 * The resulting token returned from `lex`.
	 *
	 * It consists of the token text plus some position information.
	 * The position information is essentially a range in an input string,
	 * but instead of referencing the bare input string, we refer to the lexer.
	 * That way it is possible to attach extra metadata to the input string,
	 * like for example a file name or similar.
	 *
	 * The position information is optional, so it is OK to construct synthetic
	 * tokens if appropriate. Not providing available position information may
	 * lead to degraded error reporting, though.
	 */
	class Token {
	  // don't expand the token
	  // used in \noexpand
	  constructor(text, // the text of this token
	  loc) {
	    this.text = void 0;
	    this.loc = void 0;
	    this.noexpand = void 0;
	    this.treatAsRelax = void 0;
	    this.text = text;
	    this.loc = loc;
	  }
	  /**
	   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
	   * the whole input range enclosed by these two.
	   */


	  range(endToken, // last token of the range, inclusive
	  text) {
	    return new Token(text, SourceLocation.range(this, endToken));
	  }

	}

	/**
	 * This is the ParseError class, which is the main error thrown by KaTeX
	 * functions when something has gone wrong. This is used to distinguish internal
	 * errors from errors in the expression that the user provided.
	 *
	 * If possible, a caller should provide a Token or ParseNode with information
	 * about where in the source string the problem occurred.
	 */
	class ParseError {
	  // Error position based on passed-in Token or ParseNode.
	  constructor(message, // The error message
	  token) {
	    this.position = void 0;
	    var error = "KaTeX parse error: " + message;
	    var start;
	    var loc = token && token.loc;

	    if (loc && loc.start <= loc.end) {
	      // If we have the input and a position, make the error a bit fancier
	      // Get the input
	      var input = loc.lexer.input; // Prepend some information

	      start = loc.start;
	      var end = loc.end;

	      if (start === input.length) {
	        error += " at end of input: ";
	      } else {
	        error += " at position " + (start + 1) + ": ";
	      } // Underline token in question using combining underscores


	      var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

	      var left;

	      if (start > 15) {
	        left = "…" + input.slice(start - 15, start);
	      } else {
	        left = input.slice(0, start);
	      }

	      var right;

	      if (end + 15 < input.length) {
	        right = input.slice(end, end + 15) + "…";
	      } else {
	        right = input.slice(end);
	      }

	      error += left + underlined + right;
	    } // Some hackery to make ParseError a prototype of Error
	    // See http://stackoverflow.com/a/8460753


	    var self = new Error(error);
	    self.name = "ParseError"; // $FlowFixMe

	    self.__proto__ = ParseError.prototype; // $FlowFixMe

	    self.position = start;
	    return self;
	  }

	} // $FlowFixMe More hackery


	ParseError.prototype.__proto__ = Error.prototype;

	/**
	 * This file contains a list of utility functions which are useful in other
	 * files.
	 */

	/**
	 * Return whether an element is contained in a list
	 */
	var contains = function contains(list, elem) {
	  return list.indexOf(elem) !== -1;
	};
	/**
	 * Provide a default value if a setting is undefined
	 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
	 */


	var deflt = function deflt(setting, defaultIfUndefined) {
	  return setting === undefined ? defaultIfUndefined : setting;
	}; // hyphenate and escape adapted from Facebook's React under Apache 2 license


	var uppercase = /([A-Z])/g;

	var hyphenate = function hyphenate(str) {
	  return str.replace(uppercase, "-$1").toLowerCase();
	};

	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};
	var ESCAPE_REGEX = /[&><"']/g;
	/**
	 * Escapes text to prevent scripting attacks.
	 */

	function escape(text) {
	  return String(text).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
	}
	/**
	 * Sometimes we want to pull out the innermost element of a group. In most
	 * cases, this will just be the group itself, but when ordgroups and colors have
	 * a single element, we want to pull that out.
	 */


	var getBaseElem = function getBaseElem(group) {
	  if (group.type === "ordgroup") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "color") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "font") {
	    return getBaseElem(group.body);
	  } else {
	    return group;
	  }
	};
	/**
	 * TeXbook algorithms often reference "character boxes", which are simply groups
	 * with a single character in them. To decide if something is a character box,
	 * we find its innermost group, and see if it is a single character.
	 */


	var isCharacterBox = function isCharacterBox(group) {
	  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

	  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
	};

	var assert = function assert(value) {
	  if (!value) {
	    throw new Error('Expected non-null, but got ' + String(value));
	  }

	  return value;
	};
	/**
	 * Return the protocol of a URL, or "_relative" if the URL does not specify a
	 * protocol (and thus is relative).
	 */

	var protocolFromUrl = function protocolFromUrl(url) {
	  var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
	  return protocol != null ? protocol[1] : "_relative";
	};
	var utils = {
	  contains,
	  deflt,
	  escape,
	  hyphenate,
	  getBaseElem,
	  isCharacterBox,
	  protocolFromUrl
	};

	/* eslint no-console:0 */

	/**
	 * The main Settings object
	 *
	 * The current options stored are:
	 *  - displayMode: Whether the expression should be typeset as inline math
	 *                 (false, the default), meaning that the math starts in
	 *                 \textstyle and is placed in an inline-block); or as display
	 *                 math (true), meaning that the math starts in \displaystyle
	 *                 and is placed in a block with vertical margin.
	 */
	class Settings {
	  constructor(options) {
	    this.displayMode = void 0;
	    this.output = void 0;
	    this.leqno = void 0;
	    this.fleqn = void 0;
	    this.throwOnError = void 0;
	    this.errorColor = void 0;
	    this.macros = void 0;
	    this.minRuleThickness = void 0;
	    this.colorIsTextColor = void 0;
	    this.strict = void 0;
	    this.trust = void 0;
	    this.maxSize = void 0;
	    this.maxExpand = void 0;
	    this.globalGroup = void 0;
	    // allow null options
	    options = options || {};
	    this.displayMode = utils.deflt(options.displayMode, false);
	    this.output = utils.deflt(options.output, "htmlAndMathml");
	    this.leqno = utils.deflt(options.leqno, false);
	    this.fleqn = utils.deflt(options.fleqn, false);
	    this.throwOnError = utils.deflt(options.throwOnError, true);
	    this.errorColor = utils.deflt(options.errorColor, "#cc0000");
	    this.macros = options.macros || {};
	    this.minRuleThickness = Math.max(0, utils.deflt(options.minRuleThickness, 0));
	    this.colorIsTextColor = utils.deflt(options.colorIsTextColor, false);
	    this.strict = utils.deflt(options.strict, "warn");
	    this.trust = utils.deflt(options.trust, false);
	    this.maxSize = Math.max(0, utils.deflt(options.maxSize, Infinity));
	    this.maxExpand = Math.max(0, utils.deflt(options.maxExpand, 1000));
	    this.globalGroup = utils.deflt(options.globalGroup, false);
	  }
	  /**
	   * Report nonstrict (non-LaTeX-compatible) input.
	   * Can safely not be called if `this.strict` is false in JavaScript.
	   */


	  reportNonstrict(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      strict = strict(errorCode, errorMsg, token);
	    }

	    if (!strict || strict === "ignore") {
	      return;
	    } else if (strict === true || strict === "error") {
	      throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	    }
	  }
	  /**
	   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
	   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
	   * instead, "error" translates to a return value of `true`, while "ignore"
	   * translates to a return value of `false`.  May still print a warning:
	   * "warn" prints a warning and returns `false`.
	   * This is for the second category of `errorCode`s listed in the README.
	   */


	  useStrictBehavior(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      // But catch any exceptions thrown by function, treating them
	      // like "error".
	      try {
	        strict = strict(errorCode, errorMsg, token);
	      } catch (error) {
	        strict = "error";
	      }
	    }

	    if (!strict || strict === "ignore") {
	      return false;
	    } else if (strict === true || strict === "error") {
	      return true;
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	      return false;
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	      return false;
	    }
	  }
	  /**
	   * Check whether to test potentially dangerous input, and return
	   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
	   * should be an object with `command` field specifying the relevant LaTeX
	   * command (as a string starting with `\`), and any other arguments, etc.
	   * If `context` has a `url` field, a `protocol` field will automatically
	   * get added by this function (changing the specified object).
	   */


	  isTrusted(context) {
	    if (context.url && !context.protocol) {
	      context.protocol = utils.protocolFromUrl(context.url);
	    }

	    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
	    return Boolean(trust);
	  }

	}

	/**
	 * This file contains information and classes for the various kinds of styles
	 * used in TeX. It provides a generic `Style` class, which holds information
	 * about a specific style. It then provides instances of all the different kinds
	 * of styles possible, and provides functions to move between them and get
	 * information about them.
	 */

	/**
	 * The main style class. Contains a unique id for the style, a size (which is
	 * the same for cramped and uncramped version of a style), and a cramped flag.
	 */
	class Style {
	  constructor(id, size, cramped) {
	    this.id = void 0;
	    this.size = void 0;
	    this.cramped = void 0;
	    this.id = id;
	    this.size = size;
	    this.cramped = cramped;
	  }
	  /**
	   * Get the style of a superscript given a base in the current style.
	   */


	  sup() {
	    return styles[sup[this.id]];
	  }
	  /**
	   * Get the style of a subscript given a base in the current style.
	   */


	  sub() {
	    return styles[sub[this.id]];
	  }
	  /**
	   * Get the style of a fraction numerator given the fraction in the current
	   * style.
	   */


	  fracNum() {
	    return styles[fracNum[this.id]];
	  }
	  /**
	   * Get the style of a fraction denominator given the fraction in the current
	   * style.
	   */


	  fracDen() {
	    return styles[fracDen[this.id]];
	  }
	  /**
	   * Get the cramped version of a style (in particular, cramping a cramped style
	   * doesn't change the style).
	   */


	  cramp() {
	    return styles[cramp[this.id]];
	  }
	  /**
	   * Get a text or display version of this style.
	   */


	  text() {
	    return styles[text[this.id]];
	  }
	  /**
	   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
	   */


	  isTight() {
	    return this.size >= 2;
	  }

	} // Export an interface for type checking, but don't expose the implementation.
	// This way, no more styles can be generated.


	// IDs of the different styles
	var D = 0;
	var Dc = 1;
	var T = 2;
	var Tc = 3;
	var S = 4;
	var Sc = 5;
	var SS = 6;
	var SSc = 7; // Instances of the different styles

	var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

	var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
	var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
	var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
	var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
	var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
	var text = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

	var Style$1 = {
	  DISPLAY: styles[D],
	  TEXT: styles[T],
	  SCRIPT: styles[S],
	  SCRIPTSCRIPT: styles[SS]
	};

	/*
	 * This file defines the Unicode scripts and script families that we
	 * support. To add new scripts or families, just add a new entry to the
	 * scriptData array below. Adding scripts to the scriptData array allows
	 * characters from that script to appear in \text{} environments.
	 */

	/**
	 * Each script or script family has a name and an array of blocks.
	 * Each block is an array of two numbers which specify the start and
	 * end points (inclusive) of a block of Unicode codepoints.
	 */

	/**
	 * Unicode block data for the families of scripts we support in \text{}.
	 * Scripts only need to appear here if they do not have font metrics.
	 */
	var scriptData = [{
	  // Latin characters beyond the Latin-1 characters we have metrics for.
	  // Needed for Czech, Hungarian and Turkish text, for example.
	  name: 'latin',
	  blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
	  [0x0300, 0x036f] // Combining Diacritical marks
	  ]
	}, {
	  // The Cyrillic script used by Russian and related languages.
	  // A Cyrillic subset used to be supported as explicitly defined
	  // symbols in symbols.js
	  name: 'cyrillic',
	  blocks: [[0x0400, 0x04ff]]
	}, {
	  // Armenian
	  name: 'armenian',
	  blocks: [[0x0530, 0x058F]]
	}, {
	  // The Brahmic scripts of South and Southeast Asia
	  // Devanagari (0900–097F)
	  // Bengali (0980–09FF)
	  // Gurmukhi (0A00–0A7F)
	  // Gujarati (0A80–0AFF)
	  // Oriya (0B00–0B7F)
	  // Tamil (0B80–0BFF)
	  // Telugu (0C00–0C7F)
	  // Kannada (0C80–0CFF)
	  // Malayalam (0D00–0D7F)
	  // Sinhala (0D80–0DFF)
	  // Thai (0E00–0E7F)
	  // Lao (0E80–0EFF)
	  // Tibetan (0F00–0FFF)
	  // Myanmar (1000–109F)
	  name: 'brahmic',
	  blocks: [[0x0900, 0x109F]]
	}, {
	  name: 'georgian',
	  blocks: [[0x10A0, 0x10ff]]
	}, {
	  // Chinese and Japanese.
	  // The "k" in cjk is for Korean, but we've separated Korean out
	  name: "cjk",
	  blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
	  [0x4E00, 0x9FAF], // CJK ideograms
	  [0xFF00, 0xFF60] // Fullwidth punctuation
	  // TODO: add halfwidth Katakana and Romanji glyphs
	  ]
	}, {
	  // Korean
	  name: 'hangul',
	  blocks: [[0xAC00, 0xD7AF]]
	}];
	/**
	 * Given a codepoint, return the name of the script or script family
	 * it is from, or null if it is not part of a known block
	 */

	function scriptFromCodepoint(codepoint) {
	  for (var i = 0; i < scriptData.length; i++) {
	    var script = scriptData[i];

	    for (var _i = 0; _i < script.blocks.length; _i++) {
	      var block = script.blocks[_i];

	      if (codepoint >= block[0] && codepoint <= block[1]) {
	        return script.name;
	      }
	    }
	  }

	  return null;
	}
	/**
	 * A flattened version of all the supported blocks in a single array.
	 * This is an optimization to make supportedCodepoint() fast.
	 */

	var allBlocks = [];
	scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
	/**
	 * Given a codepoint, return true if it falls within one of the
	 * scripts or script families defined above and false otherwise.
	 *
	 * Micro benchmarks shows that this is faster than
	 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
	 * in Firefox, Chrome and Node.
	 */

	function supportedCodepoint(codepoint) {
	  for (var i = 0; i < allBlocks.length; i += 2) {
	    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * This file provides support to domTree.js and delimiter.js.
	 * It's a storehouse of path geometry for SVG images.
	 */
	// In all paths below, the viewBox-to-em scale is 1000:1.
	var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
	// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
	// Think of variable extraViniculum as two detours in the SVG path.
	// The detour begins at the lower left of the area labeled extraViniculum below.
	// The detour proceeds one extraViniculum distance up and slightly to the right,
	// displacing the radiused corner between surd and viniculum. The radius is
	// traversed as usual, then the detour resumes. It goes right, to the end of
	// the very long viniculumn, then down one extraViniculum distance,
	// after which it resumes regular path geometry for the radical.

	/*                                                  viniculum
	                                                   /
	         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
	        / █████████████████████←0.04em (40 unit) std viniculum thickness
	       / /
	      / /
	     / /\
	    / / surd
	*/

	var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
	  // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
	  return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
	  // size1 is from glyph U221A in the font KaTeX_Size1-Regular
	  return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
	  // size2 is from glyph U221A in the font KaTeX_Size2-Regular
	  return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
	  // size3 is from glyph U221A in the font KaTeX_Size3-Regular
	  return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
	  // size4 is from glyph U221A in the font KaTeX_Size4-Regular
	  return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
	};

	var phasePath = function phasePath(y) {
	  var x = y / 2; // x coordinate at top of angle

	  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
	};

	var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
	  // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
	  // One path edge has a variable length. It runs vertically from the viniculumn
	  // to a point near (14 units) the bottom of the surd. The viniculum
	  // is normally 40 units thick. So the length of the line in question is:
	  var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
	  return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
	};

	var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
	  extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

	  var path = "";

	  switch (size) {
	    case "sqrtMain":
	      path = sqrtMain(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize1":
	      path = sqrtSize1(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize2":
	      path = sqrtSize2(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize3":
	      path = sqrtSize3(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize4":
	      path = sqrtSize4(extraViniculum, hLinePad);
	      break;

	    case "sqrtTall":
	      path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
	  }

	  return path;
	};
	var innerPath = function innerPath(name, height) {
	  // The inner part of stretchy tall delimiters
	  switch (name) {
	    case "\u239c":
	      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

	    case "\u2223":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

	    case "\u2225":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

	    case "\u239f":
	      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

	    case "\u23a2":
	      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

	    case "\u23a5":
	      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

	    case "\u23aa":
	      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

	    case "\u23d0":
	      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

	    case "\u2016":
	      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

	    default:
	      return "";
	  }
	};
	var path = {
	  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
	  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
	  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
	  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
	  // leftarrow is from glyph U+2190 in font KaTeX Main
	  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
	  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
	  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
	  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
	  // overgroup is from the MnSymbol package (public domain)
	  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
	  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
	  // Harpoons are from glyph U+21BD in font KaTeX Main
	  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
	  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
	  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
	  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
	  // hook is from glyph U+21A9 in font KaTeX Main
	  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
	  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
	  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
	  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
	  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
	  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
	  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
	  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
	  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
	  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
	  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
	  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
	  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
	  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
	  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
	  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
	  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
	  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
	  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
	  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
	  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
	  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
	  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
	  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
	  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
	  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
	  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
	  // tilde1 is a modified version of a glyph from the MnSymbol package
	  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
	  // ditto tilde2, tilde3, & tilde4
	  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
	  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
	  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
	  // vec is from glyph U+20D7 in font KaTeX Main
	  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
	  // widehat1 is a modified version of a glyph from the MnSymbol package
	  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
	  // ditto widehat2, widehat3, & widehat4
	  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  // widecheck paths are all inverted versions of widehat
	  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
	  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  // The next ten paths support reaction arrows from the mhchem package.
	  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
	  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
	  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
	  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
	  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
	  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
	  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
	  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
	  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
	  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
	  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
	};

	/**
	 * This node represents a document fragment, which contains elements, but when
	 * placed into the DOM doesn't have any representation itself. It only contains
	 * children and doesn't have any DOM node properties.
	 */
	class DocumentFragment {
	  // HtmlDomNode
	  // Never used; needed for satisfying interface.
	  constructor(children) {
	    this.children = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.children = children;
	    this.classes = [];
	    this.height = 0;
	    this.depth = 0;
	    this.maxFontSize = 0;
	    this.style = {};
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /** Convert the fragment into a node. */


	  toNode() {
	    var frag = document.createDocumentFragment();

	    for (var i = 0; i < this.children.length; i++) {
	      frag.appendChild(this.children[i].toNode());
	    }

	    return frag;
	  }
	  /** Convert the fragment into HTML markup. */


	  toMarkup() {
	    var markup = ""; // Simply concatenate the markup for the children together.

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText. Applies to
	   * MathDomNode's only.
	   */


	  toText() {
	    // To avoid this, we would subclass documentFragment separately for
	    // MathML, but polyfills for subclassing is expensive per PR 1469.
	    // $FlowFixMe: Only works for ChildType = MathDomNode.
	    var toText = child => child.toText();

	    return this.children.map(toText).join("");
	  }

	}

	/**
	 * These objects store the data about the DOM nodes we create, as well as some
	 * extra data. They can then be transformed into real DOM nodes with the
	 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
	 * storing extra properties on the nodes, as well as providing a way to easily
	 * work with the DOM.
	 *
	 * Similar functions for working with MathML nodes exist in mathMLTree.js.
	 *
	 * TODO: refactor `span` and `anchor` into common superclass when
	 * target environments support class inheritance
	 */

	/**
	 * Create an HTML className based on a list of classes. In addition to joining
	 * with spaces, we also remove empty classes.
	 */
	var createClass = function createClass(classes) {
	  return classes.filter(cls => cls).join(" ");
	};

	var initNode = function initNode(classes, options, style) {
	  this.classes = classes || [];
	  this.attributes = {};
	  this.height = 0;
	  this.depth = 0;
	  this.maxFontSize = 0;
	  this.style = style || {};

	  if (options) {
	    if (options.style.isTight()) {
	      this.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      this.style.color = color;
	    }
	  }
	};
	/**
	 * Convert into an HTML node
	 */


	var toNode = function toNode(tagName) {
	  var node = document.createElement(tagName); // Apply the class

	  node.className = createClass(this.classes); // Apply inline styles

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      // $FlowFixMe Flow doesn't seem to understand span.style's type.
	      node.style[style] = this.style[style];
	    }
	  } // Apply attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      node.setAttribute(attr, this.attributes[attr]);
	    }
	  } // Append the children, also as HTML nodes


	  for (var i = 0; i < this.children.length; i++) {
	    node.appendChild(this.children[i].toNode());
	  }

	  return node;
	};
	/**
	 * Convert into an HTML markup string
	 */


	var toMarkup = function toMarkup(tagName) {
	  var markup = "<" + tagName; // Add the class

	  if (this.classes.length) {
	    markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
	  }

	  var styles = ""; // Add the styles, after hyphenation

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	    }
	  }

	  if (styles) {
	    markup += " style=\"" + utils.escape(styles) + "\"";
	  } // Add the attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
	    }
	  }

	  markup += ">"; // Add the markup of the children, also as markup

	  for (var i = 0; i < this.children.length; i++) {
	    markup += this.children[i].toMarkup();
	  }

	  markup += "</" + tagName + ">";
	  return markup;
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.
	// This type does not include all CSS properties. Additional properties should
	// be added as needed.


	/**
	 * This node represents a span node, with a className, a list of children, and
	 * an inline style. It also contains information about its height, depth, and
	 * maxFontSize.
	 *
	 * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
	 * otherwise. This typesafety is important when HTML builders access a span's
	 * children.
	 */
	class Span {
	  constructor(classes, children, options, style) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options, style);
	    this.children = children || [];
	  }
	  /**
	   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
	   * all browsers support attributes the same, and having too many custom
	   * attributes is probably bad.
	   */


	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "span");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "span");
	  }

	}
	/**
	 * This node represents an anchor (<a>) element with a hyperlink.  See `span`
	 * for further details.
	 */

	class Anchor {
	  constructor(href, classes, children, options) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options);
	    this.children = children || [];
	    this.setAttribute('href', href);
	  }

	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "a");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "a");
	  }

	}
	/**
	 * This node represents an image embed (<img>) element.
	 */

	class Img {
	  constructor(src, alt, style) {
	    this.src = void 0;
	    this.alt = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.alt = alt;
	    this.src = src;
	    this.classes = ["mord"];
	    this.style = style;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    var node = document.createElement("img");
	    node.src = this.src;
	    node.alt = this.alt;
	    node.className = "mord"; // Apply inline styles

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        // $FlowFixMe
	        node.style[style] = this.style[style];
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

	    var styles = "";

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    markup += "'/>";
	    return markup;
	  }

	}
	var iCombinations = {
	  'î': '\u0131\u0302',
	  'ï': '\u0131\u0308',
	  'í': '\u0131\u0301',
	  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
	  'ì': '\u0131\u0300'
	};
	/**
	 * A symbol node contains information about a single symbol. It either renders
	 * to a single text node, or a span with a single text node in it, depending on
	 * whether it has CSS classes, styles, or needs italic correction.
	 */

	class SymbolNode {
	  constructor(text, height, depth, italic, skew, width, classes, style) {
	    this.text = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.italic = void 0;
	    this.skew = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.classes = void 0;
	    this.style = void 0;
	    this.text = text;
	    this.height = height || 0;
	    this.depth = depth || 0;
	    this.italic = italic || 0;
	    this.skew = skew || 0;
	    this.width = width || 0;
	    this.classes = classes || [];
	    this.style = style || {};
	    this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
	    // can specify which fonts to use.  This allows us to render these
	    // characters with a serif font in situations where the browser would
	    // either default to a sans serif or render a placeholder character.
	    // We use CSS class names like cjk_fallback, hangul_fallback and
	    // brahmic_fallback. See ./unicodeScripts.js for the set of possible
	    // script names

	    var script = scriptFromCodepoint(this.text.charCodeAt(0));

	    if (script) {
	      this.classes.push(script + "_fallback");
	    }

	    if (/[îïíì]/.test(this.text)) {
	      // add ī when we add Extended Latin
	      this.text = iCombinations[this.text];
	    }
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /**
	   * Creates a text node or span from a symbol node. Note that a span is only
	   * created if it is needed.
	   */


	  toNode() {
	    var node = document.createTextNode(this.text);
	    var span = null;

	    if (this.italic > 0) {
	      span = document.createElement("span");
	      span.style.marginRight = this.italic + "em";
	    }

	    if (this.classes.length > 0) {
	      span = span || document.createElement("span");
	      span.className = createClass(this.classes);
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

	        span.style[style] = this.style[style];
	      }
	    }

	    if (span) {
	      span.appendChild(node);
	      return span;
	    } else {
	      return node;
	    }
	  }
	  /**
	   * Creates markup for a symbol node.
	   */


	  toMarkup() {
	    // TODO(alpert): More duplication than I'd like from
	    // span.prototype.toMarkup and symbolNode.prototype.toNode...
	    var needsSpan = false;
	    var markup = "<span";

	    if (this.classes.length) {
	      needsSpan = true;
	      markup += " class=\"";
	      markup += utils.escape(createClass(this.classes));
	      markup += "\"";
	    }

	    var styles = "";

	    if (this.italic > 0) {
	      styles += "margin-right:" + this.italic + "em;";
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      needsSpan = true;
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    var escaped = utils.escape(this.text);

	    if (needsSpan) {
	      markup += ">";
	      markup += escaped;
	      markup += "</span>";
	      return markup;
	    } else {
	      return escaped;
	    }
	  }

	}
	/**
	 * SVG nodes are used to render stretchy wide elements.
	 */

	class SvgNode {
	  constructor(children, attributes) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.children = children || [];
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "svg"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</svg>";
	    return markup;
	  }

	}
	class PathNode {
	  constructor(pathName, alternate) {
	    this.pathName = void 0;
	    this.alternate = void 0;
	    this.pathName = pathName;
	    this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "path");

	    if (this.alternate) {
	      node.setAttribute("d", this.alternate);
	    } else {
	      node.setAttribute("d", path[this.pathName]);
	    }

	    return node;
	  }

	  toMarkup() {
	    if (this.alternate) {
	      return "<path d='" + this.alternate + "'/>";
	    } else {
	      return "<path d='" + path[this.pathName] + "'/>";
	    }
	  }

	}
	class LineNode {
	  constructor(attributes) {
	    this.attributes = void 0;
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "line"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<line";

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += "/>";
	    return markup;
	  }

	}
	function assertSymbolDomNode(group) {
	  if (group instanceof SymbolNode) {
	    return group;
	  } else {
	    throw new Error("Expected symbolNode but got " + String(group) + ".");
	  }
	}
	function assertSpan(group) {
	  if (group instanceof Span) {
	    return group;
	  } else {
	    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
	  }
	}

	// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
	var fontMetricsData = {
	  "AMS-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68889, 0, 0, 0.72222],
	    "66": [0, 0.68889, 0, 0, 0.66667],
	    "67": [0, 0.68889, 0, 0, 0.72222],
	    "68": [0, 0.68889, 0, 0, 0.72222],
	    "69": [0, 0.68889, 0, 0, 0.66667],
	    "70": [0, 0.68889, 0, 0, 0.61111],
	    "71": [0, 0.68889, 0, 0, 0.77778],
	    "72": [0, 0.68889, 0, 0, 0.77778],
	    "73": [0, 0.68889, 0, 0, 0.38889],
	    "74": [0.16667, 0.68889, 0, 0, 0.5],
	    "75": [0, 0.68889, 0, 0, 0.77778],
	    "76": [0, 0.68889, 0, 0, 0.66667],
	    "77": [0, 0.68889, 0, 0, 0.94445],
	    "78": [0, 0.68889, 0, 0, 0.72222],
	    "79": [0.16667, 0.68889, 0, 0, 0.77778],
	    "80": [0, 0.68889, 0, 0, 0.61111],
	    "81": [0.16667, 0.68889, 0, 0, 0.77778],
	    "82": [0, 0.68889, 0, 0, 0.72222],
	    "83": [0, 0.68889, 0, 0, 0.55556],
	    "84": [0, 0.68889, 0, 0, 0.66667],
	    "85": [0, 0.68889, 0, 0, 0.72222],
	    "86": [0, 0.68889, 0, 0, 0.72222],
	    "87": [0, 0.68889, 0, 0, 1.0],
	    "88": [0, 0.68889, 0, 0, 0.72222],
	    "89": [0, 0.68889, 0, 0, 0.72222],
	    "90": [0, 0.68889, 0, 0, 0.66667],
	    "107": [0, 0.68889, 0, 0, 0.55556],
	    "160": [0, 0, 0, 0, 0.25],
	    "165": [0, 0.675, 0.025, 0, 0.75],
	    "174": [0.15559, 0.69224, 0, 0, 0.94666],
	    "240": [0, 0.68889, 0, 0, 0.55556],
	    "295": [0, 0.68889, 0, 0, 0.54028],
	    "710": [0, 0.825, 0, 0, 2.33334],
	    "732": [0, 0.9, 0, 0, 2.33334],
	    "770": [0, 0.825, 0, 0, 2.33334],
	    "771": [0, 0.9, 0, 0, 2.33334],
	    "989": [0.08167, 0.58167, 0, 0, 0.77778],
	    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
	    "8245": [0, 0.54986, 0, 0, 0.275],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8487": [0, 0.68889, 0, 0, 0.72222],
	    "8498": [0, 0.68889, 0, 0, 0.55556],
	    "8502": [0, 0.68889, 0, 0, 0.66667],
	    "8503": [0, 0.68889, 0, 0, 0.44445],
	    "8504": [0, 0.68889, 0, 0, 0.66667],
	    "8513": [0, 0.68889, 0, 0, 0.63889],
	    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8602": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8603": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8606": [0.01354, 0.52239, 0, 0, 1.0],
	    "8608": [0.01354, 0.52239, 0, 0, 1.0],
	    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8619": [0, 0.54986, 0, 0, 1.0],
	    "8620": [0, 0.54986, 0, 0, 1.0],
	    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
	    "8622": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8624": [0, 0.69224, 0, 0, 0.5],
	    "8625": [0, 0.69224, 0, 0, 0.5],
	    "8630": [0, 0.43056, 0, 0, 1.0],
	    "8631": [0, 0.43056, 0, 0, 1.0],
	    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8644": [0.1808, 0.675, 0, 0, 1.0],
	    "8646": [0.1808, 0.675, 0, 0, 1.0],
	    "8647": [0.1808, 0.675, 0, 0, 1.0],
	    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8649": [0.1808, 0.675, 0, 0, 1.0],
	    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8651": [0.01354, 0.52239, 0, 0, 1.0],
	    "8652": [0.01354, 0.52239, 0, 0, 1.0],
	    "8653": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8654": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8655": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8666": [0.13667, 0.63667, 0, 0, 1.0],
	    "8667": [0.13667, 0.63667, 0, 0, 1.0],
	    "8669": [-0.13313, 0.37788, 0, 0, 1.0],
	    "8672": [-0.064, 0.437, 0, 0, 1.334],
	    "8674": [-0.064, 0.437, 0, 0, 1.334],
	    "8705": [0, 0.825, 0, 0, 0.5],
	    "8708": [0, 0.68889, 0, 0, 0.55556],
	    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8717": [0, 0.43056, 0, 0, 0.42917],
	    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
	    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8733": [0, 0.69224, 0, 0, 0.77778],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8737": [0, 0.69224, 0, 0, 0.72222],
	    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
	    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
	    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
	    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
	    "8742": [0.25142, 0.74111, 0, 0, 0.5],
	    "8756": [0, 0.69224, 0, 0, 0.66667],
	    "8757": [0, 0.69224, 0, 0, 0.66667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
	    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8790": [0, 0.69224, 0, 0, 0.77778],
	    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
	    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8812": [0.25583, 0.75583, 0, 0, 0.5],
	    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8822": [0.1808, 0.675, 0, 0, 0.77778],
	    "8823": [0.1808, 0.675, 0, 0, 0.77778],
	    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8862": [0, 0.675, 0, 0, 0.77778],
	    "8863": [0, 0.675, 0, 0, 0.77778],
	    "8864": [0, 0.675, 0, 0, 0.77778],
	    "8865": [0, 0.675, 0, 0, 0.77778],
	    "8872": [0, 0.69224, 0, 0, 0.61111],
	    "8873": [0, 0.69224, 0, 0, 0.72222],
	    "8874": [0, 0.69224, 0, 0, 0.88889],
	    "8876": [0, 0.68889, 0, 0, 0.61111],
	    "8877": [0, 0.68889, 0, 0, 0.61111],
	    "8878": [0, 0.68889, 0, 0, 0.72222],
	    "8879": [0, 0.68889, 0, 0, 0.72222],
	    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8888": [0, 0.54986, 0, 0, 1.11111],
	    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
	    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8901": [0, 0.54986, 0, 0, 0.27778],
	    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8907": [0, 0.69224, 0, 0, 0.77778],
	    "8908": [0, 0.69224, 0, 0, 0.77778],
	    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
	    "8910": [0, 0.54986, 0, 0, 0.76042],
	    "8911": [0, 0.54986, 0, 0, 0.76042],
	    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8914": [0, 0.54986, 0, 0, 0.66667],
	    "8915": [0, 0.54986, 0, 0, 0.66667],
	    "8916": [0, 0.69224, 0, 0, 0.66667],
	    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
	    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
	    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
	    "9484": [0, 0.69224, 0, 0, 0.5],
	    "9488": [0, 0.69224, 0, 0, 0.5],
	    "9492": [0, 0.37788, 0, 0, 0.5],
	    "9496": [0, 0.37788, 0, 0, 0.5],
	    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
	    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
	    "9632": [0, 0.675, 0, 0, 0.77778],
	    "9633": [0, 0.675, 0, 0, 0.77778],
	    "9650": [0, 0.54986, 0, 0, 0.72222],
	    "9651": [0, 0.54986, 0, 0, 0.72222],
	    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9660": [0, 0.54986, 0, 0, 0.72222],
	    "9661": [0, 0.54986, 0, 0, 0.72222],
	    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
	    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
	    "10003": [0, 0.69224, 0, 0, 0.83334],
	    "10016": [0, 0.69224, 0, 0, 0.83334],
	    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
	    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
	    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
	    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
	    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
	    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
	    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
	    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
	    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
	  },
	  "Caligraphic-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68333, 0, 0.19445, 0.79847],
	    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
	    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
	    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
	    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
	    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
	    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
	    "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
	    "73": [0, 0.68333, 0.07382, 0, 0.54452],
	    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
	    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
	    "76": [0, 0.68333, 0, 0.13889, 0.68972],
	    "77": [0, 0.68333, 0, 0.13889, 1.2009],
	    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
	    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
	    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
	    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
	    "82": [0, 0.68333, 0, 0.08334, 0.8475],
	    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
	    "84": [0, 0.68333, 0.25417, 0, 0.54464],
	    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
	    "86": [0, 0.68333, 0.08222, 0, 0.61278],
	    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
	    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
	    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
	    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Fraktur-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69141, 0, 0, 0.29574],
	    "34": [0, 0.69141, 0, 0, 0.21471],
	    "38": [0, 0.69141, 0, 0, 0.73786],
	    "39": [0, 0.69141, 0, 0, 0.21201],
	    "40": [0.24982, 0.74947, 0, 0, 0.38865],
	    "41": [0.24982, 0.74947, 0, 0, 0.38865],
	    "42": [0, 0.62119, 0, 0, 0.27764],
	    "43": [0.08319, 0.58283, 0, 0, 0.75623],
	    "44": [0, 0.10803, 0, 0, 0.27764],
	    "45": [0.08319, 0.58283, 0, 0, 0.75623],
	    "46": [0, 0.10803, 0, 0, 0.27764],
	    "47": [0.24982, 0.74947, 0, 0, 0.50181],
	    "48": [0, 0.47534, 0, 0, 0.50181],
	    "49": [0, 0.47534, 0, 0, 0.50181],
	    "50": [0, 0.47534, 0, 0, 0.50181],
	    "51": [0.18906, 0.47534, 0, 0, 0.50181],
	    "52": [0.18906, 0.47534, 0, 0, 0.50181],
	    "53": [0.18906, 0.47534, 0, 0, 0.50181],
	    "54": [0, 0.69141, 0, 0, 0.50181],
	    "55": [0.18906, 0.47534, 0, 0, 0.50181],
	    "56": [0, 0.69141, 0, 0, 0.50181],
	    "57": [0.18906, 0.47534, 0, 0, 0.50181],
	    "58": [0, 0.47534, 0, 0, 0.21606],
	    "59": [0.12604, 0.47534, 0, 0, 0.21606],
	    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
	    "63": [0, 0.69141, 0, 0, 0.36245],
	    "65": [0, 0.69141, 0, 0, 0.7176],
	    "66": [0, 0.69141, 0, 0, 0.88397],
	    "67": [0, 0.69141, 0, 0, 0.61254],
	    "68": [0, 0.69141, 0, 0, 0.83158],
	    "69": [0, 0.69141, 0, 0, 0.66278],
	    "70": [0.12604, 0.69141, 0, 0, 0.61119],
	    "71": [0, 0.69141, 0, 0, 0.78539],
	    "72": [0.06302, 0.69141, 0, 0, 0.7203],
	    "73": [0, 0.69141, 0, 0, 0.55448],
	    "74": [0.12604, 0.69141, 0, 0, 0.55231],
	    "75": [0, 0.69141, 0, 0, 0.66845],
	    "76": [0, 0.69141, 0, 0, 0.66602],
	    "77": [0, 0.69141, 0, 0, 1.04953],
	    "78": [0, 0.69141, 0, 0, 0.83212],
	    "79": [0, 0.69141, 0, 0, 0.82699],
	    "80": [0.18906, 0.69141, 0, 0, 0.82753],
	    "81": [0.03781, 0.69141, 0, 0, 0.82699],
	    "82": [0, 0.69141, 0, 0, 0.82807],
	    "83": [0, 0.69141, 0, 0, 0.82861],
	    "84": [0, 0.69141, 0, 0, 0.66899],
	    "85": [0, 0.69141, 0, 0, 0.64576],
	    "86": [0, 0.69141, 0, 0, 0.83131],
	    "87": [0, 0.69141, 0, 0, 1.04602],
	    "88": [0, 0.69141, 0, 0, 0.71922],
	    "89": [0.18906, 0.69141, 0, 0, 0.83293],
	    "90": [0.12604, 0.69141, 0, 0, 0.60201],
	    "91": [0.24982, 0.74947, 0, 0, 0.27764],
	    "93": [0.24982, 0.74947, 0, 0, 0.27764],
	    "94": [0, 0.69141, 0, 0, 0.49965],
	    "97": [0, 0.47534, 0, 0, 0.50046],
	    "98": [0, 0.69141, 0, 0, 0.51315],
	    "99": [0, 0.47534, 0, 0, 0.38946],
	    "100": [0, 0.62119, 0, 0, 0.49857],
	    "101": [0, 0.47534, 0, 0, 0.40053],
	    "102": [0.18906, 0.69141, 0, 0, 0.32626],
	    "103": [0.18906, 0.47534, 0, 0, 0.5037],
	    "104": [0.18906, 0.69141, 0, 0, 0.52126],
	    "105": [0, 0.69141, 0, 0, 0.27899],
	    "106": [0, 0.69141, 0, 0, 0.28088],
	    "107": [0, 0.69141, 0, 0, 0.38946],
	    "108": [0, 0.69141, 0, 0, 0.27953],
	    "109": [0, 0.47534, 0, 0, 0.76676],
	    "110": [0, 0.47534, 0, 0, 0.52666],
	    "111": [0, 0.47534, 0, 0, 0.48885],
	    "112": [0.18906, 0.52396, 0, 0, 0.50046],
	    "113": [0.18906, 0.47534, 0, 0, 0.48912],
	    "114": [0, 0.47534, 0, 0, 0.38919],
	    "115": [0, 0.47534, 0, 0, 0.44266],
	    "116": [0, 0.62119, 0, 0, 0.33301],
	    "117": [0, 0.47534, 0, 0, 0.5172],
	    "118": [0, 0.52396, 0, 0, 0.5118],
	    "119": [0, 0.52396, 0, 0, 0.77351],
	    "120": [0.18906, 0.47534, 0, 0, 0.38865],
	    "121": [0.18906, 0.47534, 0, 0, 0.49884],
	    "122": [0.18906, 0.47534, 0, 0, 0.39054],
	    "160": [0, 0, 0, 0, 0.25],
	    "8216": [0, 0.69141, 0, 0, 0.21471],
	    "8217": [0, 0.69141, 0, 0, 0.21471],
	    "58112": [0, 0.62119, 0, 0, 0.49749],
	    "58113": [0, 0.62119, 0, 0, 0.4983],
	    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
	    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
	    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
	    "58117": [0, 0.69141, 0, 0, 0.33301],
	    "58118": [0, 0.62119, 0, 0, 0.33409],
	    "58119": [0, 0.47534, 0, 0, 0.50073]
	  },
	  "Main-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.35],
	    "34": [0, 0.69444, 0, 0, 0.60278],
	    "35": [0.19444, 0.69444, 0, 0, 0.95833],
	    "36": [0.05556, 0.75, 0, 0, 0.575],
	    "37": [0.05556, 0.75, 0, 0, 0.95833],
	    "38": [0, 0.69444, 0, 0, 0.89444],
	    "39": [0, 0.69444, 0, 0, 0.31944],
	    "40": [0.25, 0.75, 0, 0, 0.44722],
	    "41": [0.25, 0.75, 0, 0, 0.44722],
	    "42": [0, 0.75, 0, 0, 0.575],
	    "43": [0.13333, 0.63333, 0, 0, 0.89444],
	    "44": [0.19444, 0.15556, 0, 0, 0.31944],
	    "45": [0, 0.44444, 0, 0, 0.38333],
	    "46": [0, 0.15556, 0, 0, 0.31944],
	    "47": [0.25, 0.75, 0, 0, 0.575],
	    "48": [0, 0.64444, 0, 0, 0.575],
	    "49": [0, 0.64444, 0, 0, 0.575],
	    "50": [0, 0.64444, 0, 0, 0.575],
	    "51": [0, 0.64444, 0, 0, 0.575],
	    "52": [0, 0.64444, 0, 0, 0.575],
	    "53": [0, 0.64444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0, 0.64444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0, 0.64444, 0, 0, 0.575],
	    "58": [0, 0.44444, 0, 0, 0.31944],
	    "59": [0.19444, 0.44444, 0, 0, 0.31944],
	    "60": [0.08556, 0.58556, 0, 0, 0.89444],
	    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "62": [0.08556, 0.58556, 0, 0, 0.89444],
	    "63": [0, 0.69444, 0, 0, 0.54305],
	    "64": [0, 0.69444, 0, 0, 0.89444],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0, 0, 0.81805],
	    "67": [0, 0.68611, 0, 0, 0.83055],
	    "68": [0, 0.68611, 0, 0, 0.88194],
	    "69": [0, 0.68611, 0, 0, 0.75555],
	    "70": [0, 0.68611, 0, 0, 0.72361],
	    "71": [0, 0.68611, 0, 0, 0.90416],
	    "72": [0, 0.68611, 0, 0, 0.9],
	    "73": [0, 0.68611, 0, 0, 0.43611],
	    "74": [0, 0.68611, 0, 0, 0.59444],
	    "75": [0, 0.68611, 0, 0, 0.90138],
	    "76": [0, 0.68611, 0, 0, 0.69166],
	    "77": [0, 0.68611, 0, 0, 1.09166],
	    "78": [0, 0.68611, 0, 0, 0.9],
	    "79": [0, 0.68611, 0, 0, 0.86388],
	    "80": [0, 0.68611, 0, 0, 0.78611],
	    "81": [0.19444, 0.68611, 0, 0, 0.86388],
	    "82": [0, 0.68611, 0, 0, 0.8625],
	    "83": [0, 0.68611, 0, 0, 0.63889],
	    "84": [0, 0.68611, 0, 0, 0.8],
	    "85": [0, 0.68611, 0, 0, 0.88472],
	    "86": [0, 0.68611, 0.01597, 0, 0.86944],
	    "87": [0, 0.68611, 0.01597, 0, 1.18888],
	    "88": [0, 0.68611, 0, 0, 0.86944],
	    "89": [0, 0.68611, 0.02875, 0, 0.86944],
	    "90": [0, 0.68611, 0, 0, 0.70277],
	    "91": [0.25, 0.75, 0, 0, 0.31944],
	    "92": [0.25, 0.75, 0, 0, 0.575],
	    "93": [0.25, 0.75, 0, 0, 0.31944],
	    "94": [0, 0.69444, 0, 0, 0.575],
	    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
	    "97": [0, 0.44444, 0, 0, 0.55902],
	    "98": [0, 0.69444, 0, 0, 0.63889],
	    "99": [0, 0.44444, 0, 0, 0.51111],
	    "100": [0, 0.69444, 0, 0, 0.63889],
	    "101": [0, 0.44444, 0, 0, 0.52708],
	    "102": [0, 0.69444, 0.10903, 0, 0.35139],
	    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
	    "104": [0, 0.69444, 0, 0, 0.63889],
	    "105": [0, 0.69444, 0, 0, 0.31944],
	    "106": [0.19444, 0.69444, 0, 0, 0.35139],
	    "107": [0, 0.69444, 0, 0, 0.60694],
	    "108": [0, 0.69444, 0, 0, 0.31944],
	    "109": [0, 0.44444, 0, 0, 0.95833],
	    "110": [0, 0.44444, 0, 0, 0.63889],
	    "111": [0, 0.44444, 0, 0, 0.575],
	    "112": [0.19444, 0.44444, 0, 0, 0.63889],
	    "113": [0.19444, 0.44444, 0, 0, 0.60694],
	    "114": [0, 0.44444, 0, 0, 0.47361],
	    "115": [0, 0.44444, 0, 0, 0.45361],
	    "116": [0, 0.63492, 0, 0, 0.44722],
	    "117": [0, 0.44444, 0, 0, 0.63889],
	    "118": [0, 0.44444, 0.01597, 0, 0.60694],
	    "119": [0, 0.44444, 0.01597, 0, 0.83055],
	    "120": [0, 0.44444, 0, 0, 0.60694],
	    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
	    "122": [0, 0.44444, 0, 0, 0.51111],
	    "123": [0.25, 0.75, 0, 0, 0.575],
	    "124": [0.25, 0.75, 0, 0, 0.31944],
	    "125": [0.25, 0.75, 0, 0, 0.575],
	    "126": [0.35, 0.34444, 0, 0, 0.575],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.86853],
	    "168": [0, 0.69444, 0, 0, 0.575],
	    "172": [0, 0.44444, 0, 0, 0.76666],
	    "176": [0, 0.69444, 0, 0, 0.86944],
	    "177": [0.13333, 0.63333, 0, 0, 0.89444],
	    "184": [0.17014, 0, 0, 0, 0.51111],
	    "198": [0, 0.68611, 0, 0, 1.04166],
	    "215": [0.13333, 0.63333, 0, 0, 0.89444],
	    "216": [0.04861, 0.73472, 0, 0, 0.89444],
	    "223": [0, 0.69444, 0, 0, 0.59722],
	    "230": [0, 0.44444, 0, 0, 0.83055],
	    "247": [0.13333, 0.63333, 0, 0, 0.89444],
	    "248": [0.09722, 0.54167, 0, 0, 0.575],
	    "305": [0, 0.44444, 0, 0, 0.31944],
	    "338": [0, 0.68611, 0, 0, 1.16944],
	    "339": [0, 0.44444, 0, 0, 0.89444],
	    "567": [0.19444, 0.44444, 0, 0, 0.35139],
	    "710": [0, 0.69444, 0, 0, 0.575],
	    "711": [0, 0.63194, 0, 0, 0.575],
	    "713": [0, 0.59611, 0, 0, 0.575],
	    "714": [0, 0.69444, 0, 0, 0.575],
	    "715": [0, 0.69444, 0, 0, 0.575],
	    "728": [0, 0.69444, 0, 0, 0.575],
	    "729": [0, 0.69444, 0, 0, 0.31944],
	    "730": [0, 0.69444, 0, 0, 0.86944],
	    "732": [0, 0.69444, 0, 0, 0.575],
	    "733": [0, 0.69444, 0, 0, 0.575],
	    "915": [0, 0.68611, 0, 0, 0.69166],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0, 0, 0.89444],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0, 0, 0.76666],
	    "928": [0, 0.68611, 0, 0, 0.9],
	    "931": [0, 0.68611, 0, 0, 0.83055],
	    "933": [0, 0.68611, 0, 0, 0.89444],
	    "934": [0, 0.68611, 0, 0, 0.83055],
	    "936": [0, 0.68611, 0, 0, 0.89444],
	    "937": [0, 0.68611, 0, 0, 0.83055],
	    "8211": [0, 0.44444, 0.03194, 0, 0.575],
	    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
	    "8216": [0, 0.69444, 0, 0, 0.31944],
	    "8217": [0, 0.69444, 0, 0, 0.31944],
	    "8220": [0, 0.69444, 0, 0, 0.60278],
	    "8221": [0, 0.69444, 0, 0, 0.60278],
	    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8242": [0, 0.55556, 0, 0, 0.34444],
	    "8407": [0, 0.72444, 0.15486, 0, 0.575],
	    "8463": [0, 0.69444, 0, 0, 0.66759],
	    "8465": [0, 0.69444, 0, 0, 0.83055],
	    "8467": [0, 0.69444, 0, 0, 0.47361],
	    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
	    "8476": [0, 0.69444, 0, 0, 0.83055],
	    "8501": [0, 0.69444, 0, 0, 0.70277],
	    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8593": [0.19444, 0.69444, 0, 0, 0.575],
	    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8595": [0.19444, 0.69444, 0, 0, 0.575],
	    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8597": [0.25, 0.75, 0, 0, 0.575],
	    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8661": [0.25, 0.75, 0, 0, 0.70277],
	    "8704": [0, 0.69444, 0, 0, 0.63889],
	    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
	    "8707": [0, 0.69444, 0, 0, 0.63889],
	    "8709": [0.05556, 0.75, 0, 0, 0.575],
	    "8711": [0, 0.68611, 0, 0, 0.95833],
	    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8725": [0.25, 0.75, 0, 0, 0.575],
	    "8726": [0.25, 0.75, 0, 0, 0.575],
	    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8730": [0.18, 0.82, 0, 0, 0.95833],
	    "8733": [0, 0.44444, 0, 0, 0.89444],
	    "8734": [0, 0.44444, 0, 0, 1.14999],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.31944],
	    "8741": [0.25, 0.75, 0, 0, 0.575],
	    "8743": [0, 0.55556, 0, 0, 0.76666],
	    "8744": [0, 0.55556, 0, 0, 0.76666],
	    "8745": [0, 0.55556, 0, 0, 0.76666],
	    "8746": [0, 0.55556, 0, 0, 0.76666],
	    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
	    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
	    "8771": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
	    "8781": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8801": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8846": [0, 0.55556, 0, 0, 0.76666],
	    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8851": [0, 0.55556, 0, 0, 0.76666],
	    "8852": [0, 0.55556, 0, 0, 0.76666],
	    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8866": [0, 0.69444, 0, 0, 0.70277],
	    "8867": [0, 0.69444, 0, 0, 0.70277],
	    "8868": [0, 0.69444, 0, 0, 0.89444],
	    "8869": [0, 0.69444, 0, 0, 0.89444],
	    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
	    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8968": [0.25, 0.75, 0, 0, 0.51111],
	    "8969": [0.25, 0.75, 0, 0, 0.51111],
	    "8970": [0.25, 0.75, 0, 0, 0.51111],
	    "8971": [0.25, 0.75, 0, 0, 0.51111],
	    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
	    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9837": [0, 0.75, 0, 0, 0.44722],
	    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
	    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
	    "10216": [0.25, 0.75, 0, 0, 0.44722],
	    "10217": [0.25, 0.75, 0, 0, 0.44722],
	    "10815": [0, 0.68611, 0, 0, 0.9],
	    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
	    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Main-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.11417, 0, 0.38611],
	    "34": [0, 0.69444, 0.07939, 0, 0.62055],
	    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
	    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
	    "38": [0, 0.69444, 0.08528, 0, 0.88555],
	    "39": [0, 0.69444, 0.12945, 0, 0.35555],
	    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
	    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
	    "42": [0, 0.75, 0.14333, 0, 0.59111],
	    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
	    "44": [0.19444, 0.14722, 0, 0, 0.35555],
	    "45": [0, 0.44444, 0.02611, 0, 0.41444],
	    "46": [0, 0.14722, 0, 0, 0.35555],
	    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
	    "48": [0, 0.64444, 0.13167, 0, 0.59111],
	    "49": [0, 0.64444, 0.13167, 0, 0.59111],
	    "50": [0, 0.64444, 0.13167, 0, 0.59111],
	    "51": [0, 0.64444, 0.13167, 0, 0.59111],
	    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "53": [0, 0.64444, 0.13167, 0, 0.59111],
	    "54": [0, 0.64444, 0.13167, 0, 0.59111],
	    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "56": [0, 0.64444, 0.13167, 0, 0.59111],
	    "57": [0, 0.64444, 0.13167, 0, 0.59111],
	    "58": [0, 0.44444, 0.06695, 0, 0.35555],
	    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
	    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
	    "63": [0, 0.69444, 0.11472, 0, 0.59111],
	    "64": [0, 0.69444, 0.09208, 0, 0.88555],
	    "65": [0, 0.68611, 0, 0, 0.86555],
	    "66": [0, 0.68611, 0.0992, 0, 0.81666],
	    "67": [0, 0.68611, 0.14208, 0, 0.82666],
	    "68": [0, 0.68611, 0.09062, 0, 0.87555],
	    "69": [0, 0.68611, 0.11431, 0, 0.75666],
	    "70": [0, 0.68611, 0.12903, 0, 0.72722],
	    "71": [0, 0.68611, 0.07347, 0, 0.89527],
	    "72": [0, 0.68611, 0.17208, 0, 0.8961],
	    "73": [0, 0.68611, 0.15681, 0, 0.47166],
	    "74": [0, 0.68611, 0.145, 0, 0.61055],
	    "75": [0, 0.68611, 0.14208, 0, 0.89499],
	    "76": [0, 0.68611, 0, 0, 0.69777],
	    "77": [0, 0.68611, 0.17208, 0, 1.07277],
	    "78": [0, 0.68611, 0.17208, 0, 0.8961],
	    "79": [0, 0.68611, 0.09062, 0, 0.85499],
	    "80": [0, 0.68611, 0.0992, 0, 0.78721],
	    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
	    "82": [0, 0.68611, 0.02559, 0, 0.85944],
	    "83": [0, 0.68611, 0.11264, 0, 0.64999],
	    "84": [0, 0.68611, 0.12903, 0, 0.7961],
	    "85": [0, 0.68611, 0.17208, 0, 0.88083],
	    "86": [0, 0.68611, 0.18625, 0, 0.86555],
	    "87": [0, 0.68611, 0.18625, 0, 1.15999],
	    "88": [0, 0.68611, 0.15681, 0, 0.86555],
	    "89": [0, 0.68611, 0.19803, 0, 0.86555],
	    "90": [0, 0.68611, 0.14208, 0, 0.70888],
	    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
	    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
	    "94": [0, 0.69444, 0.06709, 0, 0.59111],
	    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
	    "97": [0, 0.44444, 0.09426, 0, 0.59111],
	    "98": [0, 0.69444, 0.07861, 0, 0.53222],
	    "99": [0, 0.44444, 0.05222, 0, 0.53222],
	    "100": [0, 0.69444, 0.10861, 0, 0.59111],
	    "101": [0, 0.44444, 0.085, 0, 0.53222],
	    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
	    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "104": [0, 0.69444, 0.09426, 0, 0.59111],
	    "105": [0, 0.69326, 0.11387, 0, 0.35555],
	    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
	    "107": [0, 0.69444, 0.11111, 0, 0.53222],
	    "108": [0, 0.69444, 0.10861, 0, 0.29666],
	    "109": [0, 0.44444, 0.09426, 0, 0.94444],
	    "110": [0, 0.44444, 0.09426, 0, 0.64999],
	    "111": [0, 0.44444, 0.07861, 0, 0.59111],
	    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
	    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "114": [0, 0.44444, 0.11111, 0, 0.50167],
	    "115": [0, 0.44444, 0.08167, 0, 0.48694],
	    "116": [0, 0.63492, 0.09639, 0, 0.385],
	    "117": [0, 0.44444, 0.09426, 0, 0.62055],
	    "118": [0, 0.44444, 0.11111, 0, 0.53222],
	    "119": [0, 0.44444, 0.11111, 0, 0.76777],
	    "120": [0, 0.44444, 0.12583, 0, 0.56055],
	    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
	    "122": [0, 0.44444, 0.13889, 0, 0.49055],
	    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0.11473, 0, 0.59111],
	    "176": [0, 0.69444, 0, 0, 0.94888],
	    "184": [0.17014, 0, 0, 0, 0.53222],
	    "198": [0, 0.68611, 0.11431, 0, 1.02277],
	    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
	    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
	    "230": [0, 0.44444, 0.085, 0, 0.82666],
	    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
	    "305": [0, 0.44444, 0.09426, 0, 0.35555],
	    "338": [0, 0.68611, 0.11431, 0, 1.14054],
	    "339": [0, 0.44444, 0.085, 0, 0.82666],
	    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
	    "710": [0, 0.69444, 0.06709, 0, 0.59111],
	    "711": [0, 0.63194, 0.08271, 0, 0.59111],
	    "713": [0, 0.59444, 0.10444, 0, 0.59111],
	    "714": [0, 0.69444, 0.08528, 0, 0.59111],
	    "715": [0, 0.69444, 0, 0, 0.59111],
	    "728": [0, 0.69444, 0.10333, 0, 0.59111],
	    "729": [0, 0.69444, 0.12945, 0, 0.35555],
	    "730": [0, 0.69444, 0, 0, 0.94888],
	    "732": [0, 0.69444, 0.11472, 0, 0.59111],
	    "733": [0, 0.69444, 0.11472, 0, 0.59111],
	    "915": [0, 0.68611, 0.12903, 0, 0.69777],
	    "916": [0, 0.68611, 0, 0, 0.94444],
	    "920": [0, 0.68611, 0.09062, 0, 0.88555],
	    "923": [0, 0.68611, 0, 0, 0.80666],
	    "926": [0, 0.68611, 0.15092, 0, 0.76777],
	    "928": [0, 0.68611, 0.17208, 0, 0.8961],
	    "931": [0, 0.68611, 0.11431, 0, 0.82666],
	    "933": [0, 0.68611, 0.10778, 0, 0.88555],
	    "934": [0, 0.68611, 0.05632, 0, 0.82666],
	    "936": [0, 0.68611, 0.10778, 0, 0.88555],
	    "937": [0, 0.68611, 0.0992, 0, 0.82666],
	    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
	    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
	    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
	    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
	  },
	  "Main-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.12417, 0, 0.30667],
	    "34": [0, 0.69444, 0.06961, 0, 0.51444],
	    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
	    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
	    "38": [0, 0.69444, 0.09694, 0, 0.76666],
	    "39": [0, 0.69444, 0.12417, 0, 0.30667],
	    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
	    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
	    "42": [0, 0.75, 0.14917, 0, 0.51111],
	    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
	    "44": [0.19444, 0.10556, 0, 0, 0.30667],
	    "45": [0, 0.43056, 0.02826, 0, 0.35778],
	    "46": [0, 0.10556, 0, 0, 0.30667],
	    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
	    "48": [0, 0.64444, 0.13556, 0, 0.51111],
	    "49": [0, 0.64444, 0.13556, 0, 0.51111],
	    "50": [0, 0.64444, 0.13556, 0, 0.51111],
	    "51": [0, 0.64444, 0.13556, 0, 0.51111],
	    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "53": [0, 0.64444, 0.13556, 0, 0.51111],
	    "54": [0, 0.64444, 0.13556, 0, 0.51111],
	    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "56": [0, 0.64444, 0.13556, 0, 0.51111],
	    "57": [0, 0.64444, 0.13556, 0, 0.51111],
	    "58": [0, 0.43056, 0.0582, 0, 0.30667],
	    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
	    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
	    "63": [0, 0.69444, 0.1225, 0, 0.51111],
	    "64": [0, 0.69444, 0.09597, 0, 0.76666],
	    "65": [0, 0.68333, 0, 0, 0.74333],
	    "66": [0, 0.68333, 0.10257, 0, 0.70389],
	    "67": [0, 0.68333, 0.14528, 0, 0.71555],
	    "68": [0, 0.68333, 0.09403, 0, 0.755],
	    "69": [0, 0.68333, 0.12028, 0, 0.67833],
	    "70": [0, 0.68333, 0.13305, 0, 0.65277],
	    "71": [0, 0.68333, 0.08722, 0, 0.77361],
	    "72": [0, 0.68333, 0.16389, 0, 0.74333],
	    "73": [0, 0.68333, 0.15806, 0, 0.38555],
	    "74": [0, 0.68333, 0.14028, 0, 0.525],
	    "75": [0, 0.68333, 0.14528, 0, 0.76888],
	    "76": [0, 0.68333, 0, 0, 0.62722],
	    "77": [0, 0.68333, 0.16389, 0, 0.89666],
	    "78": [0, 0.68333, 0.16389, 0, 0.74333],
	    "79": [0, 0.68333, 0.09403, 0, 0.76666],
	    "80": [0, 0.68333, 0.10257, 0, 0.67833],
	    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
	    "82": [0, 0.68333, 0.03868, 0, 0.72944],
	    "83": [0, 0.68333, 0.11972, 0, 0.56222],
	    "84": [0, 0.68333, 0.13305, 0, 0.71555],
	    "85": [0, 0.68333, 0.16389, 0, 0.74333],
	    "86": [0, 0.68333, 0.18361, 0, 0.74333],
	    "87": [0, 0.68333, 0.18361, 0, 0.99888],
	    "88": [0, 0.68333, 0.15806, 0, 0.74333],
	    "89": [0, 0.68333, 0.19383, 0, 0.74333],
	    "90": [0, 0.68333, 0.14528, 0, 0.61333],
	    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
	    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
	    "94": [0, 0.69444, 0.06646, 0, 0.51111],
	    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
	    "97": [0, 0.43056, 0.07671, 0, 0.51111],
	    "98": [0, 0.69444, 0.06312, 0, 0.46],
	    "99": [0, 0.43056, 0.05653, 0, 0.46],
	    "100": [0, 0.69444, 0.10333, 0, 0.51111],
	    "101": [0, 0.43056, 0.07514, 0, 0.46],
	    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
	    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "104": [0, 0.69444, 0.07671, 0, 0.51111],
	    "105": [0, 0.65536, 0.1019, 0, 0.30667],
	    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
	    "107": [0, 0.69444, 0.10764, 0, 0.46],
	    "108": [0, 0.69444, 0.10333, 0, 0.25555],
	    "109": [0, 0.43056, 0.07671, 0, 0.81777],
	    "110": [0, 0.43056, 0.07671, 0, 0.56222],
	    "111": [0, 0.43056, 0.06312, 0, 0.51111],
	    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
	    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "114": [0, 0.43056, 0.10764, 0, 0.42166],
	    "115": [0, 0.43056, 0.08208, 0, 0.40889],
	    "116": [0, 0.61508, 0.09486, 0, 0.33222],
	    "117": [0, 0.43056, 0.07671, 0, 0.53666],
	    "118": [0, 0.43056, 0.10764, 0, 0.46],
	    "119": [0, 0.43056, 0.10764, 0, 0.66444],
	    "120": [0, 0.43056, 0.12042, 0, 0.46389],
	    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
	    "122": [0, 0.43056, 0.12292, 0, 0.40889],
	    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.66786, 0.10474, 0, 0.51111],
	    "176": [0, 0.69444, 0, 0, 0.83129],
	    "184": [0.17014, 0, 0, 0, 0.46],
	    "198": [0, 0.68333, 0.12028, 0, 0.88277],
	    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
	    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
	    "230": [0, 0.43056, 0.07514, 0, 0.71555],
	    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
	    "338": [0, 0.68333, 0.12028, 0, 0.98499],
	    "339": [0, 0.43056, 0.07514, 0, 0.71555],
	    "710": [0, 0.69444, 0.06646, 0, 0.51111],
	    "711": [0, 0.62847, 0.08295, 0, 0.51111],
	    "713": [0, 0.56167, 0.10333, 0, 0.51111],
	    "714": [0, 0.69444, 0.09694, 0, 0.51111],
	    "715": [0, 0.69444, 0, 0, 0.51111],
	    "728": [0, 0.69444, 0.10806, 0, 0.51111],
	    "729": [0, 0.66786, 0.11752, 0, 0.30667],
	    "730": [0, 0.69444, 0, 0, 0.83129],
	    "732": [0, 0.66786, 0.11585, 0, 0.51111],
	    "733": [0, 0.69444, 0.1225, 0, 0.51111],
	    "915": [0, 0.68333, 0.13305, 0, 0.62722],
	    "916": [0, 0.68333, 0, 0, 0.81777],
	    "920": [0, 0.68333, 0.09403, 0, 0.76666],
	    "923": [0, 0.68333, 0, 0, 0.69222],
	    "926": [0, 0.68333, 0.15294, 0, 0.66444],
	    "928": [0, 0.68333, 0.16389, 0, 0.74333],
	    "931": [0, 0.68333, 0.12028, 0, 0.71555],
	    "933": [0, 0.68333, 0.11111, 0, 0.76666],
	    "934": [0, 0.68333, 0.05986, 0, 0.71555],
	    "936": [0, 0.68333, 0.11111, 0, 0.76666],
	    "937": [0, 0.68333, 0.10257, 0, 0.71555],
	    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
	    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
	    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
	    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
	    "8463": [0, 0.68889, 0, 0, 0.54028]
	  },
	  "Main-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.27778],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.77778],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.19444, 0.10556, 0, 0, 0.27778],
	    "45": [0, 0.43056, 0, 0, 0.33333],
	    "46": [0, 0.10556, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.64444, 0, 0, 0.5],
	    "49": [0, 0.64444, 0, 0, 0.5],
	    "50": [0, 0.64444, 0, 0, 0.5],
	    "51": [0, 0.64444, 0, 0, 0.5],
	    "52": [0, 0.64444, 0, 0, 0.5],
	    "53": [0, 0.64444, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0, 0.64444, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0, 0.64444, 0, 0, 0.5],
	    "58": [0, 0.43056, 0, 0, 0.27778],
	    "59": [0.19444, 0.43056, 0, 0, 0.27778],
	    "60": [0.0391, 0.5391, 0, 0, 0.77778],
	    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "62": [0.0391, 0.5391, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.77778],
	    "65": [0, 0.68333, 0, 0, 0.75],
	    "66": [0, 0.68333, 0, 0, 0.70834],
	    "67": [0, 0.68333, 0, 0, 0.72222],
	    "68": [0, 0.68333, 0, 0, 0.76389],
	    "69": [0, 0.68333, 0, 0, 0.68056],
	    "70": [0, 0.68333, 0, 0, 0.65278],
	    "71": [0, 0.68333, 0, 0, 0.78472],
	    "72": [0, 0.68333, 0, 0, 0.75],
	    "73": [0, 0.68333, 0, 0, 0.36111],
	    "74": [0, 0.68333, 0, 0, 0.51389],
	    "75": [0, 0.68333, 0, 0, 0.77778],
	    "76": [0, 0.68333, 0, 0, 0.625],
	    "77": [0, 0.68333, 0, 0, 0.91667],
	    "78": [0, 0.68333, 0, 0, 0.75],
	    "79": [0, 0.68333, 0, 0, 0.77778],
	    "80": [0, 0.68333, 0, 0, 0.68056],
	    "81": [0.19444, 0.68333, 0, 0, 0.77778],
	    "82": [0, 0.68333, 0, 0, 0.73611],
	    "83": [0, 0.68333, 0, 0, 0.55556],
	    "84": [0, 0.68333, 0, 0, 0.72222],
	    "85": [0, 0.68333, 0, 0, 0.75],
	    "86": [0, 0.68333, 0.01389, 0, 0.75],
	    "87": [0, 0.68333, 0.01389, 0, 1.02778],
	    "88": [0, 0.68333, 0, 0, 0.75],
	    "89": [0, 0.68333, 0.025, 0, 0.75],
	    "90": [0, 0.68333, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.27778],
	    "92": [0.25, 0.75, 0, 0, 0.5],
	    "93": [0.25, 0.75, 0, 0, 0.27778],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
	    "97": [0, 0.43056, 0, 0, 0.5],
	    "98": [0, 0.69444, 0, 0, 0.55556],
	    "99": [0, 0.43056, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.55556],
	    "101": [0, 0.43056, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.07778, 0, 0.30556],
	    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.55556],
	    "105": [0, 0.66786, 0, 0, 0.27778],
	    "106": [0.19444, 0.66786, 0, 0, 0.30556],
	    "107": [0, 0.69444, 0, 0, 0.52778],
	    "108": [0, 0.69444, 0, 0, 0.27778],
	    "109": [0, 0.43056, 0, 0, 0.83334],
	    "110": [0, 0.43056, 0, 0, 0.55556],
	    "111": [0, 0.43056, 0, 0, 0.5],
	    "112": [0.19444, 0.43056, 0, 0, 0.55556],
	    "113": [0.19444, 0.43056, 0, 0, 0.52778],
	    "114": [0, 0.43056, 0, 0, 0.39167],
	    "115": [0, 0.43056, 0, 0, 0.39445],
	    "116": [0, 0.61508, 0, 0, 0.38889],
	    "117": [0, 0.43056, 0, 0, 0.55556],
	    "118": [0, 0.43056, 0.01389, 0, 0.52778],
	    "119": [0, 0.43056, 0.01389, 0, 0.72222],
	    "120": [0, 0.43056, 0, 0, 0.52778],
	    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
	    "122": [0, 0.43056, 0, 0, 0.44445],
	    "123": [0.25, 0.75, 0, 0, 0.5],
	    "124": [0.25, 0.75, 0, 0, 0.27778],
	    "125": [0.25, 0.75, 0, 0, 0.5],
	    "126": [0.35, 0.31786, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.76909],
	    "167": [0.19444, 0.69444, 0, 0, 0.44445],
	    "168": [0, 0.66786, 0, 0, 0.5],
	    "172": [0, 0.43056, 0, 0, 0.66667],
	    "176": [0, 0.69444, 0, 0, 0.75],
	    "177": [0.08333, 0.58333, 0, 0, 0.77778],
	    "182": [0.19444, 0.69444, 0, 0, 0.61111],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "198": [0, 0.68333, 0, 0, 0.90278],
	    "215": [0.08333, 0.58333, 0, 0, 0.77778],
	    "216": [0.04861, 0.73194, 0, 0, 0.77778],
	    "223": [0, 0.69444, 0, 0, 0.5],
	    "230": [0, 0.43056, 0, 0, 0.72222],
	    "247": [0.08333, 0.58333, 0, 0, 0.77778],
	    "248": [0.09722, 0.52778, 0, 0, 0.5],
	    "305": [0, 0.43056, 0, 0, 0.27778],
	    "338": [0, 0.68333, 0, 0, 1.01389],
	    "339": [0, 0.43056, 0, 0, 0.77778],
	    "567": [0.19444, 0.43056, 0, 0, 0.30556],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.62847, 0, 0, 0.5],
	    "713": [0, 0.56778, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.66786, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.75],
	    "732": [0, 0.66786, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.68333, 0, 0, 0.625],
	    "916": [0, 0.68333, 0, 0, 0.83334],
	    "920": [0, 0.68333, 0, 0, 0.77778],
	    "923": [0, 0.68333, 0, 0, 0.69445],
	    "926": [0, 0.68333, 0, 0, 0.66667],
	    "928": [0, 0.68333, 0, 0, 0.75],
	    "931": [0, 0.68333, 0, 0, 0.72222],
	    "933": [0, 0.68333, 0, 0, 0.77778],
	    "934": [0, 0.68333, 0, 0, 0.72222],
	    "936": [0, 0.68333, 0, 0, 0.77778],
	    "937": [0, 0.68333, 0, 0, 0.72222],
	    "8211": [0, 0.43056, 0.02778, 0, 0.5],
	    "8212": [0, 0.43056, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5],
	    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8230": [0, 0.12, 0, 0, 1.172],
	    "8242": [0, 0.55556, 0, 0, 0.275],
	    "8407": [0, 0.71444, 0.15382, 0, 0.5],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8465": [0, 0.69444, 0, 0, 0.72222],
	    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
	    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
	    "8476": [0, 0.69444, 0, 0, 0.72222],
	    "8501": [0, 0.69444, 0, 0, 0.61111],
	    "8592": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8593": [0.19444, 0.69444, 0, 0, 0.5],
	    "8594": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8595": [0.19444, 0.69444, 0, 0, 0.5],
	    "8596": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8597": [0.25, 0.75, 0, 0, 0.5],
	    "8598": [0.19444, 0.69444, 0, 0, 1.0],
	    "8599": [0.19444, 0.69444, 0, 0, 1.0],
	    "8600": [0.19444, 0.69444, 0, 0, 1.0],
	    "8601": [0.19444, 0.69444, 0, 0, 1.0],
	    "8614": [0.011, 0.511, 0, 0, 1.0],
	    "8617": [0.011, 0.511, 0, 0, 1.126],
	    "8618": [0.011, 0.511, 0, 0, 1.126],
	    "8636": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8637": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8640": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8641": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8652": [0.011, 0.671, 0, 0, 1.0],
	    "8656": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8658": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8660": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8661": [0.25, 0.75, 0, 0, 0.61111],
	    "8704": [0, 0.69444, 0, 0, 0.55556],
	    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
	    "8707": [0, 0.69444, 0, 0, 0.55556],
	    "8709": [0.05556, 0.75, 0, 0, 0.5],
	    "8711": [0, 0.68333, 0, 0, 0.83334],
	    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8725": [0.25, 0.75, 0, 0, 0.5],
	    "8726": [0.25, 0.75, 0, 0, 0.5],
	    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8730": [0.2, 0.8, 0, 0, 0.83334],
	    "8733": [0, 0.43056, 0, 0, 0.77778],
	    "8734": [0, 0.43056, 0, 0, 1.0],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.27778],
	    "8741": [0.25, 0.75, 0, 0, 0.5],
	    "8743": [0, 0.55556, 0, 0, 0.66667],
	    "8744": [0, 0.55556, 0, 0, 0.66667],
	    "8745": [0, 0.55556, 0, 0, 0.66667],
	    "8746": [0, 0.55556, 0, 0, 0.66667],
	    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
	    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8773": [-0.022, 0.589, 0, 0, 1.0],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8784": [-0.133, 0.67, 0, 0, 0.778],
	    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8810": [0.0391, 0.5391, 0, 0, 1.0],
	    "8811": [0.0391, 0.5391, 0, 0, 1.0],
	    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8846": [0, 0.55556, 0, 0, 0.66667],
	    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8851": [0, 0.55556, 0, 0, 0.66667],
	    "8852": [0, 0.55556, 0, 0, 0.66667],
	    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8866": [0, 0.69444, 0, 0, 0.61111],
	    "8867": [0, 0.69444, 0, 0, 0.61111],
	    "8868": [0, 0.69444, 0, 0, 0.77778],
	    "8869": [0, 0.69444, 0, 0, 0.77778],
	    "8872": [0.249, 0.75, 0, 0, 0.867],
	    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
	    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8904": [0.005, 0.505, 0, 0, 0.9],
	    "8942": [0.03, 0.9, 0, 0, 0.278],
	    "8943": [-0.19, 0.31, 0, 0, 1.172],
	    "8945": [-0.1, 0.82, 0, 0, 1.282],
	    "8968": [0.25, 0.75, 0, 0, 0.44445],
	    "8969": [0.25, 0.75, 0, 0, 0.44445],
	    "8970": [0.25, 0.75, 0, 0, 0.44445],
	    "8971": [0.25, 0.75, 0, 0, 0.44445],
	    "8994": [-0.14236, 0.35764, 0, 0, 1.0],
	    "8995": [-0.14236, 0.35764, 0, 0, 1.0],
	    "9136": [0.244, 0.744, 0, 0, 0.412],
	    "9137": [0.244, 0.744, 0, 0, 0.412],
	    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9711": [0.19444, 0.69444, 0, 0, 1.0],
	    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9837": [0, 0.75, 0, 0, 0.38889],
	    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
	    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
	    "10216": [0.25, 0.75, 0, 0, 0.38889],
	    "10217": [0.25, 0.75, 0, 0, 0.38889],
	    "10222": [0.244, 0.744, 0, 0, 0.412],
	    "10223": [0.244, 0.744, 0, 0, 0.412],
	    "10229": [0.011, 0.511, 0, 0, 1.609],
	    "10230": [0.011, 0.511, 0, 0, 1.638],
	    "10231": [0.011, 0.511, 0, 0, 1.859],
	    "10232": [0.024, 0.525, 0, 0, 1.609],
	    "10233": [0.024, 0.525, 0, 0, 1.638],
	    "10234": [0.024, 0.525, 0, 0, 1.858],
	    "10236": [0.011, 0.511, 0, 0, 1.638],
	    "10815": [0, 0.68333, 0, 0, 0.75],
	    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Math-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.44444, 0, 0, 0.575],
	    "49": [0, 0.44444, 0, 0, 0.575],
	    "50": [0, 0.44444, 0, 0, 0.575],
	    "51": [0.19444, 0.44444, 0, 0, 0.575],
	    "52": [0.19444, 0.44444, 0, 0, 0.575],
	    "53": [0.19444, 0.44444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0.19444, 0.44444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0.19444, 0.44444, 0, 0, 0.575],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0.04835, 0, 0.8664],
	    "67": [0, 0.68611, 0.06979, 0, 0.81694],
	    "68": [0, 0.68611, 0.03194, 0, 0.93812],
	    "69": [0, 0.68611, 0.05451, 0, 0.81007],
	    "70": [0, 0.68611, 0.15972, 0, 0.68889],
	    "71": [0, 0.68611, 0, 0, 0.88673],
	    "72": [0, 0.68611, 0.08229, 0, 0.98229],
	    "73": [0, 0.68611, 0.07778, 0, 0.51111],
	    "74": [0, 0.68611, 0.10069, 0, 0.63125],
	    "75": [0, 0.68611, 0.06979, 0, 0.97118],
	    "76": [0, 0.68611, 0, 0, 0.75555],
	    "77": [0, 0.68611, 0.11424, 0, 1.14201],
	    "78": [0, 0.68611, 0.11424, 0, 0.95034],
	    "79": [0, 0.68611, 0.03194, 0, 0.83666],
	    "80": [0, 0.68611, 0.15972, 0, 0.72309],
	    "81": [0.19444, 0.68611, 0, 0, 0.86861],
	    "82": [0, 0.68611, 0.00421, 0, 0.87235],
	    "83": [0, 0.68611, 0.05382, 0, 0.69271],
	    "84": [0, 0.68611, 0.15972, 0, 0.63663],
	    "85": [0, 0.68611, 0.11424, 0, 0.80027],
	    "86": [0, 0.68611, 0.25555, 0, 0.67778],
	    "87": [0, 0.68611, 0.15972, 0, 1.09305],
	    "88": [0, 0.68611, 0.07778, 0, 0.94722],
	    "89": [0, 0.68611, 0.25555, 0, 0.67458],
	    "90": [0, 0.68611, 0.06979, 0, 0.77257],
	    "97": [0, 0.44444, 0, 0, 0.63287],
	    "98": [0, 0.69444, 0, 0, 0.52083],
	    "99": [0, 0.44444, 0, 0, 0.51342],
	    "100": [0, 0.69444, 0, 0, 0.60972],
	    "101": [0, 0.44444, 0, 0, 0.55361],
	    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
	    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
	    "104": [0, 0.69444, 0, 0, 0.66759],
	    "105": [0, 0.69326, 0, 0, 0.4048],
	    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
	    "107": [0, 0.69444, 0.01852, 0, 0.6037],
	    "108": [0, 0.69444, 0.0088, 0, 0.34815],
	    "109": [0, 0.44444, 0, 0, 1.0324],
	    "110": [0, 0.44444, 0, 0, 0.71296],
	    "111": [0, 0.44444, 0, 0, 0.58472],
	    "112": [0.19444, 0.44444, 0, 0, 0.60092],
	    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
	    "114": [0, 0.44444, 0.03194, 0, 0.5287],
	    "115": [0, 0.44444, 0, 0, 0.53125],
	    "116": [0, 0.63492, 0, 0, 0.41528],
	    "117": [0, 0.44444, 0, 0, 0.68102],
	    "118": [0, 0.44444, 0.03704, 0, 0.56666],
	    "119": [0, 0.44444, 0.02778, 0, 0.83148],
	    "120": [0, 0.44444, 0, 0, 0.65903],
	    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
	    "122": [0, 0.44444, 0.04213, 0, 0.55509],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68611, 0.15972, 0, 0.65694],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0.03194, 0, 0.86722],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0.07458, 0, 0.84125],
	    "928": [0, 0.68611, 0.08229, 0, 0.98229],
	    "931": [0, 0.68611, 0.05451, 0, 0.88507],
	    "933": [0, 0.68611, 0.15972, 0, 0.67083],
	    "934": [0, 0.68611, 0, 0, 0.76666],
	    "936": [0, 0.68611, 0.11653, 0, 0.71402],
	    "937": [0, 0.68611, 0.04835, 0, 0.8789],
	    "945": [0, 0.44444, 0, 0, 0.76064],
	    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
	    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
	    "948": [0, 0.69444, 0.03819, 0, 0.52222],
	    "949": [0, 0.44444, 0, 0, 0.52882],
	    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
	    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
	    "952": [0, 0.69444, 0.03194, 0, 0.5618],
	    "953": [0, 0.44444, 0, 0, 0.41204],
	    "954": [0, 0.44444, 0, 0, 0.66759],
	    "955": [0, 0.69444, 0, 0, 0.67083],
	    "956": [0.19444, 0.44444, 0, 0, 0.70787],
	    "957": [0, 0.44444, 0.06898, 0, 0.57685],
	    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
	    "959": [0, 0.44444, 0, 0, 0.58472],
	    "960": [0, 0.44444, 0.03704, 0, 0.68241],
	    "961": [0.19444, 0.44444, 0, 0, 0.6118],
	    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
	    "963": [0, 0.44444, 0.03704, 0, 0.68588],
	    "964": [0, 0.44444, 0.13472, 0, 0.52083],
	    "965": [0, 0.44444, 0.03704, 0, 0.63055],
	    "966": [0.19444, 0.44444, 0, 0, 0.74722],
	    "967": [0.19444, 0.44444, 0, 0, 0.71805],
	    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
	    "969": [0, 0.44444, 0.03704, 0, 0.71782],
	    "977": [0, 0.69444, 0, 0, 0.69155],
	    "981": [0.19444, 0.69444, 0, 0, 0.7125],
	    "982": [0, 0.44444, 0.03194, 0, 0.975],
	    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
	    "1013": [0, 0.44444, 0, 0, 0.48333],
	    "57649": [0, 0.44444, 0, 0, 0.39352],
	    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
	  },
	  "Math-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.43056, 0, 0, 0.5],
	    "49": [0, 0.43056, 0, 0, 0.5],
	    "50": [0, 0.43056, 0, 0, 0.5],
	    "51": [0.19444, 0.43056, 0, 0, 0.5],
	    "52": [0.19444, 0.43056, 0, 0, 0.5],
	    "53": [0.19444, 0.43056, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0.19444, 0.43056, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0.19444, 0.43056, 0, 0, 0.5],
	    "65": [0, 0.68333, 0, 0.13889, 0.75],
	    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
	    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
	    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
	    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
	    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
	    "71": [0, 0.68333, 0, 0.08334, 0.78625],
	    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
	    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
	    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
	    "76": [0, 0.68333, 0, 0.02778, 0.68056],
	    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
	    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
	    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
	    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
	    "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
	    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
	    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
	    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
	    "86": [0, 0.68333, 0.22222, 0, 0.58333],
	    "87": [0, 0.68333, 0.13889, 0, 0.94445],
	    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
	    "89": [0, 0.68333, 0.22222, 0, 0.58056],
	    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
	    "97": [0, 0.43056, 0, 0, 0.52859],
	    "98": [0, 0.69444, 0, 0, 0.42917],
	    "99": [0, 0.43056, 0, 0.05556, 0.43276],
	    "100": [0, 0.69444, 0, 0.16667, 0.52049],
	    "101": [0, 0.43056, 0, 0.05556, 0.46563],
	    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
	    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
	    "104": [0, 0.69444, 0, 0, 0.57616],
	    "105": [0, 0.65952, 0, 0, 0.34451],
	    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
	    "107": [0, 0.69444, 0.03148, 0, 0.5206],
	    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
	    "109": [0, 0.43056, 0, 0, 0.87801],
	    "110": [0, 0.43056, 0, 0, 0.60023],
	    "111": [0, 0.43056, 0, 0.05556, 0.48472],
	    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
	    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
	    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
	    "115": [0, 0.43056, 0, 0.05556, 0.46875],
	    "116": [0, 0.61508, 0, 0.08334, 0.36111],
	    "117": [0, 0.43056, 0, 0.02778, 0.57246],
	    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
	    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
	    "120": [0, 0.43056, 0, 0.02778, 0.57153],
	    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
	    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
	    "916": [0, 0.68333, 0, 0.16667, 0.83334],
	    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "923": [0, 0.68333, 0, 0.16667, 0.69445],
	    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
	    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
	    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
	    "934": [0, 0.68333, 0, 0.08334, 0.66667],
	    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
	    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
	    "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
	    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
	    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
	    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
	    "949": [0, 0.43056, 0, 0.08334, 0.46632],
	    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
	    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
	    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
	    "953": [0, 0.43056, 0, 0.05556, 0.35394],
	    "954": [0, 0.43056, 0, 0, 0.57616],
	    "955": [0, 0.69444, 0, 0, 0.58334],
	    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
	    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
	    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
	    "959": [0, 0.43056, 0, 0.05556, 0.48472],
	    "960": [0, 0.43056, 0.03588, 0, 0.57003],
	    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
	    "963": [0, 0.43056, 0.03588, 0, 0.57141],
	    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
	    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
	    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
	    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
	    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
	    "969": [0, 0.43056, 0.03588, 0, 0.62245],
	    "977": [0, 0.69444, 0, 0.08334, 0.59144],
	    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
	    "982": [0, 0.43056, 0.02778, 0, 0.82813],
	    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
	    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
	    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
	  },
	  "SansSerif-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.36667],
	    "34": [0, 0.69444, 0, 0, 0.55834],
	    "35": [0.19444, 0.69444, 0, 0, 0.91667],
	    "36": [0.05556, 0.75, 0, 0, 0.55],
	    "37": [0.05556, 0.75, 0, 0, 1.02912],
	    "38": [0, 0.69444, 0, 0, 0.83056],
	    "39": [0, 0.69444, 0, 0, 0.30556],
	    "40": [0.25, 0.75, 0, 0, 0.42778],
	    "41": [0.25, 0.75, 0, 0, 0.42778],
	    "42": [0, 0.75, 0, 0, 0.55],
	    "43": [0.11667, 0.61667, 0, 0, 0.85556],
	    "44": [0.10556, 0.13056, 0, 0, 0.30556],
	    "45": [0, 0.45833, 0, 0, 0.36667],
	    "46": [0, 0.13056, 0, 0, 0.30556],
	    "47": [0.25, 0.75, 0, 0, 0.55],
	    "48": [0, 0.69444, 0, 0, 0.55],
	    "49": [0, 0.69444, 0, 0, 0.55],
	    "50": [0, 0.69444, 0, 0, 0.55],
	    "51": [0, 0.69444, 0, 0, 0.55],
	    "52": [0, 0.69444, 0, 0, 0.55],
	    "53": [0, 0.69444, 0, 0, 0.55],
	    "54": [0, 0.69444, 0, 0, 0.55],
	    "55": [0, 0.69444, 0, 0, 0.55],
	    "56": [0, 0.69444, 0, 0, 0.55],
	    "57": [0, 0.69444, 0, 0, 0.55],
	    "58": [0, 0.45833, 0, 0, 0.30556],
	    "59": [0.10556, 0.45833, 0, 0, 0.30556],
	    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
	    "63": [0, 0.69444, 0, 0, 0.51945],
	    "64": [0, 0.69444, 0, 0, 0.73334],
	    "65": [0, 0.69444, 0, 0, 0.73334],
	    "66": [0, 0.69444, 0, 0, 0.73334],
	    "67": [0, 0.69444, 0, 0, 0.70278],
	    "68": [0, 0.69444, 0, 0, 0.79445],
	    "69": [0, 0.69444, 0, 0, 0.64167],
	    "70": [0, 0.69444, 0, 0, 0.61111],
	    "71": [0, 0.69444, 0, 0, 0.73334],
	    "72": [0, 0.69444, 0, 0, 0.79445],
	    "73": [0, 0.69444, 0, 0, 0.33056],
	    "74": [0, 0.69444, 0, 0, 0.51945],
	    "75": [0, 0.69444, 0, 0, 0.76389],
	    "76": [0, 0.69444, 0, 0, 0.58056],
	    "77": [0, 0.69444, 0, 0, 0.97778],
	    "78": [0, 0.69444, 0, 0, 0.79445],
	    "79": [0, 0.69444, 0, 0, 0.79445],
	    "80": [0, 0.69444, 0, 0, 0.70278],
	    "81": [0.10556, 0.69444, 0, 0, 0.79445],
	    "82": [0, 0.69444, 0, 0, 0.70278],
	    "83": [0, 0.69444, 0, 0, 0.61111],
	    "84": [0, 0.69444, 0, 0, 0.73334],
	    "85": [0, 0.69444, 0, 0, 0.76389],
	    "86": [0, 0.69444, 0.01528, 0, 0.73334],
	    "87": [0, 0.69444, 0.01528, 0, 1.03889],
	    "88": [0, 0.69444, 0, 0, 0.73334],
	    "89": [0, 0.69444, 0.0275, 0, 0.73334],
	    "90": [0, 0.69444, 0, 0, 0.67223],
	    "91": [0.25, 0.75, 0, 0, 0.34306],
	    "93": [0.25, 0.75, 0, 0, 0.34306],
	    "94": [0, 0.69444, 0, 0, 0.55],
	    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
	    "97": [0, 0.45833, 0, 0, 0.525],
	    "98": [0, 0.69444, 0, 0, 0.56111],
	    "99": [0, 0.45833, 0, 0, 0.48889],
	    "100": [0, 0.69444, 0, 0, 0.56111],
	    "101": [0, 0.45833, 0, 0, 0.51111],
	    "102": [0, 0.69444, 0.07639, 0, 0.33611],
	    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
	    "104": [0, 0.69444, 0, 0, 0.56111],
	    "105": [0, 0.69444, 0, 0, 0.25556],
	    "106": [0.19444, 0.69444, 0, 0, 0.28611],
	    "107": [0, 0.69444, 0, 0, 0.53056],
	    "108": [0, 0.69444, 0, 0, 0.25556],
	    "109": [0, 0.45833, 0, 0, 0.86667],
	    "110": [0, 0.45833, 0, 0, 0.56111],
	    "111": [0, 0.45833, 0, 0, 0.55],
	    "112": [0.19444, 0.45833, 0, 0, 0.56111],
	    "113": [0.19444, 0.45833, 0, 0, 0.56111],
	    "114": [0, 0.45833, 0.01528, 0, 0.37222],
	    "115": [0, 0.45833, 0, 0, 0.42167],
	    "116": [0, 0.58929, 0, 0, 0.40417],
	    "117": [0, 0.45833, 0, 0, 0.56111],
	    "118": [0, 0.45833, 0.01528, 0, 0.5],
	    "119": [0, 0.45833, 0.01528, 0, 0.74445],
	    "120": [0, 0.45833, 0, 0, 0.5],
	    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
	    "122": [0, 0.45833, 0, 0, 0.47639],
	    "126": [0.35, 0.34444, 0, 0, 0.55],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0, 0, 0.55],
	    "176": [0, 0.69444, 0, 0, 0.73334],
	    "180": [0, 0.69444, 0, 0, 0.55],
	    "184": [0.17014, 0, 0, 0, 0.48889],
	    "305": [0, 0.45833, 0, 0, 0.25556],
	    "567": [0.19444, 0.45833, 0, 0, 0.28611],
	    "710": [0, 0.69444, 0, 0, 0.55],
	    "711": [0, 0.63542, 0, 0, 0.55],
	    "713": [0, 0.63778, 0, 0, 0.55],
	    "728": [0, 0.69444, 0, 0, 0.55],
	    "729": [0, 0.69444, 0, 0, 0.30556],
	    "730": [0, 0.69444, 0, 0, 0.73334],
	    "732": [0, 0.69444, 0, 0, 0.55],
	    "733": [0, 0.69444, 0, 0, 0.55],
	    "915": [0, 0.69444, 0, 0, 0.58056],
	    "916": [0, 0.69444, 0, 0, 0.91667],
	    "920": [0, 0.69444, 0, 0, 0.85556],
	    "923": [0, 0.69444, 0, 0, 0.67223],
	    "926": [0, 0.69444, 0, 0, 0.73334],
	    "928": [0, 0.69444, 0, 0, 0.79445],
	    "931": [0, 0.69444, 0, 0, 0.79445],
	    "933": [0, 0.69444, 0, 0, 0.85556],
	    "934": [0, 0.69444, 0, 0, 0.79445],
	    "936": [0, 0.69444, 0, 0, 0.85556],
	    "937": [0, 0.69444, 0, 0, 0.79445],
	    "8211": [0, 0.45833, 0.03056, 0, 0.55],
	    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
	    "8216": [0, 0.69444, 0, 0, 0.30556],
	    "8217": [0, 0.69444, 0, 0, 0.30556],
	    "8220": [0, 0.69444, 0, 0, 0.55834],
	    "8221": [0, 0.69444, 0, 0, 0.55834]
	  },
	  "SansSerif-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.05733, 0, 0.31945],
	    "34": [0, 0.69444, 0.00316, 0, 0.5],
	    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
	    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
	    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
	    "38": [0, 0.69444, 0.03058, 0, 0.75834],
	    "39": [0, 0.69444, 0.07816, 0, 0.27778],
	    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
	    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
	    "42": [0, 0.75, 0.11775, 0, 0.5],
	    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0.01946, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0.13164, 0, 0.5],
	    "48": [0, 0.65556, 0.11156, 0, 0.5],
	    "49": [0, 0.65556, 0.11156, 0, 0.5],
	    "50": [0, 0.65556, 0.11156, 0, 0.5],
	    "51": [0, 0.65556, 0.11156, 0, 0.5],
	    "52": [0, 0.65556, 0.11156, 0, 0.5],
	    "53": [0, 0.65556, 0.11156, 0, 0.5],
	    "54": [0, 0.65556, 0.11156, 0, 0.5],
	    "55": [0, 0.65556, 0.11156, 0, 0.5],
	    "56": [0, 0.65556, 0.11156, 0, 0.5],
	    "57": [0, 0.65556, 0.11156, 0, 0.5],
	    "58": [0, 0.44444, 0.02502, 0, 0.27778],
	    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
	    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
	    "63": [0, 0.69444, 0.11809, 0, 0.47222],
	    "64": [0, 0.69444, 0.07555, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0.08293, 0, 0.66667],
	    "67": [0, 0.69444, 0.11983, 0, 0.63889],
	    "68": [0, 0.69444, 0.07555, 0, 0.72223],
	    "69": [0, 0.69444, 0.11983, 0, 0.59722],
	    "70": [0, 0.69444, 0.13372, 0, 0.56945],
	    "71": [0, 0.69444, 0.11983, 0, 0.66667],
	    "72": [0, 0.69444, 0.08094, 0, 0.70834],
	    "73": [0, 0.69444, 0.13372, 0, 0.27778],
	    "74": [0, 0.69444, 0.08094, 0, 0.47222],
	    "75": [0, 0.69444, 0.11983, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0.08094, 0, 0.875],
	    "78": [0, 0.69444, 0.08094, 0, 0.70834],
	    "79": [0, 0.69444, 0.07555, 0, 0.73611],
	    "80": [0, 0.69444, 0.08293, 0, 0.63889],
	    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
	    "82": [0, 0.69444, 0.08293, 0, 0.64584],
	    "83": [0, 0.69444, 0.09205, 0, 0.55556],
	    "84": [0, 0.69444, 0.13372, 0, 0.68056],
	    "85": [0, 0.69444, 0.08094, 0, 0.6875],
	    "86": [0, 0.69444, 0.1615, 0, 0.66667],
	    "87": [0, 0.69444, 0.1615, 0, 0.94445],
	    "88": [0, 0.69444, 0.13372, 0, 0.66667],
	    "89": [0, 0.69444, 0.17261, 0, 0.66667],
	    "90": [0, 0.69444, 0.11983, 0, 0.61111],
	    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
	    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
	    "94": [0, 0.69444, 0.0799, 0, 0.5],
	    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
	    "97": [0, 0.44444, 0.00981, 0, 0.48056],
	    "98": [0, 0.69444, 0.03057, 0, 0.51667],
	    "99": [0, 0.44444, 0.08336, 0, 0.44445],
	    "100": [0, 0.69444, 0.09483, 0, 0.51667],
	    "101": [0, 0.44444, 0.06778, 0, 0.44445],
	    "102": [0, 0.69444, 0.21705, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
	    "104": [0, 0.69444, 0.01778, 0, 0.51667],
	    "105": [0, 0.67937, 0.09718, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
	    "107": [0, 0.69444, 0.08336, 0, 0.48889],
	    "108": [0, 0.69444, 0.09483, 0, 0.23889],
	    "109": [0, 0.44444, 0.01778, 0, 0.79445],
	    "110": [0, 0.44444, 0.01778, 0, 0.51667],
	    "111": [0, 0.44444, 0.06613, 0, 0.5],
	    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
	    "114": [0, 0.44444, 0.10836, 0, 0.34167],
	    "115": [0, 0.44444, 0.0778, 0, 0.38333],
	    "116": [0, 0.57143, 0.07225, 0, 0.36111],
	    "117": [0, 0.44444, 0.04169, 0, 0.51667],
	    "118": [0, 0.44444, 0.10836, 0, 0.46111],
	    "119": [0, 0.44444, 0.10836, 0, 0.68334],
	    "120": [0, 0.44444, 0.09169, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
	    "122": [0, 0.44444, 0.08752, 0, 0.43472],
	    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0.06385, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.73752],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0.04169, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
	    "710": [0, 0.69444, 0.0799, 0, 0.5],
	    "711": [0, 0.63194, 0.08432, 0, 0.5],
	    "713": [0, 0.60889, 0.08776, 0, 0.5],
	    "714": [0, 0.69444, 0.09205, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0.09483, 0, 0.5],
	    "729": [0, 0.67937, 0.07774, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.73752],
	    "732": [0, 0.67659, 0.08826, 0, 0.5],
	    "733": [0, 0.69444, 0.09205, 0, 0.5],
	    "915": [0, 0.69444, 0.13372, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0.07555, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0.12816, 0, 0.66667],
	    "928": [0, 0.69444, 0.08094, 0, 0.70834],
	    "931": [0, 0.69444, 0.11983, 0, 0.72222],
	    "933": [0, 0.69444, 0.09031, 0, 0.77778],
	    "934": [0, 0.69444, 0.04603, 0, 0.72222],
	    "936": [0, 0.69444, 0.09031, 0, 0.77778],
	    "937": [0, 0.69444, 0.08293, 0, 0.72222],
	    "8211": [0, 0.44444, 0.08616, 0, 0.5],
	    "8212": [0, 0.44444, 0.08616, 0, 1.0],
	    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8220": [0, 0.69444, 0.14205, 0, 0.5],
	    "8221": [0, 0.69444, 0.00316, 0, 0.5]
	  },
	  "SansSerif-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.31945],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.75834],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.65556, 0, 0, 0.5],
	    "49": [0, 0.65556, 0, 0, 0.5],
	    "50": [0, 0.65556, 0, 0, 0.5],
	    "51": [0, 0.65556, 0, 0, 0.5],
	    "52": [0, 0.65556, 0, 0, 0.5],
	    "53": [0, 0.65556, 0, 0, 0.5],
	    "54": [0, 0.65556, 0, 0, 0.5],
	    "55": [0, 0.65556, 0, 0, 0.5],
	    "56": [0, 0.65556, 0, 0, 0.5],
	    "57": [0, 0.65556, 0, 0, 0.5],
	    "58": [0, 0.44444, 0, 0, 0.27778],
	    "59": [0.125, 0.44444, 0, 0, 0.27778],
	    "61": [-0.13, 0.37, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0, 0, 0.66667],
	    "67": [0, 0.69444, 0, 0, 0.63889],
	    "68": [0, 0.69444, 0, 0, 0.72223],
	    "69": [0, 0.69444, 0, 0, 0.59722],
	    "70": [0, 0.69444, 0, 0, 0.56945],
	    "71": [0, 0.69444, 0, 0, 0.66667],
	    "72": [0, 0.69444, 0, 0, 0.70834],
	    "73": [0, 0.69444, 0, 0, 0.27778],
	    "74": [0, 0.69444, 0, 0, 0.47222],
	    "75": [0, 0.69444, 0, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0, 0, 0.875],
	    "78": [0, 0.69444, 0, 0, 0.70834],
	    "79": [0, 0.69444, 0, 0, 0.73611],
	    "80": [0, 0.69444, 0, 0, 0.63889],
	    "81": [0.125, 0.69444, 0, 0, 0.73611],
	    "82": [0, 0.69444, 0, 0, 0.64584],
	    "83": [0, 0.69444, 0, 0, 0.55556],
	    "84": [0, 0.69444, 0, 0, 0.68056],
	    "85": [0, 0.69444, 0, 0, 0.6875],
	    "86": [0, 0.69444, 0.01389, 0, 0.66667],
	    "87": [0, 0.69444, 0.01389, 0, 0.94445],
	    "88": [0, 0.69444, 0, 0, 0.66667],
	    "89": [0, 0.69444, 0.025, 0, 0.66667],
	    "90": [0, 0.69444, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.28889],
	    "93": [0.25, 0.75, 0, 0, 0.28889],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
	    "97": [0, 0.44444, 0, 0, 0.48056],
	    "98": [0, 0.69444, 0, 0, 0.51667],
	    "99": [0, 0.44444, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.51667],
	    "101": [0, 0.44444, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.06944, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.51667],
	    "105": [0, 0.67937, 0, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0, 0, 0.26667],
	    "107": [0, 0.69444, 0, 0, 0.48889],
	    "108": [0, 0.69444, 0, 0, 0.23889],
	    "109": [0, 0.44444, 0, 0, 0.79445],
	    "110": [0, 0.44444, 0, 0, 0.51667],
	    "111": [0, 0.44444, 0, 0, 0.5],
	    "112": [0.19444, 0.44444, 0, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0, 0, 0.51667],
	    "114": [0, 0.44444, 0.01389, 0, 0.34167],
	    "115": [0, 0.44444, 0, 0, 0.38333],
	    "116": [0, 0.57143, 0, 0, 0.36111],
	    "117": [0, 0.44444, 0, 0, 0.51667],
	    "118": [0, 0.44444, 0.01389, 0, 0.46111],
	    "119": [0, 0.44444, 0.01389, 0, 0.68334],
	    "120": [0, 0.44444, 0, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
	    "122": [0, 0.44444, 0, 0, 0.43472],
	    "126": [0.35, 0.32659, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.66667],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0, 0, 0.26667],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.63194, 0, 0, 0.5],
	    "713": [0, 0.60889, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.67937, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.66667],
	    "732": [0, 0.67659, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.69444, 0, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0, 0, 0.66667],
	    "928": [0, 0.69444, 0, 0, 0.70834],
	    "931": [0, 0.69444, 0, 0, 0.72222],
	    "933": [0, 0.69444, 0, 0, 0.77778],
	    "934": [0, 0.69444, 0, 0, 0.72222],
	    "936": [0, 0.69444, 0, 0, 0.77778],
	    "937": [0, 0.69444, 0, 0, 0.72222],
	    "8211": [0, 0.44444, 0.02778, 0, 0.5],
	    "8212": [0, 0.44444, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5]
	  },
	  "Script-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.7, 0.22925, 0, 0.80253],
	    "66": [0, 0.7, 0.04087, 0, 0.90757],
	    "67": [0, 0.7, 0.1689, 0, 0.66619],
	    "68": [0, 0.7, 0.09371, 0, 0.77443],
	    "69": [0, 0.7, 0.18583, 0, 0.56162],
	    "70": [0, 0.7, 0.13634, 0, 0.89544],
	    "71": [0, 0.7, 0.17322, 0, 0.60961],
	    "72": [0, 0.7, 0.29694, 0, 0.96919],
	    "73": [0, 0.7, 0.19189, 0, 0.80907],
	    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
	    "75": [0, 0.7, 0.31259, 0, 0.91364],
	    "76": [0, 0.7, 0.19189, 0, 0.87373],
	    "77": [0, 0.7, 0.15981, 0, 1.08031],
	    "78": [0, 0.7, 0.3525, 0, 0.9015],
	    "79": [0, 0.7, 0.08078, 0, 0.73787],
	    "80": [0, 0.7, 0.08078, 0, 1.01262],
	    "81": [0, 0.7, 0.03305, 0, 0.88282],
	    "82": [0, 0.7, 0.06259, 0, 0.85],
	    "83": [0, 0.7, 0.19189, 0, 0.86767],
	    "84": [0, 0.7, 0.29087, 0, 0.74697],
	    "85": [0, 0.7, 0.25815, 0, 0.79996],
	    "86": [0, 0.7, 0.27523, 0, 0.62204],
	    "87": [0, 0.7, 0.27523, 0, 0.80532],
	    "88": [0, 0.7, 0.26006, 0, 0.94445],
	    "89": [0, 0.7, 0.2939, 0, 0.70961],
	    "90": [0, 0.7, 0.24037, 0, 0.8212],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Size1-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.35001, 0.85, 0, 0, 0.45834],
	    "41": [0.35001, 0.85, 0, 0, 0.45834],
	    "47": [0.35001, 0.85, 0, 0, 0.57778],
	    "91": [0.35001, 0.85, 0, 0, 0.41667],
	    "92": [0.35001, 0.85, 0, 0, 0.57778],
	    "93": [0.35001, 0.85, 0, 0, 0.41667],
	    "123": [0.35001, 0.85, 0, 0, 0.58334],
	    "125": [0.35001, 0.85, 0, 0, 0.58334],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.72222, 0, 0, 0.55556],
	    "732": [0, 0.72222, 0, 0, 0.55556],
	    "770": [0, 0.72222, 0, 0, 0.55556],
	    "771": [0, 0.72222, 0, 0, 0.55556],
	    "8214": [-0.00099, 0.601, 0, 0, 0.77778],
	    "8593": [1e-05, 0.6, 0, 0, 0.66667],
	    "8595": [1e-05, 0.6, 0, 0, 0.66667],
	    "8657": [1e-05, 0.6, 0, 0, 0.77778],
	    "8659": [1e-05, 0.6, 0, 0, 0.77778],
	    "8719": [0.25001, 0.75, 0, 0, 0.94445],
	    "8720": [0.25001, 0.75, 0, 0, 0.94445],
	    "8721": [0.25001, 0.75, 0, 0, 1.05556],
	    "8730": [0.35001, 0.85, 0, 0, 1.0],
	    "8739": [-0.00599, 0.606, 0, 0, 0.33333],
	    "8741": [-0.00599, 0.606, 0, 0, 0.55556],
	    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8896": [0.25001, 0.75, 0, 0, 0.83334],
	    "8897": [0.25001, 0.75, 0, 0, 0.83334],
	    "8898": [0.25001, 0.75, 0, 0, 0.83334],
	    "8899": [0.25001, 0.75, 0, 0, 0.83334],
	    "8968": [0.35001, 0.85, 0, 0, 0.47222],
	    "8969": [0.35001, 0.85, 0, 0, 0.47222],
	    "8970": [0.35001, 0.85, 0, 0, 0.47222],
	    "8971": [0.35001, 0.85, 0, 0, 0.47222],
	    "9168": [-0.00099, 0.601, 0, 0, 0.66667],
	    "10216": [0.35001, 0.85, 0, 0, 0.47222],
	    "10217": [0.35001, 0.85, 0, 0, 0.47222],
	    "10752": [0.25001, 0.75, 0, 0, 1.11111],
	    "10753": [0.25001, 0.75, 0, 0, 1.11111],
	    "10754": [0.25001, 0.75, 0, 0, 1.11111],
	    "10756": [0.25001, 0.75, 0, 0, 0.83334],
	    "10758": [0.25001, 0.75, 0, 0, 0.83334]
	  },
	  "Size2-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.65002, 1.15, 0, 0, 0.59722],
	    "41": [0.65002, 1.15, 0, 0, 0.59722],
	    "47": [0.65002, 1.15, 0, 0, 0.81111],
	    "91": [0.65002, 1.15, 0, 0, 0.47222],
	    "92": [0.65002, 1.15, 0, 0, 0.81111],
	    "93": [0.65002, 1.15, 0, 0, 0.47222],
	    "123": [0.65002, 1.15, 0, 0, 0.66667],
	    "125": [0.65002, 1.15, 0, 0, 0.66667],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.0],
	    "732": [0, 0.75, 0, 0, 1.0],
	    "770": [0, 0.75, 0, 0, 1.0],
	    "771": [0, 0.75, 0, 0, 1.0],
	    "8719": [0.55001, 1.05, 0, 0, 1.27778],
	    "8720": [0.55001, 1.05, 0, 0, 1.27778],
	    "8721": [0.55001, 1.05, 0, 0, 1.44445],
	    "8730": [0.65002, 1.15, 0, 0, 1.0],
	    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8896": [0.55001, 1.05, 0, 0, 1.11111],
	    "8897": [0.55001, 1.05, 0, 0, 1.11111],
	    "8898": [0.55001, 1.05, 0, 0, 1.11111],
	    "8899": [0.55001, 1.05, 0, 0, 1.11111],
	    "8968": [0.65002, 1.15, 0, 0, 0.52778],
	    "8969": [0.65002, 1.15, 0, 0, 0.52778],
	    "8970": [0.65002, 1.15, 0, 0, 0.52778],
	    "8971": [0.65002, 1.15, 0, 0, 0.52778],
	    "10216": [0.65002, 1.15, 0, 0, 0.61111],
	    "10217": [0.65002, 1.15, 0, 0, 0.61111],
	    "10752": [0.55001, 1.05, 0, 0, 1.51112],
	    "10753": [0.55001, 1.05, 0, 0, 1.51112],
	    "10754": [0.55001, 1.05, 0, 0, 1.51112],
	    "10756": [0.55001, 1.05, 0, 0, 1.11111],
	    "10758": [0.55001, 1.05, 0, 0, 1.11111]
	  },
	  "Size3-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.95003, 1.45, 0, 0, 0.73611],
	    "41": [0.95003, 1.45, 0, 0, 0.73611],
	    "47": [0.95003, 1.45, 0, 0, 1.04445],
	    "91": [0.95003, 1.45, 0, 0, 0.52778],
	    "92": [0.95003, 1.45, 0, 0, 1.04445],
	    "93": [0.95003, 1.45, 0, 0, 0.52778],
	    "123": [0.95003, 1.45, 0, 0, 0.75],
	    "125": [0.95003, 1.45, 0, 0, 0.75],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.44445],
	    "732": [0, 0.75, 0, 0, 1.44445],
	    "770": [0, 0.75, 0, 0, 1.44445],
	    "771": [0, 0.75, 0, 0, 1.44445],
	    "8730": [0.95003, 1.45, 0, 0, 1.0],
	    "8968": [0.95003, 1.45, 0, 0, 0.58334],
	    "8969": [0.95003, 1.45, 0, 0, 0.58334],
	    "8970": [0.95003, 1.45, 0, 0, 0.58334],
	    "8971": [0.95003, 1.45, 0, 0, 0.58334],
	    "10216": [0.95003, 1.45, 0, 0, 0.75],
	    "10217": [0.95003, 1.45, 0, 0, 0.75]
	  },
	  "Size4-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [1.25003, 1.75, 0, 0, 0.79167],
	    "41": [1.25003, 1.75, 0, 0, 0.79167],
	    "47": [1.25003, 1.75, 0, 0, 1.27778],
	    "91": [1.25003, 1.75, 0, 0, 0.58334],
	    "92": [1.25003, 1.75, 0, 0, 1.27778],
	    "93": [1.25003, 1.75, 0, 0, 0.58334],
	    "123": [1.25003, 1.75, 0, 0, 0.80556],
	    "125": [1.25003, 1.75, 0, 0, 0.80556],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.825, 0, 0, 1.8889],
	    "732": [0, 0.825, 0, 0, 1.8889],
	    "770": [0, 0.825, 0, 0, 1.8889],
	    "771": [0, 0.825, 0, 0, 1.8889],
	    "8730": [1.25003, 1.75, 0, 0, 1.0],
	    "8968": [1.25003, 1.75, 0, 0, 0.63889],
	    "8969": [1.25003, 1.75, 0, 0, 0.63889],
	    "8970": [1.25003, 1.75, 0, 0, 0.63889],
	    "8971": [1.25003, 1.75, 0, 0, 0.63889],
	    "9115": [0.64502, 1.155, 0, 0, 0.875],
	    "9116": [1e-05, 0.6, 0, 0, 0.875],
	    "9117": [0.64502, 1.155, 0, 0, 0.875],
	    "9118": [0.64502, 1.155, 0, 0, 0.875],
	    "9119": [1e-05, 0.6, 0, 0, 0.875],
	    "9120": [0.64502, 1.155, 0, 0, 0.875],
	    "9121": [0.64502, 1.155, 0, 0, 0.66667],
	    "9122": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9123": [0.64502, 1.155, 0, 0, 0.66667],
	    "9124": [0.64502, 1.155, 0, 0, 0.66667],
	    "9125": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9126": [0.64502, 1.155, 0, 0, 0.66667],
	    "9127": [1e-05, 0.9, 0, 0, 0.88889],
	    "9128": [0.65002, 1.15, 0, 0, 0.88889],
	    "9129": [0.90001, 0, 0, 0, 0.88889],
	    "9130": [0, 0.3, 0, 0, 0.88889],
	    "9131": [1e-05, 0.9, 0, 0, 0.88889],
	    "9132": [0.65002, 1.15, 0, 0, 0.88889],
	    "9133": [0.90001, 0, 0, 0, 0.88889],
	    "9143": [0.88502, 0.915, 0, 0, 1.05556],
	    "10216": [1.25003, 1.75, 0, 0, 0.80556],
	    "10217": [1.25003, 1.75, 0, 0, 0.80556],
	    "57344": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57345": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57680": [0, 0.12, 0, 0, 0.45],
	    "57681": [0, 0.12, 0, 0, 0.45],
	    "57682": [0, 0.12, 0, 0, 0.45],
	    "57683": [0, 0.12, 0, 0, 0.45]
	  },
	  "Typewriter-Regular": {
	    "32": [0, 0, 0, 0, 0.525],
	    "33": [0, 0.61111, 0, 0, 0.525],
	    "34": [0, 0.61111, 0, 0, 0.525],
	    "35": [0, 0.61111, 0, 0, 0.525],
	    "36": [0.08333, 0.69444, 0, 0, 0.525],
	    "37": [0.08333, 0.69444, 0, 0, 0.525],
	    "38": [0, 0.61111, 0, 0, 0.525],
	    "39": [0, 0.61111, 0, 0, 0.525],
	    "40": [0.08333, 0.69444, 0, 0, 0.525],
	    "41": [0.08333, 0.69444, 0, 0, 0.525],
	    "42": [0, 0.52083, 0, 0, 0.525],
	    "43": [-0.08056, 0.53055, 0, 0, 0.525],
	    "44": [0.13889, 0.125, 0, 0, 0.525],
	    "45": [-0.08056, 0.53055, 0, 0, 0.525],
	    "46": [0, 0.125, 0, 0, 0.525],
	    "47": [0.08333, 0.69444, 0, 0, 0.525],
	    "48": [0, 0.61111, 0, 0, 0.525],
	    "49": [0, 0.61111, 0, 0, 0.525],
	    "50": [0, 0.61111, 0, 0, 0.525],
	    "51": [0, 0.61111, 0, 0, 0.525],
	    "52": [0, 0.61111, 0, 0, 0.525],
	    "53": [0, 0.61111, 0, 0, 0.525],
	    "54": [0, 0.61111, 0, 0, 0.525],
	    "55": [0, 0.61111, 0, 0, 0.525],
	    "56": [0, 0.61111, 0, 0, 0.525],
	    "57": [0, 0.61111, 0, 0, 0.525],
	    "58": [0, 0.43056, 0, 0, 0.525],
	    "59": [0.13889, 0.43056, 0, 0, 0.525],
	    "60": [-0.05556, 0.55556, 0, 0, 0.525],
	    "61": [-0.19549, 0.41562, 0, 0, 0.525],
	    "62": [-0.05556, 0.55556, 0, 0, 0.525],
	    "63": [0, 0.61111, 0, 0, 0.525],
	    "64": [0, 0.61111, 0, 0, 0.525],
	    "65": [0, 0.61111, 0, 0, 0.525],
	    "66": [0, 0.61111, 0, 0, 0.525],
	    "67": [0, 0.61111, 0, 0, 0.525],
	    "68": [0, 0.61111, 0, 0, 0.525],
	    "69": [0, 0.61111, 0, 0, 0.525],
	    "70": [0, 0.61111, 0, 0, 0.525],
	    "71": [0, 0.61111, 0, 0, 0.525],
	    "72": [0, 0.61111, 0, 0, 0.525],
	    "73": [0, 0.61111, 0, 0, 0.525],
	    "74": [0, 0.61111, 0, 0, 0.525],
	    "75": [0, 0.61111, 0, 0, 0.525],
	    "76": [0, 0.61111, 0, 0, 0.525],
	    "77": [0, 0.61111, 0, 0, 0.525],
	    "78": [0, 0.61111, 0, 0, 0.525],
	    "79": [0, 0.61111, 0, 0, 0.525],
	    "80": [0, 0.61111, 0, 0, 0.525],
	    "81": [0.13889, 0.61111, 0, 0, 0.525],
	    "82": [0, 0.61111, 0, 0, 0.525],
	    "83": [0, 0.61111, 0, 0, 0.525],
	    "84": [0, 0.61111, 0, 0, 0.525],
	    "85": [0, 0.61111, 0, 0, 0.525],
	    "86": [0, 0.61111, 0, 0, 0.525],
	    "87": [0, 0.61111, 0, 0, 0.525],
	    "88": [0, 0.61111, 0, 0, 0.525],
	    "89": [0, 0.61111, 0, 0, 0.525],
	    "90": [0, 0.61111, 0, 0, 0.525],
	    "91": [0.08333, 0.69444, 0, 0, 0.525],
	    "92": [0.08333, 0.69444, 0, 0, 0.525],
	    "93": [0.08333, 0.69444, 0, 0, 0.525],
	    "94": [0, 0.61111, 0, 0, 0.525],
	    "95": [0.09514, 0, 0, 0, 0.525],
	    "96": [0, 0.61111, 0, 0, 0.525],
	    "97": [0, 0.43056, 0, 0, 0.525],
	    "98": [0, 0.61111, 0, 0, 0.525],
	    "99": [0, 0.43056, 0, 0, 0.525],
	    "100": [0, 0.61111, 0, 0, 0.525],
	    "101": [0, 0.43056, 0, 0, 0.525],
	    "102": [0, 0.61111, 0, 0, 0.525],
	    "103": [0.22222, 0.43056, 0, 0, 0.525],
	    "104": [0, 0.61111, 0, 0, 0.525],
	    "105": [0, 0.61111, 0, 0, 0.525],
	    "106": [0.22222, 0.61111, 0, 0, 0.525],
	    "107": [0, 0.61111, 0, 0, 0.525],
	    "108": [0, 0.61111, 0, 0, 0.525],
	    "109": [0, 0.43056, 0, 0, 0.525],
	    "110": [0, 0.43056, 0, 0, 0.525],
	    "111": [0, 0.43056, 0, 0, 0.525],
	    "112": [0.22222, 0.43056, 0, 0, 0.525],
	    "113": [0.22222, 0.43056, 0, 0, 0.525],
	    "114": [0, 0.43056, 0, 0, 0.525],
	    "115": [0, 0.43056, 0, 0, 0.525],
	    "116": [0, 0.55358, 0, 0, 0.525],
	    "117": [0, 0.43056, 0, 0, 0.525],
	    "118": [0, 0.43056, 0, 0, 0.525],
	    "119": [0, 0.43056, 0, 0, 0.525],
	    "120": [0, 0.43056, 0, 0, 0.525],
	    "121": [0.22222, 0.43056, 0, 0, 0.525],
	    "122": [0, 0.43056, 0, 0, 0.525],
	    "123": [0.08333, 0.69444, 0, 0, 0.525],
	    "124": [0.08333, 0.69444, 0, 0, 0.525],
	    "125": [0.08333, 0.69444, 0, 0, 0.525],
	    "126": [0, 0.61111, 0, 0, 0.525],
	    "127": [0, 0.61111, 0, 0, 0.525],
	    "160": [0, 0, 0, 0, 0.525],
	    "176": [0, 0.61111, 0, 0, 0.525],
	    "184": [0.19445, 0, 0, 0, 0.525],
	    "305": [0, 0.43056, 0, 0, 0.525],
	    "567": [0.22222, 0.43056, 0, 0, 0.525],
	    "711": [0, 0.56597, 0, 0, 0.525],
	    "713": [0, 0.56555, 0, 0, 0.525],
	    "714": [0, 0.61111, 0, 0, 0.525],
	    "715": [0, 0.61111, 0, 0, 0.525],
	    "728": [0, 0.61111, 0, 0, 0.525],
	    "730": [0, 0.61111, 0, 0, 0.525],
	    "770": [0, 0.61111, 0, 0, 0.525],
	    "771": [0, 0.61111, 0, 0, 0.525],
	    "776": [0, 0.61111, 0, 0, 0.525],
	    "915": [0, 0.61111, 0, 0, 0.525],
	    "916": [0, 0.61111, 0, 0, 0.525],
	    "920": [0, 0.61111, 0, 0, 0.525],
	    "923": [0, 0.61111, 0, 0, 0.525],
	    "926": [0, 0.61111, 0, 0, 0.525],
	    "928": [0, 0.61111, 0, 0, 0.525],
	    "931": [0, 0.61111, 0, 0, 0.525],
	    "933": [0, 0.61111, 0, 0, 0.525],
	    "934": [0, 0.61111, 0, 0, 0.525],
	    "936": [0, 0.61111, 0, 0, 0.525],
	    "937": [0, 0.61111, 0, 0, 0.525],
	    "8216": [0, 0.61111, 0, 0, 0.525],
	    "8217": [0, 0.61111, 0, 0, 0.525],
	    "8242": [0, 0.61111, 0, 0, 0.525],
	    "9251": [0.11111, 0.21944, 0, 0, 0.525]
	  }
	};

	/**
	 * This file contains metrics regarding fonts and individual symbols. The sigma
	 * and xi variables, as well as the metricMap map contain data extracted from
	 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
	 * `metrics` variable and the getCharacterMetrics function.
	 */
	// In TeX, there are actually three sets of dimensions, one for each of
	// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
	// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
	// provided in the the arrays below, in that order.
	//
	// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
	// This was determined by running the following script:
	//
	//     latex -interaction=nonstopmode \
	//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
	//     '$a$ \expandafter\show\the\textfont2' \
	//     '\expandafter\show\the\scriptfont2' \
	//     '\expandafter\show\the\scriptscriptfont2' \
	//     '\stop'
	//
	// The metrics themselves were retreived using the following commands:
	//
	//     tftopl cmsy10
	//     tftopl cmsy7
	//     tftopl cmsy5
	//
	// The output of each of these commands is quite lengthy.  The only part we
	// care about is the FONTDIMEN section. Each value is measured in EMs.
	var sigmasAndXis = {
	  slant: [0.250, 0.250, 0.250],
	  // sigma1
	  space: [0.000, 0.000, 0.000],
	  // sigma2
	  stretch: [0.000, 0.000, 0.000],
	  // sigma3
	  shrink: [0.000, 0.000, 0.000],
	  // sigma4
	  xHeight: [0.431, 0.431, 0.431],
	  // sigma5
	  quad: [1.000, 1.171, 1.472],
	  // sigma6
	  extraSpace: [0.000, 0.000, 0.000],
	  // sigma7
	  num1: [0.677, 0.732, 0.925],
	  // sigma8
	  num2: [0.394, 0.384, 0.387],
	  // sigma9
	  num3: [0.444, 0.471, 0.504],
	  // sigma10
	  denom1: [0.686, 0.752, 1.025],
	  // sigma11
	  denom2: [0.345, 0.344, 0.532],
	  // sigma12
	  sup1: [0.413, 0.503, 0.504],
	  // sigma13
	  sup2: [0.363, 0.431, 0.404],
	  // sigma14
	  sup3: [0.289, 0.286, 0.294],
	  // sigma15
	  sub1: [0.150, 0.143, 0.200],
	  // sigma16
	  sub2: [0.247, 0.286, 0.400],
	  // sigma17
	  supDrop: [0.386, 0.353, 0.494],
	  // sigma18
	  subDrop: [0.050, 0.071, 0.100],
	  // sigma19
	  delim1: [2.390, 1.700, 1.980],
	  // sigma20
	  delim2: [1.010, 1.157, 1.420],
	  // sigma21
	  axisHeight: [0.250, 0.250, 0.250],
	  // sigma22
	  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
	  // they correspond to the font parameters of the extension fonts (family 3).
	  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
	  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
	  // values.
	  defaultRuleThickness: [0.04, 0.049, 0.049],
	  // xi8; cmex7: 0.049
	  bigOpSpacing1: [0.111, 0.111, 0.111],
	  // xi9
	  bigOpSpacing2: [0.166, 0.166, 0.166],
	  // xi10
	  bigOpSpacing3: [0.2, 0.2, 0.2],
	  // xi11
	  bigOpSpacing4: [0.6, 0.611, 0.611],
	  // xi12; cmex7: 0.611
	  bigOpSpacing5: [0.1, 0.143, 0.143],
	  // xi13; cmex7: 0.143
	  // The \sqrt rule width is taken from the height of the surd character.
	  // Since we use the same font at all sizes, this thickness doesn't scale.
	  sqrtRuleThickness: [0.04, 0.04, 0.04],
	  // This value determines how large a pt is, for metrics which are defined
	  // in terms of pts.
	  // This value is also used in katex.less; if you change it make sure the
	  // values match.
	  ptPerEm: [10.0, 10.0, 10.0],
	  // The space between adjacent `|` columns in an array definition. From
	  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
	  doubleRuleSep: [0.2, 0.2, 0.2],
	  // The width of separator lines in {array} environments. From
	  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
	  arrayRuleWidth: [0.04, 0.04, 0.04],
	  // Two values from LaTeX source2e:
	  fboxsep: [0.3, 0.3, 0.3],
	  //        3 pt / ptPerEm
	  fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

	}; // This map contains a mapping from font name and character code to character
	// should have Latin-1 and Cyrillic characters, but may not depending on the
	// operating system.  The metrics do not account for extra height from the
	// accents.  In the case of Cyrillic characters which have both ascenders and
	// descenders we prefer approximations with ascenders, primarily to prevent
	// the fraction bar or root line from intersecting the glyph.
	// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

	var extraCharacterMap = {
	  // Latin-1
	  'Å': 'A',
	  'Ç': 'C',
	  'Ð': 'D',
	  'Þ': 'o',
	  'å': 'a',
	  'ç': 'c',
	  'ð': 'd',
	  'þ': 'o',
	  // Cyrillic
	  'А': 'A',
	  'Б': 'B',
	  'В': 'B',
	  'Г': 'F',
	  'Д': 'A',
	  'Е': 'E',
	  'Ж': 'K',
	  'З': '3',
	  'И': 'N',
	  'Й': 'N',
	  'К': 'K',
	  'Л': 'N',
	  'М': 'M',
	  'Н': 'H',
	  'О': 'O',
	  'П': 'N',
	  'Р': 'P',
	  'С': 'C',
	  'Т': 'T',
	  'У': 'y',
	  'Ф': 'O',
	  'Х': 'X',
	  'Ц': 'U',
	  'Ч': 'h',
	  'Ш': 'W',
	  'Щ': 'W',
	  'Ъ': 'B',
	  'Ы': 'X',
	  'Ь': 'B',
	  'Э': '3',
	  'Ю': 'X',
	  'Я': 'R',
	  'а': 'a',
	  'б': 'b',
	  'в': 'a',
	  'г': 'r',
	  'д': 'y',
	  'е': 'e',
	  'ж': 'm',
	  'з': 'e',
	  'и': 'n',
	  'й': 'n',
	  'к': 'n',
	  'л': 'n',
	  'м': 'm',
	  'н': 'n',
	  'о': 'o',
	  'п': 'n',
	  'р': 'p',
	  'с': 'c',
	  'т': 'o',
	  'у': 'y',
	  'ф': 'b',
	  'х': 'x',
	  'ц': 'n',
	  'ч': 'n',
	  'ш': 'w',
	  'щ': 'w',
	  'ъ': 'a',
	  'ы': 'm',
	  'ь': 'a',
	  'э': 'e',
	  'ю': 'm',
	  'я': 'r'
	};

	/**
	 * This function adds new font metrics to default metricMap
	 * It can also override existing metrics
	 */
	function setFontMetrics(fontName, metrics) {
	  fontMetricsData[fontName] = metrics;
	}
	/**
	 * This function is a convenience function for looking up information in the
	 * metricMap table. It takes a character as a string, and a font.
	 *
	 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
	 * built using `Make extended_metrics`.
	 */

	function getCharacterMetrics(character, font, mode) {
	  if (!fontMetricsData[font]) {
	    throw new Error("Font metrics not found for font: " + font + ".");
	  }

	  var ch = character.charCodeAt(0);
	  var metrics = fontMetricsData[font][ch];

	  if (!metrics && character[0] in extraCharacterMap) {
	    ch = extraCharacterMap[character[0]].charCodeAt(0);
	    metrics = fontMetricsData[font][ch];
	  }

	  if (!metrics && mode === 'text') {
	    // We don't typically have font metrics for Asian scripts.
	    // But since we support them in text mode, we need to return
	    // some sort of metrics.
	    // So if the character is in a script we support but we
	    // don't have metrics for it, just use the metrics for
	    // the Latin capital letter M. This is close enough because
	    // we (currently) only care about the height of the glpyh
	    // not its width.
	    if (supportedCodepoint(ch)) {
	      metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
	    }
	  }

	  if (metrics) {
	    return {
	      depth: metrics[0],
	      height: metrics[1],
	      italic: metrics[2],
	      skew: metrics[3],
	      width: metrics[4]
	    };
	  }
	}
	var fontMetricsBySizeIndex = {};
	/**
	 * Get the font metrics for a given size.
	 */

	function getGlobalMetrics(size) {
	  var sizeIndex;

	  if (size >= 5) {
	    sizeIndex = 0;
	  } else if (size >= 3) {
	    sizeIndex = 1;
	  } else {
	    sizeIndex = 2;
	  }

	  if (!fontMetricsBySizeIndex[sizeIndex]) {
	    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
	      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
	    };

	    for (var key in sigmasAndXis) {
	      if (sigmasAndXis.hasOwnProperty(key)) {
	        metrics[key] = sigmasAndXis[key][sizeIndex];
	      }
	    }
	  }

	  return fontMetricsBySizeIndex[sizeIndex];
	}

	/**
	 * This file holds a list of all no-argument functions and single-character
	 * symbols (like 'a' or ';').
	 *
	 * For each of the symbols, there are three properties they can have:
	 * - font (required): the font to be used for this symbol. Either "main" (the
	     normal font), or "ams" (the ams fonts).
	 * - group (required): the ParseNode group type the symbol should have (i.e.
	     "textord", "mathord", etc).
	     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
	 * - replace: the character that this symbol or function should be
	 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
	 *   character in the main font).
	 *
	 * The outermost map in the table indicates what mode the symbols should be
	 * accepted in (e.g. "math" or "text").
	 */
	// Some of these have a "-token" suffix since these are also used as `ParseNode`
	// types for raw text tokens, and we want to avoid conflicts with higher-level
	// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
	// looking up the `symbols` map.
	var ATOMS = {
	  "bin": 1,
	  "close": 1,
	  "inner": 1,
	  "open": 1,
	  "punct": 1,
	  "rel": 1
	};
	var NON_ATOMS = {
	  "accent-token": 1,
	  "mathord": 1,
	  "op-token": 1,
	  "spacing": 1,
	  "textord": 1
	};
	var symbols = {
	  "math": {},
	  "text": {}
	};
	/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

	function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
	  symbols[mode][name] = {
	    font,
	    group,
	    replace
	  };

	  if (acceptUnicodeChar && replace) {
	    symbols[mode][replace] = symbols[mode][name];
	  }
	} // Some abbreviations for commonly used strings.
	// This helps minify the code, and also spotting typos using jshint.
	// modes:

	var math = "math";
	var text$1 = "text"; // fonts:

	var main = "main";
	var ams = "ams"; // groups:

	var accent = "accent-token";
	var bin = "bin";
	var close = "close";
	var inner = "inner";
	var mathord = "mathord";
	var op = "op-token";
	var open = "open";
	var punct = "punct";
	var rel = "rel";
	var spacing = "spacing";
	var textord = "textord"; // Now comes the symbol table
	// Relation Symbols

	defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
	defineSymbol(math, main, rel, "\u227a", "\\prec", true);
	defineSymbol(math, main, rel, "\u227b", "\\succ", true);
	defineSymbol(math, main, rel, "\u223c", "\\sim", true);
	defineSymbol(math, main, rel, "\u22a5", "\\perp");
	defineSymbol(math, main, rel, "\u2aaf", "\\preceq", true);
	defineSymbol(math, main, rel, "\u2ab0", "\\succeq", true);
	defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
	defineSymbol(math, main, rel, "\u2223", "\\mid", true);
	defineSymbol(math, main, rel, "\u226a", "\\ll", true);
	defineSymbol(math, main, rel, "\u226b", "\\gg", true);
	defineSymbol(math, main, rel, "\u224d", "\\asymp", true);
	defineSymbol(math, main, rel, "\u2225", "\\parallel");
	defineSymbol(math, main, rel, "\u22c8", "\\bowtie", true);
	defineSymbol(math, main, rel, "\u2323", "\\smile", true);
	defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
	defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
	defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
	defineSymbol(math, main, rel, "\u2322", "\\frown", true);
	defineSymbol(math, main, rel, "\u220b", "\\ni", true);
	defineSymbol(math, main, rel, "\u221d", "\\propto", true);
	defineSymbol(math, main, rel, "\u22a2", "\\vdash", true);
	defineSymbol(math, main, rel, "\u22a3", "\\dashv", true);
	defineSymbol(math, main, rel, "\u220b", "\\owns"); // Punctuation

	defineSymbol(math, main, punct, "\u002e", "\\ldotp");
	defineSymbol(math, main, punct, "\u22c5", "\\cdotp"); // Misc Symbols

	defineSymbol(math, main, textord, "\u0023", "\\#");
	defineSymbol(text$1, main, textord, "\u0023", "\\#");
	defineSymbol(math, main, textord, "\u0026", "\\&");
	defineSymbol(text$1, main, textord, "\u0026", "\\&");
	defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
	defineSymbol(math, main, textord, "\u2200", "\\forall", true);
	defineSymbol(math, main, textord, "\u210f", "\\hbar", true);
	defineSymbol(math, main, textord, "\u2203", "\\exists", true);
	defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
	defineSymbol(math, main, textord, "\u266d", "\\flat", true);
	defineSymbol(math, main, textord, "\u2113", "\\ell", true);
	defineSymbol(math, main, textord, "\u266e", "\\natural", true);
	defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
	defineSymbol(math, main, textord, "\u2118", "\\wp", true);
	defineSymbol(math, main, textord, "\u266f", "\\sharp", true);
	defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
	defineSymbol(math, main, textord, "\u211c", "\\Re", true);
	defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
	defineSymbol(math, main, textord, "\u2111", "\\Im", true);
	defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
	defineSymbol(math, main, textord, "\u00a7", "\\S", true);
	defineSymbol(text$1, main, textord, "\u00a7", "\\S");
	defineSymbol(math, main, textord, "\u00b6", "\\P", true);
	defineSymbol(text$1, main, textord, "\u00b6", "\\P"); // Math and Text

	defineSymbol(math, main, textord, "\u2020", "\\dag");
	defineSymbol(text$1, main, textord, "\u2020", "\\dag");
	defineSymbol(text$1, main, textord, "\u2020", "\\textdagger");
	defineSymbol(math, main, textord, "\u2021", "\\ddag");
	defineSymbol(text$1, main, textord, "\u2021", "\\ddag");
	defineSymbol(text$1, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

	defineSymbol(math, main, close, "\u23b1", "\\rmoustache", true);
	defineSymbol(math, main, open, "\u23b0", "\\lmoustache", true);
	defineSymbol(math, main, close, "\u27ef", "\\rgroup", true);
	defineSymbol(math, main, open, "\u27ee", "\\lgroup", true); // Binary Operators

	defineSymbol(math, main, bin, "\u2213", "\\mp", true);
	defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
	defineSymbol(math, main, bin, "\u228e", "\\uplus", true);
	defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
	defineSymbol(math, main, bin, "\u2217", "\\ast");
	defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
	defineSymbol(math, main, bin, "\u25ef", "\\bigcirc", true);
	defineSymbol(math, main, bin, "\u2219", "\\bullet");
	defineSymbol(math, main, bin, "\u2021", "\\ddagger");
	defineSymbol(math, main, bin, "\u2240", "\\wr", true);
	defineSymbol(math, main, bin, "\u2a3f", "\\amalg");
	defineSymbol(math, main, bin, "\u0026", "\\And"); // from amsmath
	// Arrow Symbols

	defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow", true);
	defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow", true);
	defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow", true);
	defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow", true);
	defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow", true);
	defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow", true);
	defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21a6", "\\mapsto", true);
	defineSymbol(math, main, rel, "\u27fc", "\\longmapsto", true);
	defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
	defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow", true);
	defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow", true);
	defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
	defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup", true);
	defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup", true);
	defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
	defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown", true);
	defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown", true);
	defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
	defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons", true); // AMS Negated Binary Relations

	defineSymbol(math, ams, rel, "\u226e", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

	defineSymbol(math, ams, rel, "\ue010", "\\@nleqslant");
	defineSymbol(math, ams, rel, "\ue011", "\\@nleqq");
	defineSymbol(math, ams, rel, "\u2a87", "\\lneq", true);
	defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
	defineSymbol(math, ams, rel, "\ue00c", "\\@lvertneqq");
	defineSymbol(math, ams, rel, "\u22e6", "\\lnsim", true);
	defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox", true);
	defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e0", "\\npreceq", true);
	defineSymbol(math, ams, rel, "\u22e8", "\\precnsim", true);
	defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox", true);
	defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
	defineSymbol(math, ams, rel, "\ue006", "\\@nshortmid");
	defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
	defineSymbol(math, ams, rel, "\u22ac", "\\nvdash", true);
	defineSymbol(math, ams, rel, "\u22ad", "\\nvDash", true);
	defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
	defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq", true);
	defineSymbol(math, ams, rel, "\u228a", "\\subsetneq", true);
	defineSymbol(math, ams, rel, "\ue01a", "\\@varsubsetneq");
	defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq", true);
	defineSymbol(math, ams, rel, "\ue017", "\\@varsubsetneqq");
	defineSymbol(math, ams, rel, "\u226f", "\\ngtr", true);
	defineSymbol(math, ams, rel, "\ue00f", "\\@ngeqslant");
	defineSymbol(math, ams, rel, "\ue00e", "\\@ngeqq");
	defineSymbol(math, ams, rel, "\u2a88", "\\gneq", true);
	defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
	defineSymbol(math, ams, rel, "\ue00d", "\\@gvertneqq");
	defineSymbol(math, ams, rel, "\u22e7", "\\gnsim", true);
	defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox", true);
	defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq", true);
	defineSymbol(math, ams, rel, "\u22e9", "\\succnsim", true);
	defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
	defineSymbol(math, ams, rel, "\ue007", "\\@nshortparallel");
	defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
	defineSymbol(math, ams, rel, "\u22af", "\\nVDash", true);
	defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
	defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq", true);
	defineSymbol(math, ams, rel, "\ue018", "\\@nsupseteqq");
	defineSymbol(math, ams, rel, "\u228b", "\\supsetneq", true);
	defineSymbol(math, ams, rel, "\ue01b", "\\@varsupsetneq");
	defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq", true);
	defineSymbol(math, ams, rel, "\ue019", "\\@varsupsetneqq");
	defineSymbol(math, ams, rel, "\u22ae", "\\nVdash", true);
	defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq", true);
	defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq", true);
	defineSymbol(math, ams, rel, "\ue016", "\\@nsubseteqq");
	defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
	defineSymbol(math, ams, bin, "\u22b5", "\\unrhd"); // AMS Negated Arrows

	defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow", true);
	defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow", true);
	defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow", true);
	defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow", true);
	defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow", true);
	defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow", true); // AMS Misc

	defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
	defineSymbol(math, ams, textord, "\u210f", "\\hslash");
	defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
	defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
	defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
	defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(text$1, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
	defineSymbol(math, ams, textord, "\u2204", "\\nexists");
	defineSymbol(math, ams, textord, "\u2127", "\\mho");
	defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
	defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
	defineSymbol(math, ams, textord, "\u2035", "\\backprime");
	defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
	defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
	defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
	defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
	defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
	defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
	defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

	defineSymbol(math, ams, textord, "\u00f0", "\\eth", true);
	defineSymbol(text$1, main, textord, "\u00f0", "\u00f0");
	defineSymbol(math, ams, textord, "\u2571", "\\diagup");
	defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
	defineSymbol(math, ams, textord, "\u25a1", "\\square");
	defineSymbol(math, ams, textord, "\u25a1", "\\Box");
	defineSymbol(math, ams, textord, "\u25ca", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

	defineSymbol(math, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(text$1, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
	defineSymbol(text$1, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

	defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
	defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
	defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

	defineSymbol(math, ams, textord, "\u03dd", "\\digamma", true);
	defineSymbol(math, ams, textord, "\u03f0", "\\varkappa"); // AMS Delimiters

	defineSymbol(math, ams, open, "\u250c", "\\@ulcorner", true);
	defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
	defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
	defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

	defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
	defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant", true);
	defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless", true);
	defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
	defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox", true);
	defineSymbol(math, ams, rel, "\u224a", "\\approxeq", true);
	defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
	defineSymbol(math, ams, rel, "\u22d8", "\\lll", true);
	defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
	defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr", true);
	defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr", true);
	defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
	defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
	defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
	defineSymbol(math, ams, rel, "\u223d", "\\backsim", true);
	defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq", true);
	defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq", true);
	defineSymbol(math, ams, rel, "\u22d0", "\\Subset", true);
	defineSymbol(math, ams, rel, "\u228f", "\\sqsubset", true);
	defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq", true);
	defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec", true);
	defineSymbol(math, ams, rel, "\u227e", "\\precsim", true);
	defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox", true);
	defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
	defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
	defineSymbol(math, ams, rel, "\u22a8", "\\vDash", true);
	defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash", true);
	defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
	defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
	defineSymbol(math, ams, rel, "\u224f", "\\bumpeq", true);
	defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq", true);
	defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
	defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant", true);
	defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr", true);
	defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
	defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox", true);
	defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
	defineSymbol(math, ams, rel, "\u22d9", "\\ggg", true);
	defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
	defineSymbol(math, ams, rel, "\u22db", "\\gtreqless", true);
	defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless", true);
	defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
	defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
	defineSymbol(math, ams, rel, "\u225c", "\\triangleq", true);
	defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
	defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
	defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq", true);
	defineSymbol(math, ams, rel, "\u22d1", "\\Supset", true);
	defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
	defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq", true);
	defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc", true);
	defineSymbol(math, ams, rel, "\u227f", "\\succsim", true);
	defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox", true);
	defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
	defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
	defineSymbol(math, ams, rel, "\u22a9", "\\Vdash", true);
	defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
	defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
	defineSymbol(math, ams, rel, "\u226c", "\\between", true);
	defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork", true);
	defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
	defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
	defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
	defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2235", "\\because", true);
	defineSymbol(math, ams, rel, "\u22d8", "\\llless");
	defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
	defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
	defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
	defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
	defineSymbol(math, main, rel, "\u22c8", "\\Join");
	defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

	defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
	defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
	defineSymbol(math, ams, bin, "\u22d2", "\\Cap", true);
	defineSymbol(math, ams, bin, "\u22d3", "\\Cup", true);
	defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge", true);
	defineSymbol(math, ams, bin, "\u229f", "\\boxminus", true);
	defineSymbol(math, ams, bin, "\u229e", "\\boxplus", true);
	defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes", true);
	defineSymbol(math, ams, bin, "\u22c9", "\\ltimes", true);
	defineSymbol(math, ams, bin, "\u22ca", "\\rtimes", true);
	defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge", true);
	defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee", true);
	defineSymbol(math, ams, bin, "\u229d", "\\circleddash", true);
	defineSymbol(math, ams, bin, "\u229b", "\\circledast", true);
	defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
	defineSymbol(math, ams, bin, "\u22ba", "\\intercal", true);
	defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
	defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
	defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes", true); // AMS Arrows
	// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
	// We'll map it to AMS function \dashrightarrow. It produces the same atom.

	defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow", true);
	defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows", true);
	defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows", true);
	defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow", true);
	defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow", true);
	defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft", true);
	defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons", true);
	defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft", true);
	defineSymbol(math, ams, rel, "\u21b0", "\\Lsh", true);
	defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows", true);
	defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft", true);
	defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft", true);
	defineSymbol(math, main, rel, "\u22b6", "\\origof", true); // not in font

	defineSymbol(math, main, rel, "\u22b7", "\\imageof", true); // not in font

	defineSymbol(math, ams, rel, "\u22b8", "\\multimap", true);
	defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows", true);
	defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows", true);
	defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow", true);
	defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright", true);
	defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright", true);
	defineSymbol(math, ams, rel, "\u21b1", "\\Rsh", true);
	defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows", true);
	defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright", true);
	defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
	defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow", true);
	defineSymbol(math, ams, rel, "\u21be", "\\restriction");
	defineSymbol(math, main, textord, "\u2018", "`");
	defineSymbol(math, main, textord, "$", "\\$");
	defineSymbol(text$1, main, textord, "$", "\\$");
	defineSymbol(text$1, main, textord, "$", "\\textdollar");
	defineSymbol(math, main, textord, "%", "\\%");
	defineSymbol(text$1, main, textord, "%", "\\%");
	defineSymbol(math, main, textord, "_", "\\_");
	defineSymbol(text$1, main, textord, "_", "\\_");
	defineSymbol(text$1, main, textord, "_", "\\textunderscore");
	defineSymbol(math, main, textord, "\u2220", "\\angle", true);
	defineSymbol(math, main, textord, "\u221e", "\\infty", true);
	defineSymbol(math, main, textord, "\u2032", "\\prime");
	defineSymbol(math, main, textord, "\u25b3", "\\triangle");
	defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
	defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
	defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
	defineSymbol(math, main, textord, "\u039b", "\\Lambda", true);
	defineSymbol(math, main, textord, "\u039e", "\\Xi", true);
	defineSymbol(math, main, textord, "\u03a0", "\\Pi", true);
	defineSymbol(math, main, textord, "\u03a3", "\\Sigma", true);
	defineSymbol(math, main, textord, "\u03a5", "\\Upsilon", true);
	defineSymbol(math, main, textord, "\u03a6", "\\Phi", true);
	defineSymbol(math, main, textord, "\u03a8", "\\Psi", true);
	defineSymbol(math, main, textord, "\u03a9", "\\Omega", true);
	defineSymbol(math, main, textord, "A", "\u0391");
	defineSymbol(math, main, textord, "B", "\u0392");
	defineSymbol(math, main, textord, "E", "\u0395");
	defineSymbol(math, main, textord, "Z", "\u0396");
	defineSymbol(math, main, textord, "H", "\u0397");
	defineSymbol(math, main, textord, "I", "\u0399");
	defineSymbol(math, main, textord, "K", "\u039A");
	defineSymbol(math, main, textord, "M", "\u039C");
	defineSymbol(math, main, textord, "N", "\u039D");
	defineSymbol(math, main, textord, "O", "\u039F");
	defineSymbol(math, main, textord, "P", "\u03A1");
	defineSymbol(math, main, textord, "T", "\u03A4");
	defineSymbol(math, main, textord, "X", "\u03A7");
	defineSymbol(math, main, textord, "\u00ac", "\\neg", true);
	defineSymbol(math, main, textord, "\u00ac", "\\lnot");
	defineSymbol(math, main, textord, "\u22a4", "\\top");
	defineSymbol(math, main, textord, "\u22a5", "\\bot");
	defineSymbol(math, main, textord, "\u2205", "\\emptyset");
	defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
	defineSymbol(math, main, mathord, "\u03b1", "\\alpha", true);
	defineSymbol(math, main, mathord, "\u03b2", "\\beta", true);
	defineSymbol(math, main, mathord, "\u03b3", "\\gamma", true);
	defineSymbol(math, main, mathord, "\u03b4", "\\delta", true);
	defineSymbol(math, main, mathord, "\u03f5", "\\epsilon", true);
	defineSymbol(math, main, mathord, "\u03b6", "\\zeta", true);
	defineSymbol(math, main, mathord, "\u03b7", "\\eta", true);
	defineSymbol(math, main, mathord, "\u03b8", "\\theta", true);
	defineSymbol(math, main, mathord, "\u03b9", "\\iota", true);
	defineSymbol(math, main, mathord, "\u03ba", "\\kappa", true);
	defineSymbol(math, main, mathord, "\u03bb", "\\lambda", true);
	defineSymbol(math, main, mathord, "\u03bc", "\\mu", true);
	defineSymbol(math, main, mathord, "\u03bd", "\\nu", true);
	defineSymbol(math, main, mathord, "\u03be", "\\xi", true);
	defineSymbol(math, main, mathord, "\u03bf", "\\omicron", true);
	defineSymbol(math, main, mathord, "\u03c0", "\\pi", true);
	defineSymbol(math, main, mathord, "\u03c1", "\\rho", true);
	defineSymbol(math, main, mathord, "\u03c3", "\\sigma", true);
	defineSymbol(math, main, mathord, "\u03c4", "\\tau", true);
	defineSymbol(math, main, mathord, "\u03c5", "\\upsilon", true);
	defineSymbol(math, main, mathord, "\u03d5", "\\phi", true);
	defineSymbol(math, main, mathord, "\u03c7", "\\chi", true);
	defineSymbol(math, main, mathord, "\u03c8", "\\psi", true);
	defineSymbol(math, main, mathord, "\u03c9", "\\omega", true);
	defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon", true);
	defineSymbol(math, main, mathord, "\u03d1", "\\vartheta", true);
	defineSymbol(math, main, mathord, "\u03d6", "\\varpi", true);
	defineSymbol(math, main, mathord, "\u03f1", "\\varrho", true);
	defineSymbol(math, main, mathord, "\u03c2", "\\varsigma", true);
	defineSymbol(math, main, mathord, "\u03c6", "\\varphi", true);
	defineSymbol(math, main, bin, "\u2217", "*");
	defineSymbol(math, main, bin, "+", "+");
	defineSymbol(math, main, bin, "\u2212", "-");
	defineSymbol(math, main, bin, "\u22c5", "\\cdot", true);
	defineSymbol(math, main, bin, "\u2218", "\\circ");
	defineSymbol(math, main, bin, "\u00f7", "\\div", true);
	defineSymbol(math, main, bin, "\u00b1", "\\pm", true);
	defineSymbol(math, main, bin, "\u00d7", "\\times", true);
	defineSymbol(math, main, bin, "\u2229", "\\cap", true);
	defineSymbol(math, main, bin, "\u222a", "\\cup", true);
	defineSymbol(math, main, bin, "\u2216", "\\setminus");
	defineSymbol(math, main, bin, "\u2227", "\\land");
	defineSymbol(math, main, bin, "\u2228", "\\lor");
	defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
	defineSymbol(math, main, bin, "\u2228", "\\vee", true);
	defineSymbol(math, main, textord, "\u221a", "\\surd");
	defineSymbol(math, main, open, "\u27e8", "\\langle", true);
	defineSymbol(math, main, open, "\u2223", "\\lvert");
	defineSymbol(math, main, open, "\u2225", "\\lVert");
	defineSymbol(math, main, close, "?", "?");
	defineSymbol(math, main, close, "!", "!");
	defineSymbol(math, main, close, "\u27e9", "\\rangle", true);
	defineSymbol(math, main, close, "\u2223", "\\rvert");
	defineSymbol(math, main, close, "\u2225", "\\rVert");
	defineSymbol(math, main, rel, "=", "=");
	defineSymbol(math, main, rel, ":", ":");
	defineSymbol(math, main, rel, "\u2248", "\\approx", true);
	defineSymbol(math, main, rel, "\u2245", "\\cong", true);
	defineSymbol(math, main, rel, "\u2265", "\\ge");
	defineSymbol(math, main, rel, "\u2265", "\\geq", true);
	defineSymbol(math, main, rel, "\u2190", "\\gets");
	defineSymbol(math, main, rel, ">", "\\gt", true);
	defineSymbol(math, main, rel, "\u2208", "\\in", true);
	defineSymbol(math, main, rel, "\ue020", "\\@not");
	defineSymbol(math, main, rel, "\u2282", "\\subset", true);
	defineSymbol(math, main, rel, "\u2283", "\\supset", true);
	defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
	defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
	defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
	defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
	defineSymbol(math, main, rel, "\u22a8", "\\models");
	defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
	defineSymbol(math, main, rel, "\u2264", "\\le");
	defineSymbol(math, main, rel, "\u2264", "\\leq", true);
	defineSymbol(math, main, rel, "<", "\\lt", true);
	defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
	defineSymbol(math, main, rel, "\u2192", "\\to");
	defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
	defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
	defineSymbol(math, main, spacing, "\u00a0", "\\ ");
	defineSymbol(math, main, spacing, "\u00a0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

	defineSymbol(math, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(text$1, main, spacing, "\u00a0", "\\ ");
	defineSymbol(text$1, main, spacing, "\u00a0", " ");
	defineSymbol(text$1, main, spacing, "\u00a0", "\\space");
	defineSymbol(text$1, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(math, main, spacing, null, "\\nobreak");
	defineSymbol(math, main, spacing, null, "\\allowbreak");
	defineSymbol(math, main, punct, ",", ",");
	defineSymbol(math, main, punct, ";", ";");
	defineSymbol(math, ams, bin, "\u22bc", "\\barwedge", true);
	defineSymbol(math, ams, bin, "\u22bb", "\\veebar", true);
	defineSymbol(math, main, bin, "\u2299", "\\odot", true);
	defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
	defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
	defineSymbol(math, main, textord, "\u2202", "\\partial", true);
	defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
	defineSymbol(math, ams, bin, "\u229a", "\\circledcirc", true);
	defineSymbol(math, ams, bin, "\u22a1", "\\boxdot", true);
	defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");
	defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");
	defineSymbol(math, main, bin, "\u2020", "\\dagger");
	defineSymbol(math, main, bin, "\u22c4", "\\diamond");
	defineSymbol(math, main, bin, "\u22c6", "\\star");
	defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");
	defineSymbol(math, main, bin, "\u25b9", "\\triangleright");
	defineSymbol(math, main, open, "{", "\\{");
	defineSymbol(text$1, main, textord, "{", "\\{");
	defineSymbol(text$1, main, textord, "{", "\\textbraceleft");
	defineSymbol(math, main, close, "}", "\\}");
	defineSymbol(text$1, main, textord, "}", "\\}");
	defineSymbol(text$1, main, textord, "}", "\\textbraceright");
	defineSymbol(math, main, open, "{", "\\lbrace");
	defineSymbol(math, main, close, "}", "\\rbrace");
	defineSymbol(math, main, open, "[", "\\lbrack", true);
	defineSymbol(text$1, main, textord, "[", "\\lbrack", true);
	defineSymbol(math, main, close, "]", "\\rbrack", true);
	defineSymbol(text$1, main, textord, "]", "\\rbrack", true);
	defineSymbol(math, main, open, "(", "\\lparen", true);
	defineSymbol(math, main, close, ")", "\\rparen", true);
	defineSymbol(text$1, main, textord, "<", "\\textless", true); // in T1 fontenc

	defineSymbol(text$1, main, textord, ">", "\\textgreater", true); // in T1 fontenc

	defineSymbol(math, main, open, "\u230a", "\\lfloor", true);
	defineSymbol(math, main, close, "\u230b", "\\rfloor", true);
	defineSymbol(math, main, open, "\u2308", "\\lceil", true);
	defineSymbol(math, main, close, "\u2309", "\\rceil", true);
	defineSymbol(math, main, textord, "\\", "\\backslash");
	defineSymbol(math, main, textord, "\u2223", "|");
	defineSymbol(math, main, textord, "\u2223", "\\vert");
	defineSymbol(text$1, main, textord, "|", "\\textbar", true); // in T1 fontenc

	defineSymbol(math, main, textord, "\u2225", "\\|");
	defineSymbol(math, main, textord, "\u2225", "\\Vert");
	defineSymbol(text$1, main, textord, "\u2225", "\\textbardbl");
	defineSymbol(text$1, main, textord, "~", "\\textasciitilde");
	defineSymbol(text$1, main, textord, "\\", "\\textbackslash");
	defineSymbol(text$1, main, textord, "^", "\\textasciicircum");
	defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
	defineSymbol(math, main, rel, "\u21d1", "\\Uparrow", true);
	defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
	defineSymbol(math, main, rel, "\u21d3", "\\Downarrow", true);
	defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
	defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow", true);
	defineSymbol(math, main, op, "\u2210", "\\coprod");
	defineSymbol(math, main, op, "\u22c1", "\\bigvee");
	defineSymbol(math, main, op, "\u22c0", "\\bigwedge");
	defineSymbol(math, main, op, "\u2a04", "\\biguplus");
	defineSymbol(math, main, op, "\u22c2", "\\bigcap");
	defineSymbol(math, main, op, "\u22c3", "\\bigcup");
	defineSymbol(math, main, op, "\u222b", "\\int");
	defineSymbol(math, main, op, "\u222b", "\\intop");
	defineSymbol(math, main, op, "\u222c", "\\iint");
	defineSymbol(math, main, op, "\u222d", "\\iiint");
	defineSymbol(math, main, op, "\u220f", "\\prod");
	defineSymbol(math, main, op, "\u2211", "\\sum");
	defineSymbol(math, main, op, "\u2a02", "\\bigotimes");
	defineSymbol(math, main, op, "\u2a01", "\\bigoplus");
	defineSymbol(math, main, op, "\u2a00", "\\bigodot");
	defineSymbol(math, main, op, "\u222e", "\\oint");
	defineSymbol(math, main, op, "\u222f", "\\oiint");
	defineSymbol(math, main, op, "\u2230", "\\oiiint");
	defineSymbol(math, main, op, "\u2a06", "\\bigsqcup");
	defineSymbol(math, main, op, "\u222b", "\\smallint");
	defineSymbol(text$1, main, inner, "\u2026", "\\textellipsis");
	defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
	defineSymbol(text$1, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u22ef", "\\@cdots", true);
	defineSymbol(math, main, inner, "\u22f1", "\\ddots", true);
	defineSymbol(math, main, textord, "\u22ee", "\\varvdots"); // \vdots is a macro

	defineSymbol(math, main, accent, "\u02ca", "\\acute");
	defineSymbol(math, main, accent, "\u02cb", "\\grave");
	defineSymbol(math, main, accent, "\u00a8", "\\ddot");
	defineSymbol(math, main, accent, "\u007e", "\\tilde");
	defineSymbol(math, main, accent, "\u02c9", "\\bar");
	defineSymbol(math, main, accent, "\u02d8", "\\breve");
	defineSymbol(math, main, accent, "\u02c7", "\\check");
	defineSymbol(math, main, accent, "\u005e", "\\hat");
	defineSymbol(math, main, accent, "\u20d7", "\\vec");
	defineSymbol(math, main, accent, "\u02d9", "\\dot");
	defineSymbol(math, main, accent, "\u02da", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

	defineSymbol(math, main, mathord, "\ue131", "\\@imath");
	defineSymbol(math, main, mathord, "\ue237", "\\@jmath");
	defineSymbol(math, main, textord, "\u0131", "\u0131");
	defineSymbol(math, main, textord, "\u0237", "\u0237");
	defineSymbol(text$1, main, textord, "\u0131", "\\i", true);
	defineSymbol(text$1, main, textord, "\u0237", "\\j", true);
	defineSymbol(text$1, main, textord, "\u00df", "\\ss", true);
	defineSymbol(text$1, main, textord, "\u00e6", "\\ae", true);
	defineSymbol(text$1, main, textord, "\u0153", "\\oe", true);
	defineSymbol(text$1, main, textord, "\u00f8", "\\o", true);
	defineSymbol(text$1, main, textord, "\u00c6", "\\AE", true);
	defineSymbol(text$1, main, textord, "\u0152", "\\OE", true);
	defineSymbol(text$1, main, textord, "\u00d8", "\\O", true);
	defineSymbol(text$1, main, accent, "\u02ca", "\\'"); // acute

	defineSymbol(text$1, main, accent, "\u02cb", "\\`"); // grave

	defineSymbol(text$1, main, accent, "\u02c6", "\\^"); // circumflex

	defineSymbol(text$1, main, accent, "\u02dc", "\\~"); // tilde

	defineSymbol(text$1, main, accent, "\u02c9", "\\="); // macron

	defineSymbol(text$1, main, accent, "\u02d8", "\\u"); // breve

	defineSymbol(text$1, main, accent, "\u02d9", "\\."); // dot above

	defineSymbol(text$1, main, accent, "\u02da", "\\r"); // ring above

	defineSymbol(text$1, main, accent, "\u02c7", "\\v"); // caron

	defineSymbol(text$1, main, accent, "\u00a8", '\\"'); // diaresis

	defineSymbol(text$1, main, accent, "\u02dd", "\\H"); // double acute

	defineSymbol(text$1, main, accent, "\u25ef", "\\textcircled"); // \bigcirc glyph
	// These ligatures are detected and created in Parser.js's `formLigatures`.

	var ligatures = {
	  "--": true,
	  "---": true,
	  "``": true,
	  "''": true
	};
	defineSymbol(text$1, main, textord, "\u2013", "--", true);
	defineSymbol(text$1, main, textord, "\u2013", "\\textendash");
	defineSymbol(text$1, main, textord, "\u2014", "---", true);
	defineSymbol(text$1, main, textord, "\u2014", "\\textemdash");
	defineSymbol(text$1, main, textord, "\u2018", "`", true);
	defineSymbol(text$1, main, textord, "\u2018", "\\textquoteleft");
	defineSymbol(text$1, main, textord, "\u2019", "'", true);
	defineSymbol(text$1, main, textord, "\u2019", "\\textquoteright");
	defineSymbol(text$1, main, textord, "\u201c", "``", true);
	defineSymbol(text$1, main, textord, "\u201c", "\\textquotedblleft");
	defineSymbol(text$1, main, textord, "\u201d", "''", true);
	defineSymbol(text$1, main, textord, "\u201d", "\\textquotedblright"); //  \degree from gensymb package

	defineSymbol(math, main, textord, "\u00b0", "\\degree", true);
	defineSymbol(text$1, main, textord, "\u00b0", "\\degree"); // \textdegree from inputenc package

	defineSymbol(text$1, main, textord, "\u00b0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
	// mode, but among our fonts, only Main-Regular defines this character "163".

	defineSymbol(math, main, textord, "\u00a3", "\\pounds");
	defineSymbol(math, main, textord, "\u00a3", "\\mathsterling", true);
	defineSymbol(text$1, main, textord, "\u00a3", "\\pounds");
	defineSymbol(text$1, main, textord, "\u00a3", "\\textsterling", true);
	defineSymbol(math, ams, textord, "\u2720", "\\maltese");
	defineSymbol(text$1, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
	// All of these are textords in math mode

	var mathTextSymbols = "0123456789/@.\"";

	for (var i = 0; i < mathTextSymbols.length; i++) {
	  var ch = mathTextSymbols.charAt(i);
	  defineSymbol(math, main, textord, ch, ch);
	} // All of these are textords in text mode


	var textSymbols = "0123456789!@*()-=+\";:?/.,";

	for (var _i = 0; _i < textSymbols.length; _i++) {
	  var _ch = textSymbols.charAt(_i);

	  defineSymbol(text$1, main, textord, _ch, _ch);
	} // All of these are textords in text mode, and mathords in math mode


	var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	for (var _i2 = 0; _i2 < letters.length; _i2++) {
	  var _ch2 = letters.charAt(_i2);

	  defineSymbol(math, main, mathord, _ch2, _ch2);
	  defineSymbol(text$1, main, textord, _ch2, _ch2);
	} // Blackboard bold and script letters in Unicode range


	defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

	defineSymbol(text$1, ams, textord, "C", "\u2102");
	defineSymbol(math, ams, textord, "H", "\u210D");
	defineSymbol(text$1, ams, textord, "H", "\u210D");
	defineSymbol(math, ams, textord, "N", "\u2115");
	defineSymbol(text$1, ams, textord, "N", "\u2115");
	defineSymbol(math, ams, textord, "P", "\u2119");
	defineSymbol(text$1, ams, textord, "P", "\u2119");
	defineSymbol(math, ams, textord, "Q", "\u211A");
	defineSymbol(text$1, ams, textord, "Q", "\u211A");
	defineSymbol(math, ams, textord, "R", "\u211D");
	defineSymbol(text$1, ams, textord, "R", "\u211D");
	defineSymbol(math, ams, textord, "Z", "\u2124");
	defineSymbol(text$1, ams, textord, "Z", "\u2124");
	defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

	defineSymbol(text$1, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
	// We support some letters in the Unicode range U+1D400 to U+1D7FF,
	// Mathematical Alphanumeric Symbols.
	// Some editors do not deal well with wide characters. So don't write the
	// string into this file. Instead, create the string from the surrogate pair.

	var wideChar = "";

	for (var _i3 = 0; _i3 < letters.length; _i3++) {
	  var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
	  // 0xD835 is the high surrogate for all letters in the range we support.
	  // 0xDC00 is the low surrogate for bold A.


	  wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text$1, main, textord, _ch3, wideChar);

	  if (_i3 < 26) {
	    // KaTeX fonts have only capital letters for blackboard bold and script.
	    // See exception for k below.
	    wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text$1, main, textord, _ch3, wideChar);
	    wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text$1, main, textord, _ch3, wideChar);
	  } // TODO: Add bold script when it is supported by a KaTeX font.

	} // "k" is the only double struck lower case letter in the KaTeX fonts.


	wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

	defineSymbol(math, main, mathord, "k", wideChar);
	defineSymbol(text$1, main, textord, "k", wideChar); // Next, some wide character numerals

	for (var _i4 = 0; _i4 < 10; _i4++) {
	  var _ch4 = _i4.toString();

	  wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text$1, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text$1, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text$1, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text$1, main, textord, _ch4, wideChar);
	} // We add these Latin-1 letters as symbols for backwards-compatibility,
	// but they are not actually in the font, nor are they supported by the
	// Unicode accent mechanism, so they fall back to Times font and look ugly.
	// TODO(edemaine): Fix this.


	var extraLatin = "\u00c7\u00d0\u00de\u00e7\u00fe";

	for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
	  var _ch5 = extraLatin.charAt(_i5);

	  defineSymbol(math, main, mathord, _ch5, _ch5);
	  defineSymbol(text$1, main, textord, _ch5, _ch5);
	}

	/**
	 * This file provides support for Unicode range U+1D400 to U+1D7FF,
	 * Mathematical Alphanumeric Symbols.
	 *
	 * Function wideCharacterFont takes a wide character as input and returns
	 * the font information necessary to render it properly.
	 */
	/**
	 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
	 * That document sorts characters into groups by font type, say bold or italic.
	 *
	 * In the arrays below, each subarray consists three elements:
	 *      * The CSS class of that group when in math mode.
	 *      * The CSS class of that group when in text mode.
	 *      * The font name, so that KaTeX can get font metrics.
	 */

	var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
	["mathbf", "textbf", "Main-Bold"], // a-z bold upright
	["mathnormal", "textit", "Math-Italic"], // A-Z italic
	["mathnormal", "textit", "Math-Italic"], // a-z italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
	// Map fancy A-Z letters to script, not calligraphic.
	// This aligns with unicode-math and math fonts (except Cambria Math).
	["mathscr", "textscr", "Script-Regular"], // A-Z script
	["", "", ""], // a-z script.  No font
	["", "", ""], // A-Z bold script. No font
	["", "", ""], // a-z bold script. No font
	["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
	["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
	["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
	["mathbb", "textbb", "AMS-Regular"], // k double-struck
	["", "", ""], // A-Z bold Fraktur No font metrics
	["", "", ""], // a-z bold Fraktur.   No font.
	["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
	["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
	["", "", ""], // A-Z bold italic sans. No font
	["", "", ""], // a-z bold italic sans. No font
	["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
	["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
	];
	var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
	["", "", ""], // 0-9 double-struck. No KaTeX font.
	["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
	["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
	];
	var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
	  // IE doesn't support codePointAt(). So work with the surrogate pair.
	  var H = wideChar.charCodeAt(0); // high surrogate

	  var L = wideChar.charCodeAt(1); // low surrogate

	  var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
	  var j = mode === "math" ? 0 : 1; // column index for CSS class.

	  if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
	    // wideLatinLetterData contains exactly 26 chars on each row.
	    // So we can calculate the relevant row. No traverse necessary.
	    var i = Math.floor((codePoint - 0x1D400) / 26);
	    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
	  } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
	    // Numerals, ten per row.
	    var _i = Math.floor((codePoint - 0x1D7CE) / 10);

	    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
	  } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
	    // dotless i or j
	    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
	  } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
	    // Greek letters. Not supported, yet.
	    return ["", ""];
	  } else {
	    // We don't support any wide characters outside 1D400–1D7FF.
	    throw new ParseError("Unsupported character: " + wideChar);
	  }
	};

	/**
	 * This file contains information about the options that the Parser carries
	 * around with it while parsing. Data is held in an `Options` object, and when
	 * recursing, a new `Options` object can be created with the `.with*` and
	 * `.reset` functions.
	 */
	var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
	// The size mappings are taken from TeX with \normalsize=10pt.
	[1, 1, 1], // size1: [5, 5, 5]              \tiny
	[2, 1, 1], // size2: [6, 5, 5]
	[3, 1, 1], // size3: [7, 5, 5]              \scriptsize
	[4, 2, 1], // size4: [8, 6, 5]              \footnotesize
	[5, 2, 1], // size5: [9, 6, 5]              \small
	[6, 3, 1], // size6: [10, 7, 5]             \normalsize
	[7, 4, 2], // size7: [12, 8, 6]             \large
	[8, 6, 3], // size8: [14.4, 10, 7]          \Large
	[9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
	[10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
	[11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
	];
	var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
	// you change size indexes, change that function.
	0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

	var sizeAtStyle = function sizeAtStyle(size, style) {
	  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
	}; // In these types, "" (empty string) means "no change".


	/**
	 * This is the main options class. It contains the current style, size, color,
	 * and font.
	 *
	 * Options objects should not be modified. To create a new Options with
	 * different properties, call a `.having*` method.
	 */
	class Options {
	  // A font family applies to a group of fonts (i.e. SansSerif), while a font
	  // represents a specific font (i.e. SansSerif Bold).
	  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

	  /**
	   * The base size index.
	   */
	  constructor(data) {
	    this.style = void 0;
	    this.color = void 0;
	    this.size = void 0;
	    this.textSize = void 0;
	    this.phantom = void 0;
	    this.font = void 0;
	    this.fontFamily = void 0;
	    this.fontWeight = void 0;
	    this.fontShape = void 0;
	    this.sizeMultiplier = void 0;
	    this.maxSize = void 0;
	    this.minRuleThickness = void 0;
	    this._fontMetrics = void 0;
	    this.style = data.style;
	    this.color = data.color;
	    this.size = data.size || Options.BASESIZE;
	    this.textSize = data.textSize || this.size;
	    this.phantom = !!data.phantom;
	    this.font = data.font || "";
	    this.fontFamily = data.fontFamily || "";
	    this.fontWeight = data.fontWeight || '';
	    this.fontShape = data.fontShape || '';
	    this.sizeMultiplier = sizeMultipliers[this.size - 1];
	    this.maxSize = data.maxSize;
	    this.minRuleThickness = data.minRuleThickness;
	    this._fontMetrics = undefined;
	  }
	  /**
	   * Returns a new options object with the same properties as "this".  Properties
	   * from "extension" will be copied to the new options object.
	   */


	  extend(extension) {
	    var data = {
	      style: this.style,
	      size: this.size,
	      textSize: this.textSize,
	      color: this.color,
	      phantom: this.phantom,
	      font: this.font,
	      fontFamily: this.fontFamily,
	      fontWeight: this.fontWeight,
	      fontShape: this.fontShape,
	      maxSize: this.maxSize,
	      minRuleThickness: this.minRuleThickness
	    };

	    for (var key in extension) {
	      if (extension.hasOwnProperty(key)) {
	        data[key] = extension[key];
	      }
	    }

	    return new Options(data);
	  }
	  /**
	   * Return an options object with the given style. If `this.style === style`,
	   * returns `this`.
	   */


	  havingStyle(style) {
	    if (this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: sizeAtStyle(this.textSize, style)
	      });
	    }
	  }
	  /**
	   * Return an options object with a cramped version of the current style. If
	   * the current style is cramped, returns `this`.
	   */


	  havingCrampedStyle() {
	    return this.havingStyle(this.style.cramp());
	  }
	  /**
	   * Return an options object with the given size and in at least `\textstyle`.
	   * Returns `this` if appropriate.
	   */


	  havingSize(size) {
	    if (this.size === size && this.textSize === size) {
	      return this;
	    } else {
	      return this.extend({
	        style: this.style.text(),
	        size: size,
	        textSize: size,
	        sizeMultiplier: sizeMultipliers[size - 1]
	      });
	    }
	  }
	  /**
	   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
	   * changes to at least `\textstyle`.
	   */


	  havingBaseStyle(style) {
	    style = style || this.style.text();
	    var wantSize = sizeAtStyle(Options.BASESIZE, style);

	    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: wantSize
	      });
	    }
	  }
	  /**
	   * Remove the effect of sizing changes such as \Huge.
	   * Keep the effect of the current style, such as \scriptstyle.
	   */


	  havingBaseSizing() {
	    var size;

	    switch (this.style.id) {
	      case 4:
	      case 5:
	        size = 3; // normalsize in scriptstyle

	        break;

	      case 6:
	      case 7:
	        size = 1; // normalsize in scriptscriptstyle

	        break;

	      default:
	        size = 6;
	      // normalsize in textstyle or displaystyle
	    }

	    return this.extend({
	      style: this.style.text(),
	      size: size
	    });
	  }
	  /**
	   * Create a new options object with the given color.
	   */


	  withColor(color) {
	    return this.extend({
	      color: color
	    });
	  }
	  /**
	   * Create a new options object with "phantom" set to true.
	   */


	  withPhantom() {
	    return this.extend({
	      phantom: true
	    });
	  }
	  /**
	   * Creates a new options object with the given math font or old text font.
	   * @type {[type]}
	   */


	  withFont(font) {
	    return this.extend({
	      font
	    });
	  }
	  /**
	   * Create a new options objects with the given fontFamily.
	   */


	  withTextFontFamily(fontFamily) {
	    return this.extend({
	      fontFamily,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontWeight(fontWeight) {
	    return this.extend({
	      fontWeight,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontShape(fontShape) {
	    return this.extend({
	      fontShape,
	      font: ""
	    });
	  }
	  /**
	   * Return the CSS sizing classes required to switch from enclosing options
	   * `oldOptions` to `this`. Returns an array of classes.
	   */


	  sizingClasses(oldOptions) {
	    if (oldOptions.size !== this.size) {
	      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the CSS sizing classes required to switch to the base size. Like
	   * `this.havingSize(BASESIZE).sizingClasses(this)`.
	   */


	  baseSizingClasses() {
	    if (this.size !== Options.BASESIZE) {
	      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the font metrics for this size.
	   */


	  fontMetrics() {
	    if (!this._fontMetrics) {
	      this._fontMetrics = getGlobalMetrics(this.size);
	    }

	    return this._fontMetrics;
	  }
	  /**
	   * Gets the CSS color of the current options object
	   */


	  getColor() {
	    if (this.phantom) {
	      return "transparent";
	    } else {
	      return this.color;
	    }
	  }

	}

	Options.BASESIZE = 6;

	/**
	 * This file does conversion between units.  In particular, it provides
	 * calculateSize to convert other units into ems.
	 */
	// Thus, multiplying a length by this number converts the length from units
	// into pts.  Dividing the result by ptPerEm gives the number of ems
	// *assuming* a font size of ptPerEm (normal size, normal style).

	var ptPerUnit = {
	  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
	  // https://tex.stackexchange.com/a/8263
	  "pt": 1,
	  // TeX point
	  "mm": 7227 / 2540,
	  // millimeter
	  "cm": 7227 / 254,
	  // centimeter
	  "in": 72.27,
	  // inch
	  "bp": 803 / 800,
	  // big (PostScript) points
	  "pc": 12,
	  // pica
	  "dd": 1238 / 1157,
	  // didot
	  "cc": 14856 / 1157,
	  // cicero (12 didot)
	  "nd": 685 / 642,
	  // new didot
	  "nc": 1370 / 107,
	  // new cicero (12 new didot)
	  "sp": 1 / 65536,
	  // scaled point (TeX's internal smallest unit)
	  // https://tex.stackexchange.com/a/41371
	  "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

	}; // Dictionary of relative units, for fast validity testing.

	var relativeUnit = {
	  "ex": true,
	  "em": true,
	  "mu": true
	};

	/**
	 * Determine whether the specified unit (either a string defining the unit
	 * or a "size" parse node containing a unit field) is valid.
	 */
	var validUnit = function validUnit(unit) {
	  if (typeof unit !== "string") {
	    unit = unit.unit;
	  }

	  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
	};
	/*
	 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
	 * as parsed by functions.js argType "size") into a CSS em value for the
	 * current style/scale.  `options` gives the current options.
	 */

	var calculateSize = function calculateSize(sizeValue, options) {
	  var scale;

	  if (sizeValue.unit in ptPerUnit) {
	    // Absolute units
	    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
	    / options.fontMetrics().ptPerEm // Convert pt to CSS em
	    / options.sizeMultiplier; // Unscale to make absolute units
	  } else if (sizeValue.unit === "mu") {
	    // `mu` units scale with scriptstyle/scriptscriptstyle.
	    scale = options.fontMetrics().cssEmPerMu;
	  } else {
	    // Other relative units always refer to the *textstyle* font
	    // in the current size.
	    var unitOptions;

	    if (options.style.isTight()) {
	      // isTight() means current style is script/scriptscript.
	      unitOptions = options.havingStyle(options.style.text());
	    } else {
	      unitOptions = options;
	    } // TODO: In TeX these units are relative to the quad of the current
	    // *text* font, e.g. cmr10. KaTeX instead uses values from the
	    // comparably-sized *Computer Modern symbol* font. At 10pt, these
	    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
	    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
	    // TeX \showlists shows a kern of 1.13889 * fontsize;
	    // KaTeX shows a kern of 1.171 * fontsize.


	    if (sizeValue.unit === "ex") {
	      scale = unitOptions.fontMetrics().xHeight;
	    } else if (sizeValue.unit === "em") {
	      scale = unitOptions.fontMetrics().quad;
	    } else {
	      throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
	    }

	    if (unitOptions !== options) {
	      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
	    }
	  }

	  return Math.min(sizeValue.number * scale, options.maxSize);
	};

	/* eslint no-console:0 */

	/**
	 * Looks up the given symbol in fontMetrics, after applying any symbol
	 * replacements defined in symbol.js
	 */
	var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
	fontName, mode) {
	  // Replace the value with its replaced value from symbol.js
	  if (symbols[mode][value] && symbols[mode][value].replace) {
	    value = symbols[mode][value].replace;
	  }

	  return {
	    value: value,
	    metrics: getCharacterMetrics(value, fontName, mode)
	  };
	};
	/**
	 * Makes a symbolNode after translation via the list of symbols in symbols.js.
	 * Correctly pulls out metrics for the character, and optionally takes a list of
	 * classes to be attached to the node.
	 *
	 * TODO: make argument order closer to makeSpan
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 * TODO(#953): Make `options` mandatory and always pass it in.
	 */


	var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
	  var lookup = lookupSymbol(value, fontName, mode);
	  var metrics = lookup.metrics;
	  value = lookup.value;
	  var symbolNode;

	  if (metrics) {
	    var italic = metrics.italic;

	    if (mode === "text" || options && options.font === "mathit") {
	      italic = 0;
	    }

	    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
	  } else {
	    // TODO(emily): Figure out a good way to only print this in development
	    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
	    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
	  }

	  if (options) {
	    symbolNode.maxFontSize = options.sizeMultiplier;

	    if (options.style.isTight()) {
	      symbolNode.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      symbolNode.style.color = color;
	    }
	  }

	  return symbolNode;
	};
	/**
	 * Makes a symbol in Main-Regular or AMS-Regular.
	 * Used for rel, bin, open, close, inner, and punct.
	 */


	var mathsym = function mathsym(value, mode, options, classes) {
	  if (classes === void 0) {
	    classes = [];
	  }

	  // Decide what font to render the symbol in by its entry in the symbols
	  // table.
	  // Have a special case for when the value = \ because the \ is used as a
	  // textord in unsupported command errors but cannot be parsed as a regular
	  // text ordinal and is therefore not present as a symbol in the symbols
	  // table for text, as well as a special case for boldsymbol because it
	  // can be used for bold + and -
	  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
	    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
	  } else if (value === "\\" || symbols[mode][value].font === "main") {
	    return makeSymbol(value, "Main-Regular", mode, options, classes);
	  } else {
	    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
	  }
	};
	/**
	 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
	 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
	 * depending on the symbol.  Use this function instead of fontMap for font
	 * "boldsymbol".
	 */


	var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
	  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
	    return {
	      fontName: "Math-BoldItalic",
	      fontClass: "boldsymbol"
	    };
	  } else {
	    // Some glyphs do not exist in Math-BoldItalic so we need to use
	    // Main-Bold instead.
	    return {
	      fontName: "Main-Bold",
	      fontClass: "mathbf"
	    };
	  }
	};
	/**
	 * Makes either a mathord or textord in the correct font and color.
	 */


	var makeOrd = function makeOrd(group, options, type) {
	  var mode = group.mode;
	  var text = group.text;
	  var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

	  var isFont = mode === "math" || mode === "text" && options.font;
	  var fontOrFamily = isFont ? options.font : options.fontFamily;

	  if (text.charCodeAt(0) === 0xD835) {
	    // surrogate pairs get special treatment
	    var [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
	    return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
	  } else if (fontOrFamily) {
	    var fontName;
	    var fontClasses;

	    if (fontOrFamily === "boldsymbol") {
	      var fontData = boldsymbol(text, mode, options, classes, type);
	      fontName = fontData.fontName;
	      fontClasses = [fontData.fontClass];
	    } else if (isFont) {
	      fontName = fontMap[fontOrFamily].fontName;
	      fontClasses = [fontOrFamily];
	    } else {
	      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
	      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
	    }

	    if (lookupSymbol(text, fontName, mode).metrics) {
	      return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
	    } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
	      // Deconstruct ligatures in monospace fonts (\texttt, \tt).
	      var parts = [];

	      for (var i = 0; i < text.length; i++) {
	        parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
	      }

	      return makeFragment(parts);
	    }
	  } // Makes a symbol in the default font for mathords and textords.


	  if (type === "mathord") {
	    return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
	  } else if (type === "textord") {
	    var font = symbols[mode][text] && symbols[mode][text].font;

	    if (font === "ams") {
	      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
	    } else if (font === "main" || !font) {
	      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
	    } else {
	      // fonts added by plugins
	      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


	      return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
	    }
	  } else {
	    throw new Error("unexpected type: " + type + " in makeOrd");
	  }
	};
	/**
	 * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
	 * and styles.
	 */


	var canCombine = (prev, next) => {
	  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
	    return false;
	  } // If prev and next both are just "mbin"s or "mord"s we don't combine them
	  // so that the proper spacing can be preserved.


	  if (prev.classes.length === 1) {
	    var cls = prev.classes[0];

	    if (cls === "mbin" || cls === "mord") {
	      return false;
	    }
	  }

	  for (var style in prev.style) {
	    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
	      return false;
	    }
	  }

	  for (var _style in next.style) {
	    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
	      return false;
	    }
	  }

	  return true;
	};
	/**
	 * Combine consecutive domTree.symbolNodes into a single symbolNode.
	 * Note: this function mutates the argument.
	 */


	var tryCombineChars = chars => {
	  for (var i = 0; i < chars.length - 1; i++) {
	    var prev = chars[i];
	    var next = chars[i + 1];

	    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
	      prev.text += next.text;
	      prev.height = Math.max(prev.height, next.height);
	      prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
	      // it to add padding to the right of the span created from
	      // the combined characters.

	      prev.italic = next.italic;
	      chars.splice(i + 1, 1);
	      i--;
	    }
	  }

	  return chars;
	};
	/**
	 * Calculate the height, depth, and maxFontSize of an element based on its
	 * children.
	 */


	var sizeElementFromChildren = function sizeElementFromChildren(elem) {
	  var height = 0;
	  var depth = 0;
	  var maxFontSize = 0;

	  for (var i = 0; i < elem.children.length; i++) {
	    var child = elem.children[i];

	    if (child.height > height) {
	      height = child.height;
	    }

	    if (child.depth > depth) {
	      depth = child.depth;
	    }

	    if (child.maxFontSize > maxFontSize) {
	      maxFontSize = child.maxFontSize;
	    }
	  }

	  elem.height = height;
	  elem.depth = depth;
	  elem.maxFontSize = maxFontSize;
	};
	/**
	 * Makes a span with the given list of classes, list of children, and options.
	 *
	 * TODO(#953): Ensure that `options` is always provided (currently some call
	 * sites don't pass it) and make the type below mandatory.
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 */


	var makeSpan = function makeSpan(classes, children, options, style) {
	  var span = new Span(classes, children, options, style);
	  sizeElementFromChildren(span);
	  return span;
	}; // SVG one is simpler -- doesn't require height, depth, max-font setting.
	// This is also a separate method for typesafety.


	var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);

	var makeLineSpan = function makeLineSpan(className, options, thickness) {
	  var line = makeSpan([className], [], options);
	  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	  line.style.borderBottomWidth = line.height + "em";
	  line.maxFontSize = 1.0;
	  return line;
	};
	/**
	 * Makes an anchor with the given href, list of classes, list of children,
	 * and options.
	 */


	var makeAnchor = function makeAnchor(href, classes, children, options) {
	  var anchor = new Anchor(href, classes, children, options);
	  sizeElementFromChildren(anchor);
	  return anchor;
	};
	/**
	 * Makes a document fragment with the given list of children.
	 */


	var makeFragment = function makeFragment(children) {
	  var fragment = new DocumentFragment(children);
	  sizeElementFromChildren(fragment);
	  return fragment;
	};
	/**
	 * Wraps group in a span if it's a document fragment, allowing to apply classes
	 * and styles
	 */


	var wrapFragment = function wrapFragment(group, options) {
	  if (group instanceof DocumentFragment) {
	    return makeSpan([], [group], options);
	  }

	  return group;
	}; // These are exact object types to catch typos in the names of the optional fields.


	// Computes the updated `children` list and the overall depth.
	//
	// This helper function for makeVList makes it easier to enforce type safety by
	// allowing early exits (returns) in the logic.
	var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
	  if (params.positionType === "individualShift") {
	    var oldChildren = params.children;
	    var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
	    // shifted to the correct specified shift

	    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

	    var currPos = _depth;

	    for (var i = 1; i < oldChildren.length; i++) {
	      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
	      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
	      currPos = currPos + diff;
	      children.push({
	        type: "kern",
	        size
	      });
	      children.push(oldChildren[i]);
	    }

	    return {
	      children,
	      depth: _depth
	    };
	  }

	  var depth;

	  if (params.positionType === "top") {
	    // We always start at the bottom, so calculate the bottom by adding up
	    // all the sizes
	    var bottom = params.positionData;

	    for (var _i = 0; _i < params.children.length; _i++) {
	      var child = params.children[_i];
	      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
	    }

	    depth = bottom;
	  } else if (params.positionType === "bottom") {
	    depth = -params.positionData;
	  } else {
	    var firstChild = params.children[0];

	    if (firstChild.type !== "elem") {
	      throw new Error('First child must have type "elem".');
	    }

	    if (params.positionType === "shift") {
	      depth = -firstChild.elem.depth - params.positionData;
	    } else if (params.positionType === "firstBaseline") {
	      depth = -firstChild.elem.depth;
	    } else {
	      throw new Error("Invalid positionType " + params.positionType + ".");
	    }
	  }

	  return {
	    children: params.children,
	    depth
	  };
	};
	/**
	 * Makes a vertical list by stacking elements and kerns on top of each other.
	 * Allows for many different ways of specifying the positioning method.
	 *
	 * See VListParam documentation above.
	 */


	var makeVList = function makeVList(params, options) {
	  var {
	    children,
	    depth
	  } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to
	  // each item, where it will determine the item's baseline. Since it has
	  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
	  // top edge and the strut's bottom edge will sit on the item's baseline,
	  // with no additional line-height spacing. This allows the item baseline to
	  // be positioned precisely without worrying about font ascent and
	  // line-height.

	  var pstrutSize = 0;

	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];

	    if (child.type === "elem") {
	      var elem = child.elem;
	      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
	    }
	  }

	  pstrutSize += 2;
	  var pstrut = makeSpan(["pstrut"], []);
	  pstrut.style.height = pstrutSize + "em"; // Create a new list of actual children at the correct offsets

	  var realChildren = [];
	  var minPos = depth;
	  var maxPos = depth;
	  var currPos = depth;

	  for (var _i2 = 0; _i2 < children.length; _i2++) {
	    var _child = children[_i2];

	    if (_child.type === "kern") {
	      currPos += _child.size;
	    } else {
	      var _elem = _child.elem;
	      var classes = _child.wrapperClasses || [];
	      var style = _child.wrapperStyle || {};
	      var childWrap = makeSpan(classes, [pstrut, _elem], undefined, style);
	      childWrap.style.top = -pstrutSize - currPos - _elem.depth + "em";

	      if (_child.marginLeft) {
	        childWrap.style.marginLeft = _child.marginLeft;
	      }

	      if (_child.marginRight) {
	        childWrap.style.marginRight = _child.marginRight;
	      }

	      realChildren.push(childWrap);
	      currPos += _elem.height + _elem.depth;
	    }

	    minPos = Math.min(minPos, currPos);
	    maxPos = Math.max(maxPos, currPos);
	  } // The vlist contents go in a table-cell with `vertical-align:bottom`.
	  // This cell's bottom edge will determine the containing table's baseline
	  // without overly expanding the containing line-box.


	  var vlist = makeSpan(["vlist"], realChildren);
	  vlist.style.height = maxPos + "em"; // A second row is used if necessary to represent the vlist's depth.

	  var rows;

	  if (minPos < 0) {
	    // We will define depth in an empty span with display: table-cell.
	    // It should render with the height that we define. But Chrome, in
	    // contenteditable mode only, treats that span as if it contains some
	    // text content. And that min-height over-rides our desired height.
	    // So we put another empty span inside the depth strut span.
	    var emptySpan = makeSpan([], []);
	    var depthStrut = makeSpan(["vlist"], [emptySpan]);
	    depthStrut.style.height = -minPos + "em"; // Safari wants the first row to have inline content; otherwise it
	    // puts the bottom of the *second* row on the baseline.

	    var topStrut = makeSpan(["vlist-s"], [new SymbolNode("\u200b")]);
	    rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
	  } else {
	    rows = [makeSpan(["vlist-r"], [vlist])];
	  }

	  var vtable = makeSpan(["vlist-t"], rows);

	  if (rows.length === 2) {
	    vtable.classes.push("vlist-t2");
	  }

	  vtable.height = maxPos;
	  vtable.depth = -minPos;
	  return vtable;
	}; // Glue is a concept from TeX which is a flexible space between elements in
	// either a vertical or horizontal list. In KaTeX, at least for now, it's
	// static space between elements in a horizontal layout.


	var makeGlue = (measurement, options) => {
	  // Make an empty span for the space
	  var rule = makeSpan(["mspace"], [], options);
	  var size = calculateSize(measurement, options);
	  rule.style.marginRight = size + "em";
	  return rule;
	}; // Takes font options, and returns the appropriate fontLookup name


	var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
	  var baseFontName = "";

	  switch (fontFamily) {
	    case "amsrm":
	      baseFontName = "AMS";
	      break;

	    case "textrm":
	      baseFontName = "Main";
	      break;

	    case "textsf":
	      baseFontName = "SansSerif";
	      break;

	    case "texttt":
	      baseFontName = "Typewriter";
	      break;

	    default:
	      baseFontName = fontFamily;
	    // use fonts added by a plugin
	  }

	  var fontStylesName;

	  if (fontWeight === "textbf" && fontShape === "textit") {
	    fontStylesName = "BoldItalic";
	  } else if (fontWeight === "textbf") {
	    fontStylesName = "Bold";
	  } else if (fontWeight === "textit") {
	    fontStylesName = "Italic";
	  } else {
	    fontStylesName = "Regular";
	  }

	  return baseFontName + "-" + fontStylesName;
	};
	/**
	 * Maps TeX font commands to objects containing:
	 * - variant: string used for "mathvariant" attribute in buildMathML.js
	 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
	 */
	// A map between tex font commands an MathML mathvariant attribute values


	var fontMap = {
	  // styles
	  "mathbf": {
	    variant: "bold",
	    fontName: "Main-Bold"
	  },
	  "mathrm": {
	    variant: "normal",
	    fontName: "Main-Regular"
	  },
	  "textit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathnormal": {
	    variant: "italic",
	    fontName: "Math-Italic"
	  },
	  // "boldsymbol" is missing because they require the use of multiple fonts:
	  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
	  // makeOrd which ends up calling boldsymbol.
	  // families
	  "mathbb": {
	    variant: "double-struck",
	    fontName: "AMS-Regular"
	  },
	  "mathcal": {
	    variant: "script",
	    fontName: "Caligraphic-Regular"
	  },
	  "mathfrak": {
	    variant: "fraktur",
	    fontName: "Fraktur-Regular"
	  },
	  "mathscr": {
	    variant: "script",
	    fontName: "Script-Regular"
	  },
	  "mathsf": {
	    variant: "sans-serif",
	    fontName: "SansSerif-Regular"
	  },
	  "mathtt": {
	    variant: "monospace",
	    fontName: "Typewriter-Regular"
	  }
	};
	var svgData = {
	  //   path, width, height
	  vec: ["vec", 0.471, 0.714],
	  // values from the font glyph
	  oiintSize1: ["oiintSize1", 0.957, 0.499],
	  // oval to overlay the integrand
	  oiintSize2: ["oiintSize2", 1.472, 0.659],
	  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
	  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
	};

	var staticSvg = function staticSvg(value, options) {
	  // Create a span with inline SVG for the element.
	  var [pathName, width, height] = svgData[value];
	  var path = new PathNode(pathName);
	  var svgNode = new SvgNode([path], {
	    "width": width + "em",
	    "height": height + "em",
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + width + "em",
	    "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = makeSvgSpan(["overlay"], [svgNode], options);
	  span.height = height;
	  span.style.height = height + "em";
	  span.style.width = width + "em";
	  return span;
	};

	var buildCommon = {
	  fontMap,
	  makeSymbol,
	  mathsym,
	  makeSpan,
	  makeSvgSpan,
	  makeLineSpan,
	  makeAnchor,
	  makeFragment,
	  wrapFragment,
	  makeVList,
	  makeOrd,
	  makeGlue,
	  staticSvg,
	  svgData,
	  tryCombineChars
	};

	/**
	 * Describes spaces between different classes of atoms.
	 */
	var thinspace = {
	  number: 3,
	  unit: "mu"
	};
	var mediumspace = {
	  number: 4,
	  unit: "mu"
	};
	var thickspace = {
	  number: 5,
	  unit: "mu"
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.

	// Spacing relationships for display and text styles
	var spacings = {
	  mord: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mbin: {
	    mord: mediumspace,
	    mop: mediumspace,
	    mopen: mediumspace,
	    minner: mediumspace
	  },
	  mrel: {
	    mord: thickspace,
	    mop: thickspace,
	    mopen: thickspace,
	    minner: thickspace
	  },
	  mopen: {},
	  mclose: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mpunct: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mclose: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  },
	  minner: {
	    mord: thinspace,
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  }
	}; // Spacing relationships for script and scriptscript styles

	var tightSpacings = {
	  mord: {
	    mop: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace
	  },
	  mbin: {},
	  mrel: {},
	  mopen: {},
	  mclose: {
	    mop: thinspace
	  },
	  mpunct: {},
	  minner: {
	    mop: thinspace
	  }
	};

	/** Context provided to function handlers for error messages. */
	// Note: reverse the order of the return type union will cause a flow error.
	// See https://github.com/facebook/flow/issues/3663.
	// More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
	// whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
	// delegates its HTML building to the HtmlBuilder corresponding to these nodes.

	/**
	 * Final function spec for use at parse time.
	 * This is almost identical to `FunctionPropSpec`, except it
	 * 1. includes the function handler, and
	 * 2. requires all arguments except argTypes.
	 * It is generated by `defineFunction()` below.
	 */

	/**
	 * All registered functions.
	 * `functions.js` just exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary.
	 */
	var _functions = {};
	/**
	 * All HTML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _htmlGroupBuilders = {};
	/**
	 * All MathML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _mathmlGroupBuilders = {};
	function defineFunction(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of functions
	  var data = {
	    type,
	    numArgs: props.numArgs,
	    argTypes: props.argTypes,
	    allowedInArgument: !!props.allowedInArgument,
	    allowedInText: !!props.allowedInText,
	    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
	    numOptionalArgs: props.numOptionalArgs || 0,
	    infix: !!props.infix,
	    primitive: !!props.primitive,
	    handler: handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    _functions[names[i]] = data;
	  }

	  if (type) {
	    if (htmlBuilder) {
	      _htmlGroupBuilders[type] = htmlBuilder;
	    }

	    if (mathmlBuilder) {
	      _mathmlGroupBuilders[type] = mathmlBuilder;
	    }
	  }
	}
	/**
	 * Use this to register only the HTML and MathML builders for a function (e.g.
	 * if the function's ParseNode is generated in Parser.js rather than via a
	 * stand-alone handler provided to `defineFunction`).
	 */

	function defineFunctionBuilders(_ref2) {
	  var {
	    type,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref2;
	  defineFunction({
	    type,
	    names: [],
	    props: {
	      numArgs: 0
	    },

	    handler() {
	      throw new Error('Should never be called.');
	    },

	    htmlBuilder,
	    mathmlBuilder
	  });
	}
	var normalizeArgument = function normalizeArgument(arg) {
	  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
	}; // Since the corresponding buildHTML/buildMathML function expects a
	// list of elements, we normalize for different kinds of arguments

	var ordargument = function ordargument(arg) {
	  return arg.type === "ordgroup" ? arg.body : [arg];
	};

	/**
	 * This file does the main work of building a domTree structure from a parse
	 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
	 * Then, the buildExpression, buildGroup, and various groupBuilders functions
	 * are called, to produce a final HTML tree.
	 */
	var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
	// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
	// and the text before Rule 19.

	var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
	var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
	var styleMap = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	var DomEnum = {
	  mord: "mord",
	  mop: "mop",
	  mbin: "mbin",
	  mrel: "mrel",
	  mopen: "mopen",
	  mclose: "mclose",
	  mpunct: "mpunct",
	  minner: "minner"
	};

	/**
	 * Take a list of nodes, build them in order, and return a list of the built
	 * nodes. documentFragments are flattened into their contents, so the
	 * returned list contains no fragments. `isRealGroup` is true if `expression`
	 * is a real group (no atoms will be added on either side), as opposed to
	 * a partial group (e.g. one created by \color). `surrounding` is an array
	 * consisting type of nodes that will be added to the left and right.
	 */
	var buildExpression = function buildExpression(expression, options, isRealGroup, surrounding) {
	  if (surrounding === void 0) {
	    surrounding = [null, null];
	  }

	  // Parse expressions into `groups`.
	  var groups = [];

	  for (var i = 0; i < expression.length; i++) {
	    var output = buildGroup(expression[i], options);

	    if (output instanceof DocumentFragment) {
	      var children = output.children;
	      groups.push(...children);
	    } else {
	      groups.push(output);
	    }
	  } // Combine consecutive domTree.symbolNodes into a single symbolNode.


	  buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
	  // to avoid processing groups multiple times.

	  if (!isRealGroup) {
	    return groups;
	  }

	  var glueOptions = options;

	  if (expression.length === 1) {
	    var node = expression[0];

	    if (node.type === "sizing") {
	      glueOptions = options.havingSize(node.size);
	    } else if (node.type === "styling") {
	      glueOptions = options.havingStyle(styleMap[node.style]);
	    }
	  } // Dummy spans for determining spacings between surrounding atoms.
	  // If `expression` has no atoms on the left or right, class "leftmost"
	  // or "rightmost", respectively, is used to indicate it.


	  var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
	  var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
	  // of its `classes` array. A later cleanup should ensure this, for
	  // instance by changing the signature of `makeSpan`.
	  // Before determining what spaces to insert, perform bin cancellation.
	  // Binary operators change to ordinary symbols in some contexts.

	  var isRoot = isRealGroup === "root";
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = prev.classes[0];
	    var type = node.classes[0];

	    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
	      prev.classes[0] = "mord";
	    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
	      node.classes[0] = "mord";
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = getTypeOfDomTree(prev);
	    var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

	    var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

	    if (space) {
	      // Insert glue (spacing) after the `prev`.
	      return buildCommon.makeGlue(space, glueOptions);
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  return groups;
	}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
	// previous node as arguments, optionally returning a node to insert after the
	// previous node. `prev` is an object with the previous node and `insertAfter`
	// function to insert after it. `next` is a node that will be added to the right.
	// Used for bin cancellation and inserting spacings.

	var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
	  if (next) {
	    // temporarily append the right node, if exists
	    nodes.push(next);
	  }

	  var i = 0;

	  for (; i < nodes.length; i++) {
	    var node = nodes[i];
	    var partialGroup = checkPartialGroup(node);

	    if (partialGroup) {
	      // Recursive DFS
	      // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
	      traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
	      continue;
	    } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
	    // spacing should go between atoms of different classes


	    var nonspace = !node.hasClass("mspace");

	    if (nonspace) {
	      var result = callback(node, prev.node);

	      if (result) {
	        if (prev.insertAfter) {
	          prev.insertAfter(result);
	        } else {
	          // insert at front
	          nodes.unshift(result);
	          i++;
	        }
	      }
	    }

	    if (nonspace) {
	      prev.node = node;
	    } else if (isRoot && node.hasClass("newline")) {
	      prev.node = makeSpan$1(["leftmost"]); // treat like beginning of line
	    }

	    prev.insertAfter = (index => n => {
	      nodes.splice(index + 1, 0, n);
	      i++;
	    })(i);
	  }

	  if (next) {
	    nodes.pop();
	  }
	}; // Check if given node is a partial group, i.e., does not affect spacing around.


	var checkPartialGroup = function checkPartialGroup(node) {
	  if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
	    return node;
	  }

	  return null;
	}; // Return the outermost node of a domTree.


	var getOutermostNode = function getOutermostNode(node, side) {
	  var partialGroup = checkPartialGroup(node);

	  if (partialGroup) {
	    var children = partialGroup.children;

	    if (children.length) {
	      if (side === "right") {
	        return getOutermostNode(children[children.length - 1], "right");
	      } else if (side === "left") {
	        return getOutermostNode(children[0], "left");
	      }
	    }
	  }

	  return node;
	}; // Return math atom class (mclass) of a domTree.
	// If `side` is given, it will get the type of the outermost node at given side.


	var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
	  if (!node) {
	    return null;
	  }

	  if (side) {
	    node = getOutermostNode(node, side);
	  } // This makes a lot of assumptions as to where the type of atom
	  // appears.  We should do a better job of enforcing this.


	  return DomEnum[node.classes[0]] || null;
	};
	var makeNullDelimiter = function makeNullDelimiter(options, classes) {
	  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
	  return makeSpan$1(classes.concat(moreClasses));
	};
	/**
	 * buildGroup is the function that takes a group and calls the correct groupType
	 * function for it. It also handles the interaction of size and style changes
	 * between parents and children.
	 */

	var buildGroup = function buildGroup(group, options, baseOptions) {
	  if (!group) {
	    return makeSpan$1();
	  }

	  if (_htmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
	    // for that size difference.

	    if (baseOptions && options.size !== baseOptions.size) {
	      groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
	      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
	      groupNode.height *= multiplier;
	      groupNode.depth *= multiplier;
	    }

	    return groupNode;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
	 * into an unbreakable HTML node of class .base, with proper struts to
	 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
	 * make up the entire expression as a sequence of unbreakable units.
	 */

	function buildHTMLUnbreakable(children, options) {
	  // Compute height and depth of this chunk.
	  var body = makeSpan$1(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
	  // the height of the expression, and the bottom of the HTML element
	  // falls at the depth of the expression.

	  var strut = makeSpan$1(["strut"]);
	  strut.style.height = body.height + body.depth + "em";
	  strut.style.verticalAlign = -body.depth + "em";
	  body.children.unshift(strut);
	  return body;
	}
	/**
	 * Take an entire parse tree, and build it into an appropriate set of HTML
	 * nodes.
	 */


	function buildHTML(tree, options) {
	  // Strip off outer tag wrapper for processing below.
	  var tag = null;

	  if (tree.length === 1 && tree[0].type === "tag") {
	    tag = tree[0].tag;
	    tree = tree[0].body;
	  } // Build the expression contained in the tree


	  var expression = buildExpression(tree, options, "root");
	  var eqnNum;

	  if (expression.length === 2 && expression[1].hasClass("tag")) {
	    // An environment with automatic equation numbers, e.g. {gather}.
	    eqnNum = expression.pop();
	  }

	  var children = []; // Create one base node for each chunk between potential line breaks.
	  // The TeXBook [p.173] says "A formula will be broken only after a
	  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
	  // operation symbol like $+$ or $-$ or $\times$, where the relation or
	  // binary operation is on the ``outer level'' of the formula (i.e., not
	  // enclosed in {...} and not part of an \over construction)."

	  var parts = [];

	  for (var i = 0; i < expression.length; i++) {
	    parts.push(expression[i]);

	    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
	      // Put any post-operator glue on same line as operator.
	      // Watch for \nobreak along the way, and stop at \newline.
	      var nobreak = false;

	      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
	        i++;
	        parts.push(expression[i]);

	        if (expression[i].hasClass("nobreak")) {
	          nobreak = true;
	        }
	      } // Don't allow break if \nobreak among the post-operator glue.


	      if (!nobreak) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      }
	    } else if (expression[i].hasClass("newline")) {
	      // Write the line except the newline
	      parts.pop();

	      if (parts.length > 0) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      } // Put the newline at the top level


	      children.push(expression[i]);
	    }
	  }

	  if (parts.length > 0) {
	    children.push(buildHTMLUnbreakable(parts, options));
	  } // Now, if there was a tag, build it too and append it as a final child.


	  var tagChild;

	  if (tag) {
	    tagChild = buildHTMLUnbreakable(buildExpression(tag, options, true));
	    tagChild.classes = ["tag"];
	    children.push(tagChild);
	  } else if (eqnNum) {
	    children.push(eqnNum);
	  }

	  var htmlNode = makeSpan$1(["katex-html"], children);
	  htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
	  // (the height of the enclosing htmlNode) for proper vertical alignment.

	  if (tagChild) {
	    var strut = tagChild.children[0];
	    strut.style.height = htmlNode.height + htmlNode.depth + "em";
	    strut.style.verticalAlign = -htmlNode.depth + "em";
	  }

	  return htmlNode;
	}

	/**
	 * These objects store data about MathML nodes. This is the MathML equivalent
	 * of the types in domTree.js. Since MathML handles its own rendering, and
	 * since we're mainly using MathML to improve accessibility, we don't manage
	 * any of the styling state that the plain DOM nodes do.
	 *
	 * The `toNode` and `toMarkup` functions work simlarly to how they do in
	 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
	 */
	function newDocumentFragment(children) {
	  return new DocumentFragment(children);
	}
	/**
	 * This node represents a general purpose MathML node of any type. The
	 * constructor requires the type of node to create (for example, `"mo"` or
	 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
	 */

	class MathNode {
	  constructor(type, children, classes) {
	    this.type = void 0;
	    this.attributes = void 0;
	    this.children = void 0;
	    this.classes = void 0;
	    this.type = type;
	    this.attributes = {};
	    this.children = children || [];
	    this.classes = classes || [];
	  }
	  /**
	   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
	   * semantic content, so this is used heavily.
	   */


	  setAttribute(name, value) {
	    this.attributes[name] = value;
	  }
	  /**
	   * Gets an attribute on a MathML node.
	   */


	  getAttribute(name) {
	    return this.attributes[name];
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    if (this.classes.length > 0) {
	      node.className = createClass(this.classes);
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    var markup = "<" + this.type; // Add the attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "=\"";
	        markup += utils.escape(this.attributes[attr]);
	        markup += "\"";
	      }
	    }

	    if (this.classes.length > 0) {
	      markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</" + this.type + ">";
	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText, but escaped.
	   */


	  toText() {
	    return this.children.map(child => child.toText()).join("");
	  }

	}
	/**
	 * This node represents a piece of text.
	 */

	class TextNode {
	  constructor(text) {
	    this.text = void 0;
	    this.text = text;
	  }
	  /**
	   * Converts the text node into a DOM text node.
	   */


	  toNode() {
	    return document.createTextNode(this.text);
	  }
	  /**
	   * Converts the text node into escaped HTML markup
	   * (representing the text itself).
	   */


	  toMarkup() {
	    return utils.escape(this.toText());
	  }
	  /**
	   * Converts the text node into a string
	   * (representing the text iteself).
	   */


	  toText() {
	    return this.text;
	  }

	}
	/**
	 * This node represents a space, but may render as <mspace.../> or as text,
	 * depending on the width.
	 */

	class SpaceNode {
	  /**
	   * Create a Space node with width given in CSS ems.
	   */
	  constructor(width) {
	    this.width = void 0;
	    this.character = void 0;
	    this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
	    // for a table of space-like characters.  We use Unicode
	    // representations instead of &LongNames; as it's not clear how to
	    // make the latter via document.createTextNode.

	    if (width >= 0.05555 && width <= 0.05556) {
	      this.character = "\u200a"; // &VeryThinSpace;
	    } else if (width >= 0.1666 && width <= 0.1667) {
	      this.character = "\u2009"; // &ThinSpace;
	    } else if (width >= 0.2222 && width <= 0.2223) {
	      this.character = "\u2005"; // &MediumSpace;
	    } else if (width >= 0.2777 && width <= 0.2778) {
	      this.character = "\u2005\u200a"; // &ThickSpace;
	    } else if (width >= -0.05556 && width <= -0.05555) {
	      this.character = "\u200a\u2063"; // &NegativeVeryThinSpace;
	    } else if (width >= -0.1667 && width <= -0.1666) {
	      this.character = "\u2009\u2063"; // &NegativeThinSpace;
	    } else if (width >= -0.2223 && width <= -0.2222) {
	      this.character = "\u205f\u2063"; // &NegativeMediumSpace;
	    } else if (width >= -0.2778 && width <= -0.2777) {
	      this.character = "\u2005\u2063"; // &NegativeThickSpace;
	    } else {
	      this.character = null;
	    }
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    if (this.character) {
	      return document.createTextNode(this.character);
	    } else {
	      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
	      node.setAttribute("width", this.width + "em");
	      return node;
	    }
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    if (this.character) {
	      return "<mtext>" + this.character + "</mtext>";
	    } else {
	      return "<mspace width=\"" + this.width + "em\"/>";
	    }
	  }
	  /**
	   * Converts the math node into a string, similar to innerText.
	   */


	  toText() {
	    if (this.character) {
	      return this.character;
	    } else {
	      return " ";
	    }
	  }

	}

	var mathMLTree = {
	  MathNode,
	  TextNode,
	  SpaceNode,
	  newDocumentFragment
	};

	/**
	 * This file converts a parse tree into a cooresponding MathML tree. The main
	 * entry point is the `buildMathML` function, which takes a parse tree from the
	 * parser.
	 */

	/**
	 * Takes a symbol and converts it into a MathML text node after performing
	 * optional replacement from symbols.js.
	 */
	var makeText = function makeText(text, mode, options) {
	  if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
	    text = symbols[mode][text].replace;
	  }

	  return new mathMLTree.TextNode(text);
	};
	/**
	 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
	 * unless the array has length 1.  Always returns a single node.
	 */

	var makeRow = function makeRow(body) {
	  if (body.length === 1) {
	    return body[0];
	  } else {
	    return new mathMLTree.MathNode("mrow", body);
	  }
	};
	/**
	 * Returns the math variant as a string or null if none is required.
	 */

	var getVariant = function getVariant(group, options) {
	  // Handle \text... font specifiers as best we can.
	  // MathML has a limited list of allowable mathvariant specifiers; see
	  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
	  if (options.fontFamily === "texttt") {
	    return "monospace";
	  } else if (options.fontFamily === "textsf") {
	    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	      return "sans-serif-bold-italic";
	    } else if (options.fontShape === "textit") {
	      return "sans-serif-italic";
	    } else if (options.fontWeight === "textbf") {
	      return "bold-sans-serif";
	    } else {
	      return "sans-serif";
	    }
	  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	    return "bold-italic";
	  } else if (options.fontShape === "textit") {
	    return "italic";
	  } else if (options.fontWeight === "textbf") {
	    return "bold";
	  }

	  var font = options.font;

	  if (!font || font === "mathnormal") {
	    return null;
	  }

	  var mode = group.mode;

	  if (font === "mathit") {
	    return "italic";
	  } else if (font === "boldsymbol") {
	    return group.type === "textord" ? "bold" : "bold-italic";
	  } else if (font === "mathbf") {
	    return "bold";
	  } else if (font === "mathbb") {
	    return "double-struck";
	  } else if (font === "mathfrak") {
	    return "fraktur";
	  } else if (font === "mathscr" || font === "mathcal") {
	    // MathML makes no distinction between script and caligrahpic
	    return "script";
	  } else if (font === "mathsf") {
	    return "sans-serif";
	  } else if (font === "mathtt") {
	    return "monospace";
	  }

	  var text = group.text;

	  if (utils.contains(["\\imath", "\\jmath"], text)) {
	    return null;
	  }

	  if (symbols[mode][text] && symbols[mode][text].replace) {
	    text = symbols[mode][text].replace;
	  }

	  var fontName = buildCommon.fontMap[font].fontName;

	  if (getCharacterMetrics(text, fontName, mode)) {
	    return buildCommon.fontMap[font].variant;
	  }

	  return null;
	};
	/**
	 * Takes a list of nodes, builds them, and returns a list of the generated
	 * MathML nodes.  Also combine consecutive <mtext> outputs into a single
	 * <mtext> tag.
	 */

	var buildExpression$1 = function buildExpression(expression, options, isOrdgroup) {
	  if (expression.length === 1) {
	    var group = buildGroup$1(expression[0], options);

	    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
	      // When TeX writers want to suppress spacing on an operator,
	      // they often put the operator by itself inside braces.
	      group.setAttribute("lspace", "0em");
	      group.setAttribute("rspace", "0em");
	    }

	    return [group];
	  }

	  var groups = [];
	  var lastGroup;

	  for (var i = 0; i < expression.length; i++) {
	    var _group = buildGroup$1(expression[i], options);

	    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
	      // Concatenate adjacent <mtext>s
	      if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate adjacent <mn>s
	      } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
	      } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
	        var child = _group.children[0];

	        if (child instanceof TextNode && child.text === '.') {
	          lastGroup.children.push(..._group.children);
	          continue;
	        }
	      } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
	        var lastChild = lastGroup.children[0];

	        if (lastChild instanceof TextNode && lastChild.text === '\u0338' && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
	          var _child = _group.children[0];

	          if (_child instanceof TextNode && _child.text.length > 0) {
	            // Overlay with combining character long solidus
	            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
	            groups.pop();
	          }
	        }
	      }
	    }

	    groups.push(_group);
	    lastGroup = _group;
	  }

	  return groups;
	};
	/**
	 * Equivalent to buildExpression, but wraps the elements in an <mrow>
	 * if there's more than one.  Returns a single node instead of an array.
	 */

	var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
	  return makeRow(buildExpression$1(expression, options, isOrdgroup));
	};
	/**
	 * Takes a group from the parser and calls the appropriate groupBuilders function
	 * on it to produce a MathML node.
	 */

	var buildGroup$1 = function buildGroup(group, options) {
	  if (!group) {
	    return new mathMLTree.MathNode("mrow");
	  }

	  if (_mathmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

	    return result;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Takes a full parse tree and settings and builds a MathML representation of
	 * it. In particular, we put the elements from building the parse tree into a
	 * <semantics> tag so we can also include that TeX source as an annotation.
	 *
	 * Note that we actually return a domTree element with a `<math>` inside it so
	 * we can do appropriate styling.
	 */

	function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
	  var expression = buildExpression$1(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
	  // and add spacing nodes. This is necessary only adjacent to math operators
	  // like \sin or \lim or to subsup elements that contain math operators.
	  // MathML takes care of the other spacing issues.
	  // Wrap up the expression in an mrow so it is presented in the semantics
	  // tag correctly, unless it's a single <mrow> or <mtable>.

	  var wrapper;

	  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
	    wrapper = expression[0];
	  } else {
	    wrapper = new mathMLTree.MathNode("mrow", expression);
	  } // Build a TeX annotation of the source


	  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
	  annotation.setAttribute("encoding", "application/x-tex");
	  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
	  var math = new mathMLTree.MathNode("math", [semantics]);
	  math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

	  if (isDisplayMode) {
	    math.setAttribute("display", "block");
	  } // You can't style <math> nodes, so we wrap the node in a span.
	  // NOTE: The span class is not typed to have <math> nodes as children, and
	  // we don't want to make the children type more generic since the children
	  // of span are expected to have more fields in `buildHtml` contexts.


	  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

	  return buildCommon.makeSpan([wrapperClass], [math]);
	}

	var optionsFromSettings = function optionsFromSettings(settings) {
	  return new Options({
	    style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
	    maxSize: settings.maxSize,
	    minRuleThickness: settings.minRuleThickness
	  });
	};

	var displayWrap = function displayWrap(node, settings) {
	  if (settings.displayMode) {
	    var classes = ["katex-display"];

	    if (settings.leqno) {
	      classes.push("leqno");
	    }

	    if (settings.fleqn) {
	      classes.push("fleqn");
	    }

	    node = buildCommon.makeSpan(classes, [node]);
	  }

	  return node;
	};

	var buildTree = function buildTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var katexNode;

	  if (settings.output === "mathml") {
	    return buildMathML(tree, expression, options, settings.displayMode, true);
	  } else if (settings.output === "html") {
	    var htmlNode = buildHTML(tree, options);
	    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  } else {
	    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

	    var _htmlNode = buildHTML(tree, options);

	    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
	  }

	  return displayWrap(katexNode, settings);
	};
	var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var htmlNode = buildHTML(tree, options);
	  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  return displayWrap(katexNode, settings);
	};

	/**
	 * This file provides support to buildMathML.js and buildHTML.js
	 * for stretchy wide elements rendered from SVG files
	 * and other CSS trickery.
	 */
	var stretchyCodePoint = {
	  widehat: "^",
	  widecheck: "ˇ",
	  widetilde: "~",
	  utilde: "~",
	  overleftarrow: "\u2190",
	  underleftarrow: "\u2190",
	  xleftarrow: "\u2190",
	  overrightarrow: "\u2192",
	  underrightarrow: "\u2192",
	  xrightarrow: "\u2192",
	  underbrace: "\u23df",
	  overbrace: "\u23de",
	  overgroup: "\u23e0",
	  undergroup: "\u23e1",
	  overleftrightarrow: "\u2194",
	  underleftrightarrow: "\u2194",
	  xleftrightarrow: "\u2194",
	  Overrightarrow: "\u21d2",
	  xRightarrow: "\u21d2",
	  overleftharpoon: "\u21bc",
	  xleftharpoonup: "\u21bc",
	  overrightharpoon: "\u21c0",
	  xrightharpoonup: "\u21c0",
	  xLeftarrow: "\u21d0",
	  xLeftrightarrow: "\u21d4",
	  xhookleftarrow: "\u21a9",
	  xhookrightarrow: "\u21aa",
	  xmapsto: "\u21a6",
	  xrightharpoondown: "\u21c1",
	  xleftharpoondown: "\u21bd",
	  xrightleftharpoons: "\u21cc",
	  xleftrightharpoons: "\u21cb",
	  xtwoheadleftarrow: "\u219e",
	  xtwoheadrightarrow: "\u21a0",
	  xlongequal: "=",
	  xtofrom: "\u21c4",
	  xrightleftarrows: "\u21c4",
	  xrightequilibrium: "\u21cc",
	  // Not a perfect match.
	  xleftequilibrium: "\u21cb",
	  // None better available.
	  "\\cdrightarrow": "\u2192",
	  "\\cdleftarrow": "\u2190",
	  "\\cdlongequal": "="
	};

	var mathMLnode = function mathMLnode(label) {
	  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
	  node.setAttribute("stretchy", "true");
	  return node;
	}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
	// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
	// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
	// Licensed under the SIL Open Font License, Version 1.1.
	// See \nhttp://scripts.sil.org/OFL
	// Very Long SVGs
	//    Many of the KaTeX stretchy wide elements use a long SVG image and an
	//    overflow: hidden tactic to achieve a stretchy image while avoiding
	//    distortion of arrowheads or brace corners.
	//    The SVG typically contains a very long (400 em) arrow.
	//    The SVG is in a container span that has overflow: hidden, so the span
	//    acts like a window that exposes only part of the  SVG.
	//    The SVG always has a longer, thinner aspect ratio than the container span.
	//    After the SVG fills 100% of the height of the container span,
	//    there is a long arrow shaft left over. That left-over shaft is not shown.
	//    Instead, it is sliced off because the span's CSS has overflow: hidden.
	//    Thus, the reader sees an arrow that matches the subject matter width
	//    without distortion.
	//    Some functions, such as \cancel, need to vary their aspect ratio. These
	//    functions do not get the overflow SVG treatment.
	// Second Brush Stroke
	//    Low resolution monitors struggle to display images in fine detail.
	//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
	//    will sometimes appear as if it has a blurred edge.
	//    To mitigate this, these SVG files contain a second "brush-stroke" on the
	//    arrow shafts. That is, a second long thin rectangular SVG path has been
	//    written directly on top of each arrow shaft. This reinforcement causes
	//    some of the screen pixels to display as black instead of the anti-aliased
	//    gray pixel that a  single path would generate. So we get arrow shafts
	//    whose edges appear to be sharper.
	// In the katexImagesData object just below, the dimensions all
	// correspond to path geometry inside the relevant SVG.
	// For example, \overrightarrow uses the same arrowhead as glyph U+2192
	// from the KaTeX Main font. The scaling factor is 1000.
	// That is, inside the font, that arrowhead is 522 units tall, which
	// corresponds to 0.522 em inside the document.


	var katexImagesData = {
	  //   path(s), minWidth, height, align
	  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
	  "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
	  // CD minwwidth2.5pc
	  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
	  "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
	  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
	  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
	  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
	  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
	  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
	  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
	  "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
	  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
	  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
	  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
	  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
	  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
	  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
	  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
	  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
	  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
	  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
	  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
	  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
	  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
	  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
	  // The next three arrows are from the mhchem package.
	  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
	  // document as \xrightarrow or \xrightleftharpoons. Those have
	  // min-length = 1.75em, so we set min-length on these next three to match.
	  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
	  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
	  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
	};

	var groupLength = function groupLength(arg) {
	  if (arg.type === "ordgroup") {
	    return arg.body.length;
	  } else {
	    return 1;
	  }
	};

	var svgSpan = function svgSpan(group, options) {
	  // Create a span with inline SVG for the element.
	  function buildSvgSpan_() {
	    var viewBoxWidth = 400000; // default

	    var label = group.label.substr(1);

	    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
	      // Each type in the `if` statement corresponds to one of the ParseNode
	      // types below. This narrowing is required to access `grp.base`.
	      // $FlowFixMe
	      var grp = group; // There are four SVG images available for each function.
	      // Choose a taller image when there are more characters.

	      var numChars = groupLength(grp.base);
	      var viewBoxHeight;
	      var pathName;

	      var _height;

	      if (numChars > 5) {
	        if (label === "widehat" || label === "widecheck") {
	          viewBoxHeight = 420;
	          viewBoxWidth = 2364;
	          _height = 0.42;
	          pathName = label + "4";
	        } else {
	          viewBoxHeight = 312;
	          viewBoxWidth = 2340;
	          _height = 0.34;
	          pathName = "tilde4";
	        }
	      } else {
	        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

	        if (label === "widehat" || label === "widecheck") {
	          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
	          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
	          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
	          pathName = label + imgIndex;
	        } else {
	          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
	          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
	          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
	          pathName = "tilde" + imgIndex;
	        }
	      }

	      var path = new PathNode(pathName);
	      var svgNode = new SvgNode([path], {
	        "width": "100%",
	        "height": _height + "em",
	        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
	        "preserveAspectRatio": "none"
	      });
	      return {
	        span: buildCommon.makeSvgSpan([], [svgNode], options),
	        minWidth: 0,
	        height: _height
	      };
	    } else {
	      var spans = [];
	      var data = katexImagesData[label];
	      var [paths, _minWidth, _viewBoxHeight] = data;

	      var _height2 = _viewBoxHeight / 1000;

	      var numSvgChildren = paths.length;
	      var widthClasses;
	      var aligns;

	      if (numSvgChildren === 1) {
	        // $FlowFixMe: All these cases must be of the 4-tuple type.
	        var align1 = data[3];
	        widthClasses = ["hide-tail"];
	        aligns = [align1];
	      } else if (numSvgChildren === 2) {
	        widthClasses = ["halfarrow-left", "halfarrow-right"];
	        aligns = ["xMinYMin", "xMaxYMin"];
	      } else if (numSvgChildren === 3) {
	        widthClasses = ["brace-left", "brace-center", "brace-right"];
	        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
	      } else {
	        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
	      }

	      for (var i = 0; i < numSvgChildren; i++) {
	        var _path = new PathNode(paths[i]);

	        var _svgNode = new SvgNode([_path], {
	          "width": "400em",
	          "height": _height2 + "em",
	          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
	          "preserveAspectRatio": aligns[i] + " slice"
	        });

	        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

	        if (numSvgChildren === 1) {
	          return {
	            span: _span,
	            minWidth: _minWidth,
	            height: _height2
	          };
	        } else {
	          _span.style.height = _height2 + "em";
	          spans.push(_span);
	        }
	      }

	      return {
	        span: buildCommon.makeSpan(["stretchy"], spans, options),
	        minWidth: _minWidth,
	        height: _height2
	      };
	    }
	  } // buildSvgSpan_()


	  var {
	    span,
	    minWidth,
	    height
	  } = buildSvgSpan_(); // Note that we are returning span.depth = 0.
	  // Any adjustments relative to the baseline must be done in buildHTML.

	  span.height = height;
	  span.style.height = height + "em";

	  if (minWidth > 0) {
	    span.style.minWidth = minWidth + "em";
	  }

	  return span;
	};

	var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
	  // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
	  var img;
	  var totalHeight = inner.height + inner.depth + topPad + bottomPad;

	  if (/fbox|color|angl/.test(label)) {
	    img = buildCommon.makeSpan(["stretchy", label], [], options);

	    if (label === "fbox") {
	      var color = options.color && options.getColor();

	      if (color) {
	        img.style.borderColor = color;
	      }
	    }
	  } else {
	    // \cancel, \bcancel, or \xcancel
	    // Since \cancel's SVG is inline and it omits the viewBox attribute,
	    // its stroke-width will not vary with span area.
	    var lines = [];

	    if (/^[bx]cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "0",
	        "x2": "100%",
	        "y2": "100%",
	        "stroke-width": "0.046em"
	      }));
	    }

	    if (/^x?cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "100%",
	        "x2": "100%",
	        "y2": "0",
	        "stroke-width": "0.046em"
	      }));
	    }

	    var svgNode = new SvgNode(lines, {
	      "width": "100%",
	      "height": totalHeight + "em"
	    });
	    img = buildCommon.makeSvgSpan([], [svgNode], options);
	  }

	  img.height = totalHeight;
	  img.style.height = totalHeight + "em";
	  return img;
	};

	var stretchy = {
	  encloseSpan,
	  mathMLnode,
	  svgSpan
	};

	/**
	 * Asserts that the node is of the given type and returns it with stricter
	 * typing. Throws if the node's type does not match.
	 */
	function assertNodeType(node, type) {
	  if (!node || node.type !== type) {
	    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
	  } // $FlowFixMe, >=0.125


	  return node;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function assertSymbolNodeType(node) {
	  var typedNode = checkSymbolNodeType(node);

	  if (!typedNode) {
	    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
	  }

	  return typedNode;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function checkSymbolNodeType(node) {
	  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
	    // $FlowFixMe
	    return node;
	  }

	  return null;
	}

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
	// also "supsub" since an accent can affect super/subscripting.
	var htmlBuilder = (grp, options) => {
	  // Accents are handled in the TeXbook pg. 443, rule 12.
	  var base;
	  var group;
	  var supSubGroup;

	  if (grp && grp.type === "supsub") {
	    // If our base is a character box, and we have superscripts and
	    // subscripts, the supsub will defer to us. In particular, we want
	    // to attach the superscripts and subscripts to the inner body (so
	    // that the position of the superscripts and subscripts won't be
	    // affected by the height of the accent). We accomplish this by
	    // sticking the base of the accent into the base of the supsub, and
	    // rendering that, while keeping track of where the accent is.
	    // The real accent group is the base of the supsub group
	    group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

	    base = group.base; // Stick the character box into the base of the supsub group

	    grp.base = base; // Rerender the supsub group with its new base, and store that
	    // result.

	    supSubGroup = assertSpan(buildGroup(grp, options)); // reset original base

	    grp.base = group;
	  } else {
	    group = assertNodeType(grp, "accent");
	    base = group.base;
	  } // Build the base group


	  var body = buildGroup(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

	  var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
	  // nucleus is not a single character, let s = 0; otherwise set s to the
	  // kern amount for the nucleus followed by the \skewchar of its font."
	  // Note that our skew metrics are just the kern between each character
	  // and the skewchar.

	  var skew = 0;

	  if (mustShift) {
	    // If the base is a character box, then we want the skew of the
	    // innermost character. To do that, we find the innermost character:
	    var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

	    var baseGroup = buildGroup(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

	    skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
	    // removed with getBaseElem might contain things like \color which
	    // we can't get rid of.
	    // TODO(emily): Find a better way to get the skew
	  } // calculate the amount of space between the body and the accent


	  var clearance = Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

	  var accentBody;

	  if (!group.isStretchy) {
	    var accent;
	    var width;

	    if (group.label === "\\vec") {
	      // Before version 0.9, \vec used the combining font glyph U+20D7.
	      // But browsers, especially Safari, are not consistent in how they
	      // render combining characters when not preceded by a character.
	      // So now we use an SVG.
	      // If Safari reforms, we should consider reverting to the glyph.
	      accent = buildCommon.staticSvg("vec", options);
	      width = buildCommon.svgData.vec[1];
	    } else {
	      accent = buildCommon.makeOrd({
	        mode: group.mode,
	        text: group.label
	      }, options, "textord");
	      accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
	      // shift the accent over to a place we don't want.

	      accent.italic = 0;
	      width = accent.width;
	    }

	    accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
	    // at least the width of the accent, and overlap directly onto the
	    // character without any vertical offset.

	    var accentFull = group.label === "\\textcircled";

	    if (accentFull) {
	      accentBody.classes.push('accent-full');
	      clearance = body.height;
	    } // Shift the accent over by the skew.


	    var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
	    // so that the accent doesn't contribute to the bounding box.
	    // We need to shift the character by its width (effectively half
	    // its width) to compensate.

	    if (!accentFull) {
	      left -= width / 2;
	    }

	    accentBody.style.left = left + "em"; // \textcircled uses the \bigcirc glyph, so it needs some
	    // vertical adjustment to match LaTeX.

	    if (group.label === "\\textcircled") {
	      accentBody.style.top = ".2em";
	    }

	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: -clearance
	      }, {
	        type: "elem",
	        elem: accentBody
	      }]
	    }, options);
	  } else {
	    accentBody = stretchy.svgSpan(group, options);
	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"],
	        wrapperStyle: skew > 0 ? {
	          width: "calc(100% - " + 2 * skew + "em)",
	          marginLeft: 2 * skew + "em"
	        } : undefined
	      }]
	    }, options);
	  }

	  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

	  if (supSubGroup) {
	    // Here, we replace the "base" child of the supsub with our newly
	    // generated accent.
	    supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
	    // accent, we manually recalculate height.

	    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

	    supSubGroup.classes[0] = "mord";
	    return supSubGroup;
	  } else {
	    return accentWrap;
	  }
	};

	var mathmlBuilder = (group, options) => {
	  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
	  var node = new mathMLTree.MathNode("mover", [buildGroup$1(group.base, options), accentNode]);
	  node.setAttribute("accent", "true");
	  return node;
	};

	var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent => "\\" + accent).join("|")); // Accents

	defineFunction({
	  type: "accent",
	  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
	  props: {
	    numArgs: 1
	  },
	  handler: (context, args) => {
	    var base = normalizeArgument(args[0]);
	    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
	    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
	    return {
	      type: "accent",
	      mode: context.parser.mode,
	      label: context.funcName,
	      isStretchy: isStretchy,
	      isShifty: isShifty,
	      base: base
	    };
	  },
	  htmlBuilder,
	  mathmlBuilder
	}); // Text-mode accents

	defineFunction({
	  type: "accent",
	  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v", "\\textcircled"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    allowedInMath: true,
	    // unless in strict mode
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var base = args[0];
	    var mode = context.parser.mode;

	    if (mode === "math") {
	      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
	      mode = "text";
	    }

	    return {
	      type: "accent",
	      mode: mode,
	      label: context.funcName,
	      isStretchy: false,
	      isShifty: true,
	      base: base
	    };
	  },
	  htmlBuilder,
	  mathmlBuilder
	});

	// Horizontal overlap functions
	defineFunction({
	  type: "accentUnder",
	  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var base = args[0];
	    return {
	      type: "accentUnder",
	      mode: parser.mode,
	      label: funcName,
	      base: base
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // Treat under accents much like underlines.
	    var innerGroup = buildGroup(group.base, options);
	    var accentBody = stretchy.svgSpan(group, options);
	    var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: kern
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var accentNode = stretchy.mathMLnode(group.label);
	    var node = new mathMLTree.MathNode("munder", [buildGroup$1(group.base, options), accentNode]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }
	});

	// Helper function
	var paddedNode = group => {
	  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
	  node.setAttribute("width", "+0.6em");
	  node.setAttribute("lspace", "0.3em");
	  return node;
	}; // Stretchy arrows with an optional argument


	defineFunction({
	  type: "xArrow",
	  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
	  // Direct use of these functions is discouraged and may break someday.
	  "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
	  "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "xArrow",
	      mode: parser.mode,
	      label: funcName,
	      body: args[0],
	      below: optArgs[0]
	    };
	  },

	  // Flow is unable to correctly infer the type of `group`, even though it's
	  // unamibiguously determined from the passed-in `type` above.
	  htmlBuilder(group, options) {
	    var style = options.style; // Build the argument groups in the appropriate style.
	    // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
	    // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.

	    var newOptions = options.havingStyle(style.sup());
	    var upperGroup = buildCommon.wrapFragment(buildGroup(group.body, newOptions, options), options);
	    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
	    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
	    var lowerGroup;

	    if (group.below) {
	      // Build the lower group
	      newOptions = options.havingStyle(style.sub());
	      lowerGroup = buildCommon.wrapFragment(buildGroup(group.below, newOptions, options), options);
	      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
	    }

	    var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
	    // The point we want on the math axis is at 0.5 * arrowBody.height.

	    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

	    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

	    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
	      upperShift -= upperGroup.depth; // shift up if depth encroaches
	    } // Generate the vlist


	    var vlist;

	    if (lowerGroup) {
	      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }, {
	          type: "elem",
	          elem: lowerGroup,
	          shift: lowerShift
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }]
	      }, options);
	    } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var arrowNode = stretchy.mathMLnode(group.label);
	    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
	    var node;

	    if (group.body) {
	      var upperNode = paddedNode(buildGroup$1(group.body, options));

	      if (group.below) {
	        var lowerNode = paddedNode(buildGroup$1(group.below, options));
	        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
	      } else {
	        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
	      }
	    } else if (group.below) {
	      var _lowerNode = paddedNode(buildGroup$1(group.below, options));

	      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
	    } else {
	      // This should never happen.
	      // Parser.js throws an error if there is no argument.
	      node = paddedNode();
	      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
	    }

	    return node;
	  }

	});

	var cdArrowFunctionName = {
	  ">": "\\\\cdrightarrow",
	  "<": "\\\\cdleftarrow",
	  "=": "\\\\cdlongequal",
	  "A": "\\uparrow",
	  "V": "\\downarrow",
	  "|": "\\Vert",
	  ".": "no arrow"
	};

	var newCell = () => {
	  // Create an empty cell, to be filled below with parse nodes.
	  // The parseTree from this module must be constructed like the
	  // one created by parseArray(), so an empty CD cell must
	  // be a ParseNode<"styling">. And CD is always displaystyle.
	  // So these values are fixed and flow can do implicit typing.
	  return {
	    type: "styling",
	    body: [],
	    mode: "math",
	    style: "display"
	  };
	};

	var isStartOfArrow = node => {
	  return node.type === "textord" && node.text === "@";
	};

	var isLabelEnd = (node, endChar) => {
	  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
	};

	function cdArrow(arrowChar, labels, parser) {
	  // Return a parse tree of an arrow and its labels.
	  // This acts in a way similar to a macro expansion.
	  var funcName = cdArrowFunctionName[arrowChar];

	  switch (funcName) {
	    case "\\\\cdrightarrow":
	    case "\\\\cdleftarrow":
	      return parser.callFunction(funcName, [labels[0]], [labels[1]]);

	    case "\\uparrow":
	    case "\\downarrow":
	      {
	        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
	        var bareArrow = {
	          type: "atom",
	          text: funcName,
	          mode: "math",
	          family: "rel"
	        };
	        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
	        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
	        var arrowGroup = {
	          type: "ordgroup",
	          mode: "math",
	          body: [leftLabel, sizedArrow, rightLabel]
	        };
	        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
	      }

	    case "\\\\cdlongequal":
	      return parser.callFunction("\\\\cdlongequal", [], []);

	    case "\\Vert":
	      {
	        var arrow = {
	          type: "textord",
	          text: "\\Vert",
	          mode: "math"
	        };
	        return parser.callFunction("\\Big", [arrow], []);
	      }

	    default:
	      return {
	        type: "textord",
	        text: " ",
	        mode: "math"
	      };
	  }
	}

	function parseCD(parser) {
	  // Get the array's parse nodes with \\ temporarily mapped to \cr.
	  var parsedRows = [];
	  parser.gullet.beginGroup();
	  parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  parser.gullet.beginGroup();

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Get the parse nodes for the next row.
	    parsedRows.push(parser.parseExpression(false, "\\\\"));
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    var next = parser.fetch().text;

	    if (next === "&" || next === "\\\\") {
	      parser.consume();
	    } else if (next === "\\end") {
	      if (parsedRows[parsedRows.length - 1].length === 0) {
	        parsedRows.pop(); // final row ended in \\
	      }

	      break;
	    } else {
	      throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  }

	  var row = [];
	  var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

	  for (var i = 0; i < parsedRows.length; i++) {
	    // Start a new row.
	    var rowNodes = parsedRows[i]; // Create the first cell.

	    var cell = newCell();

	    for (var j = 0; j < rowNodes.length; j++) {
	      if (!isStartOfArrow(rowNodes[j])) {
	        // If a parseNode is not an arrow, it goes into a cell.
	        cell.body.push(rowNodes[j]);
	      } else {
	        // Parse node j is an "@", the start of an arrow.
	        // Before starting on the arrow, push the cell into `row`.
	        row.push(cell); // Now collect parseNodes into an arrow.
	        // The character after "@" defines the arrow type.

	        j += 1;
	        var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

	        var labels = new Array(2);
	        labels[0] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        };
	        labels[1] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        }; // Process the arrow.

	        if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
	          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
	          // two optional labels. E.g. the right-point arrow syntax is
	          // really:  @>{optional label}>{optional label}>
	          // Collect parseNodes into labels.
	          for (var labelNum = 0; labelNum < 2; labelNum++) {
	            var inLabel = true;

	            for (var k = j + 1; k < rowNodes.length; k++) {
	              if (isLabelEnd(rowNodes[k], arrowChar)) {
	                inLabel = false;
	                j = k;
	                break;
	              }

	              if (isStartOfArrow(rowNodes[k])) {
	                throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
	              }

	              labels[labelNum].body.push(rowNodes[k]);
	            }

	            if (inLabel) {
	              // isLabelEnd never returned a true.
	              throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
	            }
	          }
	        } else {
	          throw new ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
	        } // Now join the arrow to its labels.


	        var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
	        // This is done to match parseArray() behavior.

	        var wrappedArrow = {
	          type: "styling",
	          body: [arrow],
	          mode: "math",
	          style: "display" // CD is always displaystyle.

	        };
	        row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
	        // is not an arrow gets collected into a cell. So create an empty
	        // cell now. It will collect upcoming parseNodes.

	        cell = newCell();
	      }
	    }

	    if (i % 2 === 0) {
	      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
	      // The last cell is not yet pushed into `row`, so:
	      row.push(cell);
	    } else {
	      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
	      // Remove the empty cell that was placed at the beginning of `row`.
	      row.shift();
	    }

	    row = [];
	    body.push(row);
	  } // End row group


	  parser.gullet.endGroup(); // End array group defining \\

	  parser.gullet.endGroup(); // define column separation.

	  var cols = new Array(body[0].length).fill({
	    type: "align",
	    align: "c",
	    pregap: 0.25,
	    // CD package sets \enskip between columns.
	    postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

	  });
	  return {
	    type: "array",
	    mode: "math",
	    body,
	    arraystretch: 1,
	    addJot: true,
	    rowGaps: [null],
	    cols,
	    colSeparationType: "CD",
	    hLinesBeforeRow: new Array(body.length + 1).fill([])
	  };
	} // The functions below are not available for general use.
	// They are here only for internal use by the {CD} environment in placing labels
	// next to vertical arrows.
	// We don't need any such functions for horizontal arrows because we can reuse
	// the functionality that already exists for extensible arrows.

	defineFunction({
	  type: "cdlabel",
	  names: ["\\\\cdleft", "\\\\cdright"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "cdlabel",
	      mode: parser.mode,
	      side: funcName.slice(4),
	      label: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = options.havingStyle(options.style.sup());
	    var label = buildCommon.wrapFragment(buildGroup(group.label, newOptions, options), options);
	    label.classes.push("cd-label-" + group.side);
	    label.style.bottom = 0.8 - label.depth + "em"; // Zero out label height & depth, so vertical align of arrow is set
	    // by the arrow height, not by the label.

	    label.height = 0;
	    label.depth = 0;
	    return label;
	  },

	  mathmlBuilder(group, options) {
	    var label = new mathMLTree.MathNode("mrow", [buildGroup$1(group.label, options)]);
	    label = new mathMLTree.MathNode("mpadded", [label]);
	    label.setAttribute("width", "0");

	    if (group.side === "left") {
	      label.setAttribute("lspace", "-1width");
	    } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
	    // But we don't know the height or depth of the label.


	    label.setAttribute("voffset", "0.7em");
	    label = new mathMLTree.MathNode("mstyle", [label]);
	    label.setAttribute("displaystyle", "false");
	    label.setAttribute("scriptlevel", "1");
	    return label;
	  }

	});
	defineFunction({
	  type: "cdlabelparent",
	  names: ["\\\\cdparent"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "cdlabelparent",
	      mode: parser.mode,
	      fragment: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Wrap the vertical arrow and its labels.
	    // The parent gets position: relative. The child gets position: absolute.
	    // So CSS can locate the label correctly.
	    var parent = buildCommon.wrapFragment(buildGroup(group.fragment, options), options);
	    parent.classes.push("cd-vert-arrow");
	    return parent;
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", [buildGroup$1(group.fragment, options)]);
	  }

	});

	// {123} and converts into symbol with code 123.  It is used by the *macro*
	// \char defined in macros.js.

	defineFunction({
	  type: "textord",
	  names: ["\\@char"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var arg = assertNodeType(args[0], "ordgroup");
	    var group = arg.body;
	    var number = "";

	    for (var i = 0; i < group.length; i++) {
	      var node = assertNodeType(group[i], "textord");
	      number += node.text;
	    }

	    var code = parseInt(number);

	    if (isNaN(code)) {
	      throw new ParseError("\\@char has non-numeric argument " + number);
	    }

	    return {
	      type: "textord",
	      mode: parser.mode,
	      text: String.fromCharCode(code)
	    };
	  }

	});

	var htmlBuilder$1 = (group, options) => {
	  var elements = buildExpression(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
	  // To accomplish this, we wrap the results in a fragment, so the inner
	  // elements will be able to directly interact with their neighbors. For
	  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

	  return buildCommon.makeFragment(elements);
	};

	var mathmlBuilder$1 = (group, options) => {
	  var inner = buildExpression$1(group.body, options.withColor(group.color));
	  var node = new mathMLTree.MathNode("mstyle", inner);
	  node.setAttribute("mathcolor", group.color);
	  return node;
	};

	defineFunction({
	  type: "color",
	  names: ["\\textcolor"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "original"]
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body: ordargument(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$1,
	  mathmlBuilder: mathmlBuilder$1
	});
	defineFunction({
	  type: "color",
	  names: ["\\color"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    argTypes: ["color"]
	  },

	  handler(_ref2, args) {
	    var {
	      parser,
	      breakOnTokenText
	    } = _ref2;
	    var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
	    // color, mimicking the behavior of color.sty.
	    // This is currently used just to correctly color a \right
	    // that follows a \color command.

	    parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

	    var body = parser.parseExpression(true, breakOnTokenText);
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$1,
	  mathmlBuilder: mathmlBuilder$1
	});

	// Row breaks within tabular environments, and line breaks at top level

	defineFunction({
	  type: "cr",
	  names: ["\\\\"],
	  props: {
	    numArgs: 0,
	    numOptionalArgs: 1,
	    argTypes: ["size"],
	    allowedInText: true
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var size = optArgs[0];
	    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
	    return {
	      type: "cr",
	      mode: parser.mode,
	      newLine,
	      size: size && assertNodeType(size, "size").value
	    };
	  },

	  // The following builders are called only at the top level,
	  // not within tabular/array environments.
	  htmlBuilder(group, options) {
	    var span = buildCommon.makeSpan(["mspace"], [], options);

	    if (group.newLine) {
	      span.classes.push("newline");

	      if (group.size) {
	        span.style.marginTop = calculateSize(group.size, options) + "em";
	      }
	    }

	    return span;
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mspace");

	    if (group.newLine) {
	      node.setAttribute("linebreak", "newline");

	      if (group.size) {
	        node.setAttribute("height", calculateSize(group.size, options) + "em");
	      }
	    }

	    return node;
	  }

	});

	var globalMap = {
	  "\\global": "\\global",
	  "\\long": "\\\\globallong",
	  "\\\\globallong": "\\\\globallong",
	  "\\def": "\\gdef",
	  "\\gdef": "\\gdef",
	  "\\edef": "\\xdef",
	  "\\xdef": "\\xdef",
	  "\\let": "\\\\globallet",
	  "\\futurelet": "\\\\globalfuture"
	};

	var checkControlSequence = tok => {
	  var name = tok.text;

	  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	    throw new ParseError("Expected a control sequence", tok);
	  }

	  return name;
	};

	var getRHS = parser => {
	  var tok = parser.gullet.popToken();

	  if (tok.text === "=") {
	    // consume optional equals
	    tok = parser.gullet.popToken();

	    if (tok.text === " ") {
	      // consume one optional space
	      tok = parser.gullet.popToken();
	    }
	  }

	  return tok;
	};

	var letCommand = (parser, name, tok, global) => {
	  var macro = parser.gullet.macros.get(tok.text);

	  if (macro == null) {
	    // don't expand it later even if a macro with the same name is defined
	    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
	    tok.noexpand = true;
	    macro = {
	      tokens: [tok],
	      numArgs: 0,
	      // reproduce the same behavior in expansion
	      unexpandable: !parser.gullet.isExpandable(tok.text)
	    };
	  }

	  parser.gullet.macros.set(name, macro, global);
	}; // <assignment> -> <non-macro assignment>|<macro assignment>
	// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
	// <macro assignment> -> <definition>|<prefix><macro assignment>
	// <prefix> -> \global|\long|\outer


	defineFunction({
	  type: "internal",
	  names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(_ref) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    parser.consumeSpaces();
	    var token = parser.fetch();

	    if (globalMap[token.text]) {
	      // KaTeX doesn't have \par, so ignore \long
	      if (funcName === "\\global" || funcName === "\\\\globallong") {
	        token.text = globalMap[token.text];
	      }

	      return assertNodeType(parser.parseFunction(), "internal");
	    }

	    throw new ParseError("Invalid token after macro prefix", token);
	  }

	}); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
	// <definition> -> <def><control sequence><definition text>
	// <def> -> \def|\gdef|\edef|\xdef
	// <definition text> -> <parameter text><left brace><balanced text><right brace>

	defineFunction({
	  type: "internal",
	  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref2) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var tok = parser.gullet.popToken();
	    var name = tok.text;

	    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	      throw new ParseError("Expected a control sequence", tok);
	    }

	    var numArgs = 0;
	    var insert;
	    var delimiters = [[]]; // <parameter text> contains no braces

	    while (parser.gullet.future().text !== "{") {
	      tok = parser.gullet.popToken();

	      if (tok.text === "#") {
	        // If the very last character of the <parameter text> is #, so that
	        // this # is immediately followed by {, TeX will behave as if the {
	        // had been inserted at the right end of both the parameter text
	        // and the replacement text.
	        if (parser.gullet.future().text === "{") {
	          insert = parser.gullet.future();
	          delimiters[numArgs].push("{");
	          break;
	        } // A parameter, the first appearance of # must be followed by 1,
	        // the next by 2, and so on; up to nine #’s are allowed


	        tok = parser.gullet.popToken();

	        if (!/^[1-9]$/.test(tok.text)) {
	          throw new ParseError("Invalid argument number \"" + tok.text + "\"");
	        }

	        if (parseInt(tok.text) !== numArgs + 1) {
	          throw new ParseError("Argument number \"" + tok.text + "\" out of order");
	        }

	        numArgs++;
	        delimiters.push([]);
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Expected a macro definition");
	      } else {
	        delimiters[numArgs].push(tok.text);
	      }
	    } // replacement text, enclosed in '{' and '}' and properly nested


	    var {
	      tokens
	    } = parser.gullet.consumeArg();

	    if (insert) {
	      tokens.unshift(insert);
	    }

	    if (funcName === "\\edef" || funcName === "\\xdef") {
	      tokens = parser.gullet.expandTokens(tokens);
	      tokens.reverse(); // to fit in with stack order
	    } // Final arg is the expansion of the macro


	    parser.gullet.macros.set(name, {
	      tokens,
	      numArgs,
	      delimiters
	    }, funcName === globalMap[funcName]);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // <simple assignment> -> <let assignment>
	// <let assignment> -> \futurelet<control sequence><token><token>
	//     | \let<control sequence><equals><one optional space><token>
	// <equals> -> <optional spaces>|<optional spaces>=

	defineFunction({
	  type: "internal",
	  names: ["\\let", "\\\\globallet" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var name = checkControlSequence(parser.gullet.popToken());
	    parser.gullet.consumeSpaces();
	    var tok = getRHS(parser);
	    letCommand(parser, name, tok, funcName === "\\\\globallet");
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

	defineFunction({
	  type: "internal",
	  names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var name = checkControlSequence(parser.gullet.popToken());
	    var middle = parser.gullet.popToken();
	    var tok = parser.gullet.popToken();
	    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
	    parser.gullet.pushToken(tok);
	    parser.gullet.pushToken(middle);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	});

	/**
	 * This file deals with creating delimiters of various sizes. The TeXbook
	 * discusses these routines on page 441-442, in the "Another subroutine sets box
	 * x to a specified variable delimiter" paragraph.
	 *
	 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
	 * normal font, but in either text, script, or scriptscript style.
	 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
	 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
	 * smaller pieces that are stacked on top of one another.
	 *
	 * The functions take a parameter `center`, which determines if the delimiter
	 * should be centered around the axis.
	 *
	 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
	 * one of the given sizes. This is used for things like `\bigl`.
	 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
	 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
	 * delimiter which surrounds an expression of a given height an depth. It is
	 * used in `\left` and `\right`.
	 */

	/**
	 * Get the metrics for a given symbol and font, after transformation (i.e.
	 * after following replacement from symbols.js)
	 */
	var getMetrics = function getMetrics(symbol, font, mode) {
	  var replace = symbols.math[symbol] && symbols.math[symbol].replace;
	  var metrics = getCharacterMetrics(replace || symbol, font, mode);

	  if (!metrics) {
	    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
	  }

	  return metrics;
	};
	/**
	 * Puts a delimiter span in a given style, and adds appropriate height, depth,
	 * and maxFontSizes.
	 */


	var styleWrap = function styleWrap(delim, toStyle, options, classes) {
	  var newOptions = options.havingBaseStyle(toStyle);
	  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
	  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
	  span.height *= delimSizeMultiplier;
	  span.depth *= delimSizeMultiplier;
	  span.maxFontSize = newOptions.sizeMultiplier;
	  return span;
	};

	var centerSpan = function centerSpan(span, options, style) {
	  var newOptions = options.havingBaseStyle(style);
	  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
	  span.classes.push("delimcenter");
	  span.style.top = shift + "em";
	  span.height -= shift;
	  span.depth += shift;
	};
	/**
	 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
	 * font, but is restyled to either be in textstyle, scriptstyle, or
	 * scriptscriptstyle.
	 */


	var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
	  var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
	  var span = styleWrap(text, style, options, classes);

	  if (center) {
	    centerSpan(span, options, style);
	  }

	  return span;
	};
	/**
	 * Builds a symbol in the given font size (note size is an integer)
	 */


	var mathrmSize = function mathrmSize(value, size, mode, options) {
	  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
	};
	/**
	 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
	 * Size3, or Size4 fonts. It is always rendered in textstyle.
	 */


	var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
	  var inner = mathrmSize(delim, size, mode, options);
	  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), Style$1.TEXT, options, classes);

	  if (center) {
	    centerSpan(span, options, Style$1.TEXT);
	  }

	  return span;
	};
	/**
	 * Make a span from a font glyph with the given offset and in the given font.
	 * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
	 */


	var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
	  var sizeClass; // Apply the correct CSS class to choose the right font.

	  if (font === "Size1-Regular") {
	    sizeClass = "delim-size1";
	  } else
	    /* if (font === "Size4-Regular") */
	    {
	      sizeClass = "delim-size4";
	    }

	  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
	  // in the appropriate tag that VList uses.

	  return {
	    type: "elem",
	    elem: corner
	  };
	};

	var makeInner = function makeInner(ch, height, options) {
	  // Create a span with inline SVG for the inner part of a tall stacked delimiter.
	  var width = fontMetricsData['Size4-Regular'][ch.charCodeAt(0)] ? fontMetricsData['Size4-Regular'][ch.charCodeAt(0)][4].toFixed(3) : fontMetricsData['Size1-Regular'][ch.charCodeAt(0)][4].toFixed(3);
	  var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
	  var svgNode = new SvgNode([path], {
	    "width": width + "em",
	    "height": height + "em",
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + width + "em",
	    "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = buildCommon.makeSvgSpan([], [svgNode], options);
	  span.height = height;
	  span.style.height = height + "em";
	  span.style.width = width + "em";
	  return {
	    type: "elem",
	    elem: span
	  };
	}; // Helpers for makeStackedDelim


	var lapInEms = 0.008;
	var lap = {
	  type: "kern",
	  size: -1 * lapInEms
	};
	var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
	var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
	/**
	 * Make a stacked delimiter out of a given delimiter, with the total height at
	 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
	 */

	var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
	  // There are four parts, the top, an optional middle, a repeated part, and a
	  // bottom.
	  var top;
	  var middle;
	  var repeat;
	  var bottom;
	  top = repeat = bottom = delim;
	  middle = null; // Also keep track of what font the delimiters are in

	  var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
	  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
	  // repeats of the arrows

	  if (delim === "\\uparrow") {
	    repeat = bottom = "\u23d0";
	  } else if (delim === "\\Uparrow") {
	    repeat = bottom = "\u2016";
	  } else if (delim === "\\downarrow") {
	    top = repeat = "\u23d0";
	  } else if (delim === "\\Downarrow") {
	    top = repeat = "\u2016";
	  } else if (delim === "\\updownarrow") {
	    top = "\\uparrow";
	    repeat = "\u23d0";
	    bottom = "\\downarrow";
	  } else if (delim === "\\Updownarrow") {
	    top = "\\Uparrow";
	    repeat = "\u2016";
	    bottom = "\\Downarrow";
	  } else if (utils.contains(verts, delim)) {
	    repeat = "\u2223";
	  } else if (utils.contains(doubleVerts, delim)) {
	    repeat = "\u2225";
	  } else if (delim === "[" || delim === "\\lbrack") {
	    top = "\u23a1";
	    repeat = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "]" || delim === "\\rbrack") {
	    top = "\u23a4";
	    repeat = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\lfloor" || delim === "\u230a") {
	    repeat = top = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "\\lceil" || delim === "\u2308") {
	    top = "\u23a1";
	    repeat = bottom = "\u23a2";
	    font = "Size4-Regular";
	  } else if (delim === "\\rfloor" || delim === "\u230b") {
	    repeat = top = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\rceil" || delim === "\u2309") {
	    top = "\u23a4";
	    repeat = bottom = "\u23a5";
	    font = "Size4-Regular";
	  } else if (delim === "(" || delim === "\\lparen") {
	    top = "\u239b";
	    repeat = "\u239c";
	    bottom = "\u239d";
	    font = "Size4-Regular";
	  } else if (delim === ")" || delim === "\\rparen") {
	    top = "\u239e";
	    repeat = "\u239f";
	    bottom = "\u23a0";
	    font = "Size4-Regular";
	  } else if (delim === "\\{" || delim === "\\lbrace") {
	    top = "\u23a7";
	    middle = "\u23a8";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\}" || delim === "\\rbrace") {
	    top = "\u23ab";
	    middle = "\u23ac";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lgroup" || delim === "\u27ee") {
	    top = "\u23a7";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rgroup" || delim === "\u27ef") {
	    top = "\u23ab";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lmoustache" || delim === "\u23b0") {
	    top = "\u23a7";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rmoustache" || delim === "\u23b1") {
	    top = "\u23ab";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } // Get the metrics of the four sections


	  var topMetrics = getMetrics(top, font, mode);
	  var topHeightTotal = topMetrics.height + topMetrics.depth;
	  var repeatMetrics = getMetrics(repeat, font, mode);
	  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
	  var bottomMetrics = getMetrics(bottom, font, mode);
	  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
	  var middleHeightTotal = 0;
	  var middleFactor = 1;

	  if (middle !== null) {
	    var middleMetrics = getMetrics(middle, font, mode);
	    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
	    middleFactor = 2; // repeat symmetrically above and below middle
	  } // Calcuate the minimal height that the delimiter can have.
	  // It is at least the size of the top, bottom, and optional middle combined.


	  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

	  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

	  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
	  // that in this context, "center" means that the delimiter should be
	  // centered around the axis in the current style, while normally it is
	  // centered around the axis in textstyle.

	  var axisHeight = options.fontMetrics().axisHeight;

	  if (center) {
	    axisHeight *= options.sizeMultiplier;
	  } // Calculate the depth


	  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
	  // Keep a list of the pieces of the stacked delimiter

	  var stack = []; // Add the bottom symbol

	  stack.push(makeGlyphSpan(bottom, font, mode));
	  stack.push(lap); // overlap

	  if (middle === null) {
	    // The middle section will be an SVG. Make it an extra 0.016em tall.
	    // We'll overlap by 0.008em at top and bottom.
	    var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
	    stack.push(makeInner(repeat, innerHeight, options));
	  } else {
	    // When there is a middle bit, we need the middle part and two repeated
	    // sections
	    var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

	    stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

	    stack.push(lap);
	    stack.push(makeGlyphSpan(middle, font, mode));
	    stack.push(lap);
	    stack.push(makeInner(repeat, _innerHeight, options));
	  } // Add the top symbol


	  stack.push(lap);
	  stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

	  var newOptions = options.havingBaseStyle(Style$1.TEXT);
	  var inner = buildCommon.makeVList({
	    positionType: "bottom",
	    positionData: depth,
	    children: stack
	  }, newOptions);
	  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), Style$1.TEXT, options, classes);
	}; // All surds have 0.08em padding above the viniculum inside the SVG.
	// That keeps browser span height rounding error from pinching the line.


	var vbPad = 80; // padding above the surd, measured inside the viewBox.

	var emPad = 0.08; // padding, in ems, measured in the document.

	var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
	  var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
	  var pathNode = new PathNode(sqrtName, path);
	  var svg = new SvgNode([pathNode], {
	    // Note: 1000:1 ratio of viewBox to document em width.
	    "width": "400em",
	    "height": height + "em",
	    "viewBox": "0 0 400000 " + viewBoxHeight,
	    "preserveAspectRatio": "xMinYMin slice"
	  });
	  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
	};
	/**
	 * Make a sqrt image of the given height,
	 */


	var makeSqrtImage = function makeSqrtImage(height, options) {
	  // Define a newOptions that removes the effect of size changes such as \Huge.
	  // We don't pick different a height surd for \Huge. For it, we scale up.
	  var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

	  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
	  var sizeMultiplier = newOptions.sizeMultiplier; // default
	  // The standard sqrt SVGs each have a 0.04em thick viniculum.
	  // If Settings.minRuleThickness is larger than that, we add extraViniculum.

	  var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

	  var span;
	  var spanHeight = 0;
	  var texHeight = 0;
	  var viewBoxHeight = 0;
	  var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
	  // Then browser rounding error on the parent span height will not
	  // encroach on the ink of the viniculum. But that padding is not
	  // included in the TeX-like `height` used for calculation of
	  // vertical alignment. So texHeight = span.height < span.style.height.

	  if (delim.type === "small") {
	    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
	    // 1000 unit normal glyph height.
	    viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

	    if (height < 1.0) {
	      sizeMultiplier = 1.0; // mimic a \textfont radical
	    } else if (height < 1.4) {
	      sizeMultiplier = 0.7; // mimic a \scriptfont radical
	    }

	    spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
	    texHeight = (1.00 + extraViniculum) / sizeMultiplier;
	    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.853em";
	    advanceWidth = 0.833 / sizeMultiplier; // from the font.
	  } else if (delim.type === "large") {
	    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
	    viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
	    texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
	    spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
	    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "1.02em";
	    advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
	  } else {
	    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
	    // We'll use a single SVG to accomplish the same thing.
	    spanHeight = height + extraViniculum + emPad;
	    texHeight = height + extraViniculum;
	    viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
	    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.742em";
	    advanceWidth = 1.056;
	  }

	  span.height = texHeight;
	  span.style.height = spanHeight + "em";
	  return {
	    span,
	    advanceWidth,
	    // Calculate the actual line width.
	    // This actually should depend on the chosen font -- e.g. \boldmath
	    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
	    // have thicker rules.
	    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
	  };
	}; // There are three kinds of delimiters, delimiters that stack when they become
	// too large


	var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

	var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1"]; // and delimiters that never stack

	var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
	// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
	// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

	var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
	/**
	 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
	 */

	var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
	  // < and > turn into \langle and \rangle in delimiters
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Sized delimiters are never centered.


	  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
	    return makeLargeDelim(delim, size, false, options, mode, classes);
	  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
	    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
	  } else {
	    throw new ParseError("Illegal delimiter: '" + delim + "'");
	  }
	};
	/**
	 * There are three different sequences of delimiter sizes that the delimiters
	 * follow depending on the kind of delimiter. This is used when creating custom
	 * sized delimiters to decide whether to create a small, large, or stacked
	 * delimiter.
	 *
	 * In real TeX, these sequences aren't explicitly defined, but are instead
	 * defined inside the font metrics. Since there are only three sequences that
	 * are possible for the delimiters that TeX defines, it is easier to just encode
	 * them explicitly here.
	 */


	// Delimiters that never stack try small delimiters and large delimiters only
	var stackNeverDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}]; // Delimiters that always stack try the small delimiters first, then stack

	var stackAlwaysDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "stack"
	}]; // Delimiters that stack when large try the small and then large delimiters, and
	// stack afterwards

	var stackLargeDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}, {
	  type: "stack"
	}];
	/**
	 * Get the font used in a delimiter based on what kind of delimiter it is.
	 * TODO(#963) Use more specific font family return type once that is introduced.
	 */

	var delimTypeToFont = function delimTypeToFont(type) {
	  if (type.type === "small") {
	    return "Main-Regular";
	  } else if (type.type === "large") {
	    return "Size" + type.size + "-Regular";
	  } else if (type.type === "stack") {
	    return "Size4-Regular";
	  } else {
	    throw new Error("Add support for delim type '" + type.type + "' here.");
	  }
	};
	/**
	 * Traverse a sequence of types of delimiters to decide what kind of delimiter
	 * should be used to create a delimiter of the given height+depth.
	 */


	var traverseSequence = function traverseSequence(delim, height, sequence, options) {
	  // Here, we choose the index we should start at in the sequences. In smaller
	  // sizes (which correspond to larger numbers in style.size) we start earlier
	  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
	  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
	  var start = Math.min(2, 3 - options.style.size);

	  for (var i = start; i < sequence.length; i++) {
	    if (sequence[i].type === "stack") {
	      // This is always the last delimiter, so we just break the loop now.
	      break;
	    }

	    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
	    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
	    // account for the style change size.

	    if (sequence[i].type === "small") {
	      var newOptions = options.havingBaseStyle(sequence[i].style);
	      heightDepth *= newOptions.sizeMultiplier;
	    } // Check if the delimiter at this size works for the given height.


	    if (heightDepth > height) {
	      return sequence[i];
	    }
	  } // If we reached the end of the sequence, return the last sequence element.


	  return sequence[sequence.length - 1];
	};
	/**
	 * Make a delimiter of a given height+depth, with optional centering. Here, we
	 * traverse the sequences, and create a delimiter that the sequence tells us to.
	 */


	var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Decide what sequence to use


	  var sequence;

	  if (utils.contains(stackNeverDelimiters, delim)) {
	    sequence = stackNeverDelimiterSequence;
	  } else if (utils.contains(stackLargeDelimiters, delim)) {
	    sequence = stackLargeDelimiterSequence;
	  } else {
	    sequence = stackAlwaysDelimiterSequence;
	  } // Look through the sequence


	  var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
	  // Depending on the sequence element we decided on, call the
	  // appropriate function.

	  if (delimType.type === "small") {
	    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
	  } else if (delimType.type === "large") {
	    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
	  } else
	    /* if (delimType.type === "stack") */
	    {
	      return makeStackedDelim(delim, height, center, options, mode, classes);
	    }
	};
	/**
	 * Make a delimiter for use with `\left` and `\right`, given a height and depth
	 * of an expression that the delimiters surround.
	 */


	var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
	  // We always center \left/\right delimiters, so the axis is always shifted
	  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

	  var delimiterFactor = 901;
	  var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
	  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
	  var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
	  // 65536 per pt, or 655360 per em. So, the division here truncates in
	  // TeX but doesn't here, producing different results. If we wanted to
	  // exactly match TeX's calculation, we could do
	  //   Math.floor(655360 * maxDistFromAxis / 500) *
	  //    delimiterFactor / 655360
	  // (To see the difference, compare
	  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
	  // in TeX and KaTeX)
	  maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
	  // height

	  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
	};

	var delimiter = {
	  sqrtImage: makeSqrtImage,
	  sizedDelim: makeSizedDelim,
	  sizeToMaxHeight: sizeToMaxHeight,
	  customSizedDelim: makeCustomSizedDelim,
	  leftRightDelim: makeLeftRightDelim
	};

	// Extra data needed for the delimiter handler down below
	var delimiterSizes = {
	  "\\bigl": {
	    mclass: "mopen",
	    size: 1
	  },
	  "\\Bigl": {
	    mclass: "mopen",
	    size: 2
	  },
	  "\\biggl": {
	    mclass: "mopen",
	    size: 3
	  },
	  "\\Biggl": {
	    mclass: "mopen",
	    size: 4
	  },
	  "\\bigr": {
	    mclass: "mclose",
	    size: 1
	  },
	  "\\Bigr": {
	    mclass: "mclose",
	    size: 2
	  },
	  "\\biggr": {
	    mclass: "mclose",
	    size: 3
	  },
	  "\\Biggr": {
	    mclass: "mclose",
	    size: 4
	  },
	  "\\bigm": {
	    mclass: "mrel",
	    size: 1
	  },
	  "\\Bigm": {
	    mclass: "mrel",
	    size: 2
	  },
	  "\\biggm": {
	    mclass: "mrel",
	    size: 3
	  },
	  "\\Biggm": {
	    mclass: "mrel",
	    size: 4
	  },
	  "\\big": {
	    mclass: "mord",
	    size: 1
	  },
	  "\\Big": {
	    mclass: "mord",
	    size: 2
	  },
	  "\\bigg": {
	    mclass: "mord",
	    size: 3
	  },
	  "\\Bigg": {
	    mclass: "mord",
	    size: 4
	  }
	};
	var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27e8", "\\rangle", "\u27e9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

	// Delimiter functions
	function checkDelimiter(delim, context) {
	  var symDelim = checkSymbolNodeType(delim);

	  if (symDelim && utils.contains(delimiters, symDelim.text)) {
	    return symDelim;
	  } else if (symDelim) {
	    throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
	  } else {
	    throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
	  }
	}

	defineFunction({
	  type: "delimsizing",
	  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
	  props: {
	    numArgs: 1,
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    return {
	      type: "delimsizing",
	      mode: context.parser.mode,
	      size: delimiterSizes[context.funcName].size,
	      mclass: delimiterSizes[context.funcName].mclass,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    if (group.delim === ".") {
	      // Empty delimiters still count as elements, even though they don't
	      // show anything.
	      return buildCommon.makeSpan([group.mclass]);
	    } // Use delimiter.sizedDelim to generate the delimiter.


	    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
	  },
	  mathmlBuilder: group => {
	    var children = [];

	    if (group.delim !== ".") {
	      children.push(makeText(group.delim, group.mode));
	    }

	    var node = new mathMLTree.MathNode("mo", children);

	    if (group.mclass === "mopen" || group.mclass === "mclose") {
	      // Only some of the delimsizing functions act as fences, and they
	      // return "mopen" or "mclose" mclass.
	      node.setAttribute("fence", "true");
	    } else {
	      // Explicitly disable fencing if it's not a fence, to override the
	      // defaults.
	      node.setAttribute("fence", "false");
	    }

	    node.setAttribute("stretchy", "true");
	    node.setAttribute("minsize", delimiter.sizeToMaxHeight[group.size] + "em");
	    node.setAttribute("maxsize", delimiter.sizeToMaxHeight[group.size] + "em");
	    return node;
	  }
	});

	function assertParsed(group) {
	  if (!group.body) {
	    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
	  }
	}

	defineFunction({
	  type: "leftright-right",
	  names: ["\\right"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    // \left case below triggers parsing of \right in
	    //   `const right = parser.parseFunction();`
	    // uses this return value.
	    var color = context.parser.gullet.macros.get("\\current@color");

	    if (color && typeof color !== "string") {
	      throw new ParseError("\\current@color set to non-string in \\right");
	    }

	    return {
	      type: "leftright-right",
	      mode: context.parser.mode,
	      delim: checkDelimiter(args[0], context).text,
	      color // undefined if not set via \color

	    };
	  }
	});
	defineFunction({
	  type: "leftright",
	  names: ["\\left"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    var parser = context.parser; // Parse out the implicit body

	    ++parser.leftrightDepth; // parseExpression stops before '\\right'

	    var body = parser.parseExpression(false);
	    --parser.leftrightDepth; // Check the next token

	    parser.expect("\\right", false);
	    var right = assertNodeType(parser.parseFunction(), "leftright-right");
	    return {
	      type: "leftright",
	      mode: parser.mode,
	      body,
	      left: delim.text,
	      right: right.delim,
	      rightColor: right.color
	    };
	  },
	  htmlBuilder: (group, options) => {
	    assertParsed(group); // Build the inner expression

	    var inner = buildExpression(group.body, options, true, ["mopen", "mclose"]);
	    var innerHeight = 0;
	    var innerDepth = 0;
	    var hadMiddle = false; // Calculate its height and depth

	    for (var i = 0; i < inner.length; i++) {
	      // Property `isMiddle` not defined on `span`. See comment in
	      // "middle"'s htmlBuilder.
	      // $FlowFixMe
	      if (inner[i].isMiddle) {
	        hadMiddle = true;
	      } else {
	        innerHeight = Math.max(inner[i].height, innerHeight);
	        innerDepth = Math.max(inner[i].depth, innerDepth);
	      }
	    } // The size of delimiters is the same, regardless of what style we are
	    // in. Thus, to correctly calculate the size of delimiter we need around
	    // a group, we scale down the inner size based on the size.


	    innerHeight *= options.sizeMultiplier;
	    innerDepth *= options.sizeMultiplier;
	    var leftDelim;

	    if (group.left === ".") {
	      // Empty delimiters in \left and \right make null delimiter spaces.
	      leftDelim = makeNullDelimiter(options, ["mopen"]);
	    } else {
	      // Otherwise, use leftRightDelim to generate the correct sized
	      // delimiter.
	      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
	    } // Add it to the beginning of the expression


	    inner.unshift(leftDelim); // Handle middle delimiters

	    if (hadMiddle) {
	      for (var _i = 1; _i < inner.length; _i++) {
	        var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
	        // "middle"'s htmlBuilder.
	        // $FlowFixMe

	        var isMiddle = middleDelim.isMiddle;

	        if (isMiddle) {
	          // Apply the options that were active when \middle was called
	          inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
	        }
	      }
	    }

	    var rightDelim; // Same for the right delimiter, but using color specified by \color

	    if (group.right === ".") {
	      rightDelim = makeNullDelimiter(options, ["mclose"]);
	    } else {
	      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
	      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
	    } // Add it to the end of the expression.


	    inner.push(rightDelim);
	    return buildCommon.makeSpan(["minner"], inner, options);
	  },
	  mathmlBuilder: (group, options) => {
	    assertParsed(group);
	    var inner = buildExpression$1(group.body, options);

	    if (group.left !== ".") {
	      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
	      leftNode.setAttribute("fence", "true");
	      inner.unshift(leftNode);
	    }

	    if (group.right !== ".") {
	      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
	      rightNode.setAttribute("fence", "true");

	      if (group.rightColor) {
	        rightNode.setAttribute("mathcolor", group.rightColor);
	      }

	      inner.push(rightNode);
	    }

	    return makeRow(inner);
	  }
	});
	defineFunction({
	  type: "middle",
	  names: ["\\middle"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);

	    if (!context.parser.leftrightDepth) {
	      throw new ParseError("\\middle without preceding \\left", delim);
	    }

	    return {
	      type: "middle",
	      mode: context.parser.mode,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var middleDelim;

	    if (group.delim === ".") {
	      middleDelim = makeNullDelimiter(options, []);
	    } else {
	      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
	      var isMiddle = {
	        delim: group.delim,
	        options
	      }; // Property `isMiddle` not defined on `span`. It is only used in
	      // this file above.
	      // TODO: Fix this violation of the `span` type and possibly rename
	      // things since `isMiddle` sounds like a boolean, but is a struct.
	      // $FlowFixMe

	      middleDelim.isMiddle = isMiddle;
	    }

	    return middleDelim;
	  },
	  mathmlBuilder: (group, options) => {
	    // A Firefox \middle will strech a character vertically only if it
	    // is in the fence part of the operator dictionary at:
	    // https://www.w3.org/TR/MathML3/appendixc.html.
	    // So we need to avoid U+2223 and use plain "|" instead.
	    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
	    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
	    middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
	    // \middle should get delimiter spacing instead.

	    middleNode.setAttribute("lspace", "0.05em");
	    middleNode.setAttribute("rspace", "0.05em");
	    return middleNode;
	  }
	});

	var htmlBuilder$2 = (group, options) => {
	  // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
	  // Some groups can return document fragments.  Handle those by wrapping
	  // them in a span.
	  var inner = buildCommon.wrapFragment(buildGroup(group.body, options), options);
	  var label = group.label.substr(1);
	  var scale = options.sizeMultiplier;
	  var img;
	  var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
	  // depending on whether the subject is wider than it is tall, or vice versa.
	  // We don't know the width of a group, so as a proxy, we test if
	  // the subject is a single character. This captures most of the
	  // subjects that should get the "tall" treatment.

	  var isSingleChar = utils.isCharacterBox(group.body);

	  if (label === "sout") {
	    img = buildCommon.makeSpan(["stretchy", "sout"]);
	    img.height = options.fontMetrics().defaultRuleThickness / scale;
	    imgShift = -0.5 * options.fontMetrics().xHeight;
	  } else if (label === "phase") {
	    // Set a couple of dimensions from the steinmetz package.
	    var lineWeight = calculateSize({
	      number: 0.6,
	      unit: "pt"
	    }, options);
	    var clearance = calculateSize({
	      number: 0.35,
	      unit: "ex"
	    }, options); // Prevent size changes like \Huge from affecting line thickness

	    var newOptions = options.havingBaseSizing();
	    scale = scale / newOptions.sizeMultiplier;
	    var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

	    inner.style.paddingLeft = angleHeight / 2 + lineWeight + "em"; // Create an SVG

	    var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
	    var path = phasePath(viewBoxHeight);
	    var svgNode = new SvgNode([new PathNode("phase", path)], {
	      "width": "400em",
	      "height": viewBoxHeight / 1000 + "em",
	      "viewBox": "0 0 400000 " + viewBoxHeight,
	      "preserveAspectRatio": "xMinYMin slice"
	    }); // Wrap it in a span with overflow: hidden.

	    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
	    img.style.height = angleHeight + "em";
	    imgShift = inner.depth + lineWeight + clearance;
	  } else {
	    // Add horizontal padding
	    if (/cancel/.test(label)) {
	      if (!isSingleChar) {
	        inner.classes.push("cancel-pad");
	      }
	    } else if (label === "angl") {
	      inner.classes.push("anglpad");
	    } else {
	      inner.classes.push("boxpad");
	    } // Add vertical padding


	    var topPad = 0;
	    var bottomPad = 0;
	    var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

	    if (/box/.test(label)) {
	      ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
	      options.minRuleThickness // User override.
	      );
	      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
	      bottomPad = topPad;
	    } else if (label === "angl") {
	      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	      topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

	      bottomPad = Math.max(0, 0.25 - inner.depth);
	    } else {
	      topPad = isSingleChar ? 0.2 : 0;
	      bottomPad = topPad;
	    }

	    img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

	    if (/fbox|boxed|fcolorbox/.test(label)) {
	      img.style.borderStyle = "solid";
	      img.style.borderWidth = ruleThickness + "em";
	    } else if (label === "angl" && ruleThickness !== 0.049) {
	      img.style.borderTopWidth = ruleThickness + "em";
	      img.style.borderRightWidth = ruleThickness + "em";
	    }

	    imgShift = inner.depth + bottomPad;

	    if (group.backgroundColor) {
	      img.style.backgroundColor = group.backgroundColor;

	      if (group.borderColor) {
	        img.style.borderColor = group.borderColor;
	      }
	    }
	  }

	  var vlist;

	  if (group.backgroundColor) {
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Put the color background behind inner;
	      {
	        type: "elem",
	        elem: img,
	        shift: imgShift
	      }, {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }]
	    }, options);
	  } else {
	    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Write the \cancel stroke on top of inner.
	      {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }, {
	        type: "elem",
	        elem: img,
	        shift: imgShift,
	        wrapperClasses: classes
	      }]
	    }, options);
	  }

	  if (/cancel/.test(label)) {
	    // The cancel package documentation says that cancel lines add their height
	    // to the expression, but tests show that isn't how it actually works.
	    vlist.height = inner.height;
	    vlist.depth = inner.depth;
	  }

	  if (/cancel/.test(label) && !isSingleChar) {
	    // cancel does not create horiz space for its line extension.
	    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
	  } else {
	    return buildCommon.makeSpan(["mord"], [vlist], options);
	  }
	};

	var mathmlBuilder$2 = (group, options) => {
	  var fboxsep = 0;
	  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup$1(group.body, options)]);

	  switch (group.label) {
	    case "\\cancel":
	      node.setAttribute("notation", "updiagonalstrike");
	      break;

	    case "\\bcancel":
	      node.setAttribute("notation", "downdiagonalstrike");
	      break;

	    case "\\phase":
	      node.setAttribute("notation", "phasorangle");
	      break;

	    case "\\sout":
	      node.setAttribute("notation", "horizontalstrike");
	      break;

	    case "\\fbox":
	      node.setAttribute("notation", "box");
	      break;

	    case "\\angl":
	      node.setAttribute("notation", "actuarial");
	      break;

	    case "\\fcolorbox":
	    case "\\colorbox":
	      // <menclose> doesn't have a good notation option. So use <mpadded>
	      // instead. Set some attributes that come included with <menclose>.
	      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
	      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("lspace", fboxsep + "pt"); //

	      node.setAttribute("voffset", fboxsep + "pt");

	      if (group.label === "\\fcolorbox") {
	        var thk = Math.max(options.fontMetrics().fboxrule, // default
	        options.minRuleThickness // user override
	        );
	        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
	      }

	      break;

	    case "\\xcancel":
	      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
	      break;
	  }

	  if (group.backgroundColor) {
	    node.setAttribute("mathbackground", group.backgroundColor);
	  }

	  return node;
	};

	defineFunction({
	  type: "enclose",
	  names: ["\\colorbox"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "text"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor: color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$2
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fcolorbox"],
	  props: {
	    numArgs: 3,
	    allowedInText: true,
	    argTypes: ["color", "color", "text"]
	  },

	  handler(_ref2, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var borderColor = assertNodeType(args[0], "color-token").color;
	    var backgroundColor = assertNodeType(args[1], "color-token").color;
	    var body = args[2];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor,
	      borderColor,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$2
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: true
	  },

	  handler(_ref3, args) {
	    var {
	      parser
	    } = _ref3;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\fbox",
	      body: args[0]
	    };
	  }

	});
	defineFunction({
	  type: "enclose",
	  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref4, args) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var body = args[0];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$2
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\angl"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: false
	  },

	  handler(_ref5, args) {
	    var {
	      parser
	    } = _ref5;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\angl",
	      body: args[0]
	    };
	  }

	});

	/**
	 * All registered environments.
	 * `environments.js` exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary via `environments.js`.
	 */
	var _environments = {};
	function defineEnvironment(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of environments.
	  var data = {
	    type,
	    numArgs: props.numArgs || 0,
	    allowedInText: false,
	    numOptionalArgs: 0,
	    handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    // TODO: The value type of _environments should be a type union of all
	    // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
	    // an existential type.
	    _environments[names[i]] = data;
	  }

	  if (htmlBuilder) {
	    _htmlGroupBuilders[type] = htmlBuilder;
	  }

	  if (mathmlBuilder) {
	    _mathmlGroupBuilders[type] = mathmlBuilder;
	  }
	}

	// Helper functions
	function getHLines(parser) {
	  // Return an array. The array length = number of hlines.
	  // Each element in the array tells if the line is dashed.
	  var hlineInfo = [];
	  parser.consumeSpaces();
	  var nxt = parser.fetch().text;

	  while (nxt === "\\hline" || nxt === "\\hdashline") {
	    parser.consume();
	    hlineInfo.push(nxt === "\\hdashline");
	    parser.consumeSpaces();
	    nxt = parser.fetch().text;
	  }

	  return hlineInfo;
	}

	var validateAmsEnvironmentContext = context => {
	  var settings = context.parser.settings;

	  if (!settings.displayMode) {
	    throw new ParseError("{" + context.envName + "} can be used only in" + " display mode.");
	  }
	};
	/**
	 * Parse the body of the environment, with rows delimited by \\ and
	 * columns delimited by &, and create a nested list in row-major order
	 * with one group per cell.  If given an optional argument style
	 * ("text", "display", etc.), then each cell is cast into that style.
	 */


	function parseArray(parser, _ref, style) {
	  var {
	    hskipBeforeAndAfter,
	    addJot,
	    cols,
	    arraystretch,
	    colSeparationType,
	    addEqnNum,
	    singleRow,
	    emptySingleRow,
	    maxNumCols,
	    leqno
	  } = _ref;
	  parser.gullet.beginGroup();

	  if (!singleRow) {
	    // \cr is equivalent to \\ without the optional size argument (see below)
	    // TODO: provide helpful error when \cr is used outside array environment
	    parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  } // Get current arraystretch if it's not set by the environment


	  if (!arraystretch) {
	    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

	    if (stretch == null) {
	      // Default \arraystretch from lttab.dtx
	      arraystretch = 1;
	    } else {
	      arraystretch = parseFloat(stretch);

	      if (!arraystretch || arraystretch < 0) {
	        throw new ParseError("Invalid \\arraystretch: " + stretch);
	      }
	    }
	  } // Start group for first cell


	  parser.gullet.beginGroup();
	  var row = [];
	  var body = [row];
	  var rowGaps = [];
	  var hLinesBeforeRow = []; // Test for \hline at the top of the array.

	  hLinesBeforeRow.push(getHLines(parser));

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Parse each cell in its own group (namespace)
	    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    cell = {
	      type: "ordgroup",
	      mode: parser.mode,
	      body: cell
	    };

	    if (style) {
	      cell = {
	        type: "styling",
	        mode: parser.mode,
	        style,
	        body: [cell]
	      };
	    }

	    row.push(cell);
	    var next = parser.fetch().text;

	    if (next === "&") {
	      if (maxNumCols && row.length === maxNumCols) {
	        if (singleRow || colSeparationType) {
	          // {equation} or {split}
	          throw new ParseError("Too many tab characters: &", parser.nextToken);
	        } else {
	          // {array} environment
	          parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
	        }
	      }

	      parser.consume();
	    } else if (next === "\\end") {
	      // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
	      // the last line is empty.  However, AMS environments keep the
	      // empty row if it's the only one.
	      // NOTE: Currently, `cell` is the last item added into `row`.
	      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
	        body.pop();
	      }

	      if (hLinesBeforeRow.length < body.length + 1) {
	        hLinesBeforeRow.push([]);
	      }

	      break;
	    } else if (next === "\\\\") {
	      parser.consume();
	      var size = void 0; // \def\Let@{\let\\\math@cr}
	      // \def\math@cr{...\math@cr@}
	      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
	      // \def\math@cr@@[#1]{...\math@cr@@@...}
	      // \def\math@cr@@@{\cr}

	      if (parser.gullet.future().text !== " ") {
	        size = parser.parseSizeGroup(true);
	      }

	      rowGaps.push(size ? size.value : null); // check for \hline(s) following the row separator

	      hLinesBeforeRow.push(getHLines(parser));
	      row = [];
	      body.push(row);
	    } else {
	      throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  } // End cell group


	  parser.gullet.endGroup(); // End array group defining \cr

	  parser.gullet.endGroup();
	  return {
	    type: "array",
	    mode: parser.mode,
	    addJot,
	    arraystretch,
	    body,
	    cols,
	    rowGaps,
	    hskipBeforeAndAfter,
	    hLinesBeforeRow,
	    colSeparationType,
	    addEqnNum,
	    leqno
	  };
	} // Decides on a style for cells in an array according to whether the given
	// environment name starts with the letter 'd'.


	function dCellStyle(envName) {
	  if (envName.substr(0, 1) === "d") {
	    return "display";
	  } else {
	    return "text";
	  }
	}

	var htmlBuilder$3 = function htmlBuilder(group, options) {
	  var r;
	  var c;
	  var nr = group.body.length;
	  var hLinesBeforeRow = group.hLinesBeforeRow;
	  var nc = 0;
	  var body = new Array(nr);
	  var hlines = [];
	  var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
	  options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
	  ); // Horizontal spacing

	  var pt = 1 / options.fontMetrics().ptPerEm;
	  var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

	  if (group.colSeparationType && group.colSeparationType === "small") {
	    // We're in a {smallmatrix}. Default column space is \thickspace,
	    // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
	    // But that needs adjustment because LaTeX applies \scriptstyle to the
	    // entire array, including the colspace, but this function applies
	    // \scriptstyle only inside each element.
	    var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
	    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
	  } // Vertical spacing


	  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
	    number: 3,
	    unit: "ex"
	  }, options) : 12 * pt; // see size10.clo
	  // Default \jot from ltmath.dtx
	  // TODO(edemaine): allow overriding \jot via \setlength (#687)

	  var jot = 3 * pt;
	  var arrayskip = group.arraystretch * baselineskip;
	  var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

	  var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

	  var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

	  function setHLinePos(hlinesInGap) {
	    for (var i = 0; i < hlinesInGap.length; ++i) {
	      if (i > 0) {
	        totalHeight += 0.25;
	      }

	      hlines.push({
	        pos: totalHeight,
	        isDashed: hlinesInGap[i]
	      });
	    }
	  }

	  setHLinePos(hLinesBeforeRow[0]);

	  for (r = 0; r < group.body.length; ++r) {
	    var inrow = group.body[r];
	    var height = arstrutHeight; // \@array adds an \@arstrut

	    var depth = arstrutDepth; // to each tow (via the template)

	    if (nc < inrow.length) {
	      nc = inrow.length;
	    }

	    var outrow = new Array(inrow.length);

	    for (c = 0; c < inrow.length; ++c) {
	      var elt = buildGroup(inrow[c], options);

	      if (depth < elt.depth) {
	        depth = elt.depth;
	      }

	      if (height < elt.height) {
	        height = elt.height;
	      }

	      outrow[c] = elt;
	    }

	    var rowGap = group.rowGaps[r];
	    var gap = 0;

	    if (rowGap) {
	      gap = calculateSize(rowGap, options);

	      if (gap > 0) {
	        // \@argarraycr
	        gap += arstrutDepth;

	        if (depth < gap) {
	          depth = gap; // \@xargarraycr
	        }

	        gap = 0;
	      }
	    } // In AMS multiline environments such as aligned and gathered, rows
	    // correspond to lines that have additional \jot added to the
	    // \baselineskip via \openup.


	    if (group.addJot) {
	      depth += jot;
	    }

	    outrow.height = height;
	    outrow.depth = depth;
	    totalHeight += height;
	    outrow.pos = totalHeight;
	    totalHeight += depth + gap; // \@yargarraycr

	    body[r] = outrow; // Set a position for \hline(s), if any.

	    setHLinePos(hLinesBeforeRow[r + 1]);
	  }

	  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
	  var colDescriptions = group.cols || [];
	  var cols = [];
	  var colSep;
	  var colDescrNum;
	  var eqnNumSpans = [];

	  if (group.addEqnNum) {
	    // An environment with automatic equation numbers.
	    // Create node(s) that will trigger CSS counter increment.
	    for (r = 0; r < nr; ++r) {
	      var rw = body[r];
	      var shift = rw.pos - offset;
	      var eqnTag = buildCommon.makeSpan(["eqn-num"], [], options);
	      eqnTag.depth = rw.depth;
	      eqnTag.height = rw.height;
	      eqnNumSpans.push({
	        type: "elem",
	        elem: eqnTag,
	        shift
	      });
	    }
	  }

	  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
	  // descriptions, so trailing separators don't get lost.
	  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
	    var colDescr = colDescriptions[colDescrNum] || {};
	    var firstSeparator = true;

	    while (colDescr.type === "separator") {
	      // If there is more than one separator in a row, add a space
	      // between them.
	      if (!firstSeparator) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = options.fontMetrics().doubleRuleSep + "em";
	        cols.push(colSep);
	      }

	      if (colDescr.separator === "|" || colDescr.separator === ":") {
	        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
	        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
	        separator.style.height = totalHeight + "em";
	        separator.style.borderRightWidth = ruleThickness + "em";
	        separator.style.borderRightStyle = lineType;
	        separator.style.margin = "0 -" + ruleThickness / 2 + "em";
	        separator.style.verticalAlign = -(totalHeight - offset) + "em";
	        cols.push(separator);
	      } else {
	        throw new ParseError("Invalid separator type: " + colDescr.separator);
	      }

	      colDescrNum++;
	      colDescr = colDescriptions[colDescrNum] || {};
	      firstSeparator = false;
	    }

	    if (c >= nc) {
	      continue;
	    }

	    var sepwidth = void 0;

	    if (c > 0 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = sepwidth + "em";
	        cols.push(colSep);
	      }
	    }

	    var col = [];

	    for (r = 0; r < nr; ++r) {
	      var row = body[r];
	      var elem = row[c];

	      if (!elem) {
	        continue;
	      }

	      var _shift = row.pos - offset;

	      elem.depth = row.depth;
	      elem.height = row.height;
	      col.push({
	        type: "elem",
	        elem: elem,
	        shift: _shift
	      });
	    }

	    col = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: col
	    }, options);
	    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
	    cols.push(col);

	    if (c < nc - 1 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = sepwidth + "em";
	        cols.push(colSep);
	      }
	    }
	  }

	  body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

	  if (hlines.length > 0) {
	    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
	    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
	    var vListElems = [{
	      type: "elem",
	      elem: body,
	      shift: 0
	    }];

	    while (hlines.length > 0) {
	      var hline = hlines.pop();
	      var lineShift = hline.pos - offset;

	      if (hline.isDashed) {
	        vListElems.push({
	          type: "elem",
	          elem: dashes,
	          shift: lineShift
	        });
	      } else {
	        vListElems.push({
	          type: "elem",
	          elem: line,
	          shift: lineShift
	        });
	      }
	    }

	    body = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: vListElems
	    }, options);
	  }

	  if (!group.addEqnNum) {
	    return buildCommon.makeSpan(["mord"], [body], options);
	  } else {
	    var eqnNumCol = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: eqnNumSpans
	    }, options);
	    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
	    return buildCommon.makeFragment([body, eqnNumCol]);
	  }
	};

	var alignMap = {
	  c: "center ",
	  l: "left ",
	  r: "right "
	};

	var mathmlBuilder$3 = function mathmlBuilder(group, options) {
	  var tbl = [];
	  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
	  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

	  for (var i = 0; i < group.body.length; i++) {
	    var rw = group.body[i];
	    var row = [];

	    for (var j = 0; j < rw.length; j++) {
	      row.push(new mathMLTree.MathNode("mtd", [buildGroup$1(rw[j], options)]));
	    }

	    if (group.addEqnNum) {
	      row.unshift(glue);
	      row.push(glue);

	      if (group.leqno) {
	        row.unshift(tag);
	      } else {
	        row.push(tag);
	      }
	    }

	    tbl.push(new mathMLTree.MathNode("mtr", row));
	  }

	  var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
	  // array lines by setting attributes on the table element.
	  // Set the row spacing. In MathML, we specify a gap distance.
	  // We do not use rowGap[] because MathML automatically increases
	  // cell height with the height/depth of the element content.
	  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
	  // We simulate this by adding (arraystretch - 1)em to the gap. This
	  // does a reasonable job of adjusting arrays containing 1 em tall content.
	  // The 0.16 and 0.09 values are found emprically. They produce an array
	  // similar to LaTeX and in which content does not interfere with \hines.

	  var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
	  : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
	  table.setAttribute("rowspacing", gap.toFixed(4) + "em"); // MathML table lines go only between cells.
	  // To place a line on an edge we'll use <menclose>, if necessary.

	  var menclose = "";
	  var align = "";

	  if (group.cols && group.cols.length > 0) {
	    // Find column alignment, column spacing, and  vertical lines.
	    var cols = group.cols;
	    var columnLines = "";
	    var prevTypeWasAlign = false;
	    var iStart = 0;
	    var iEnd = cols.length;

	    if (cols[0].type === "separator") {
	      menclose += "top ";
	      iStart = 1;
	    }

	    if (cols[cols.length - 1].type === "separator") {
	      menclose += "bottom ";
	      iEnd -= 1;
	    }

	    for (var _i = iStart; _i < iEnd; _i++) {
	      if (cols[_i].type === "align") {
	        align += alignMap[cols[_i].align];

	        if (prevTypeWasAlign) {
	          columnLines += "none ";
	        }

	        prevTypeWasAlign = true;
	      } else if (cols[_i].type === "separator") {
	        // MathML accepts only single lines between cells.
	        // So we read only the first of consecutive separators.
	        if (prevTypeWasAlign) {
	          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
	          prevTypeWasAlign = false;
	        }
	      }
	    }

	    table.setAttribute("columnalign", align.trim());

	    if (/[sd]/.test(columnLines)) {
	      table.setAttribute("columnlines", columnLines.trim());
	    }
	  } // Set column spacing.


	  if (group.colSeparationType === "align") {
	    var _cols = group.cols || [];

	    var spacing = "";

	    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
	      spacing += _i2 % 2 ? "0em " : "1em ";
	    }

	    table.setAttribute("columnspacing", spacing.trim());
	  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
	    table.setAttribute("columnspacing", "0em");
	  } else if (group.colSeparationType === "small") {
	    table.setAttribute("columnspacing", "0.2778em");
	  } else if (group.colSeparationType === "CD") {
	    table.setAttribute("columnspacing", "0.5em");
	  } else {
	    table.setAttribute("columnspacing", "1em");
	  } // Address \hline and \hdashline


	  var rowLines = "";
	  var hlines = group.hLinesBeforeRow;
	  menclose += hlines[0].length > 0 ? "left " : "";
	  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

	  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
	    rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
	    : hlines[_i3][0] ? "dashed " : "solid ";
	  }

	  if (/[sd]/.test(rowLines)) {
	    table.setAttribute("rowlines", rowLines.trim());
	  }

	  if (menclose !== "") {
	    table = new mathMLTree.MathNode("menclose", [table]);
	    table.setAttribute("notation", menclose.trim());
	  }

	  if (group.arraystretch && group.arraystretch < 1) {
	    // A small array. Wrap in scriptstyle so row gap is not too large.
	    table = new mathMLTree.MathNode("mstyle", [table]);
	    table.setAttribute("scriptlevel", "1");
	  }

	  return table;
	}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


	var alignedHandler = function alignedHandler(context, args) {
	  if (context.envName.indexOf("ed") === -1) {
	    validateAmsEnvironmentContext(context);
	  }

	  var cols = [];
	  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
	  var res = parseArray(context.parser, {
	    cols,
	    addJot: true,
	    addEqnNum: context.envName === "align" || context.envName === "alignat",
	    emptySingleRow: true,
	    colSeparationType: separationType,
	    maxNumCols: context.envName === "split" ? 2 : undefined,
	    leqno: context.parser.settings.leqno
	  }, "display"); // Determining number of columns.
	  // 1. If the first argument is given, we use it as a number of columns,
	  //    and makes sure that each row doesn't exceed that number.
	  // 2. Otherwise, just count number of columns = maximum number
	  //    of cells in each row ("aligned" mode -- isAligned will be true).
	  //
	  // At the same time, prepend empty group {} at beginning of every second
	  // cell in each row (starting with second cell) so that operators become
	  // binary.  This behavior is implemented in amsmath's \start@aligned.

	  var numMaths;
	  var numCols = 0;
	  var emptyGroup = {
	    type: "ordgroup",
	    mode: context.mode,
	    body: []
	  };

	  if (args[0] && args[0].type === "ordgroup") {
	    var arg0 = "";

	    for (var i = 0; i < args[0].body.length; i++) {
	      var textord = assertNodeType(args[0].body[i], "textord");
	      arg0 += textord.text;
	    }

	    numMaths = Number(arg0);
	    numCols = numMaths * 2;
	  }

	  var isAligned = !numCols;
	  res.body.forEach(function (row) {
	    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
	      // Modify ordgroup node within styling node
	      var styling = assertNodeType(row[_i4], "styling");
	      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
	      ordgroup.body.unshift(emptyGroup);
	    }

	    if (!isAligned) {
	      // Case 1
	      var curMaths = row.length / 2;

	      if (numMaths < curMaths) {
	        throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
	      }
	    } else if (numCols < row.length) {
	      // Case 2
	      numCols = row.length;
	    }
	  }); // Adjusting alignment.
	  // In aligned mode, we add one \qquad between columns;
	  // otherwise we add nothing.

	  for (var _i5 = 0; _i5 < numCols; ++_i5) {
	    var align = "r";
	    var pregap = 0;

	    if (_i5 % 2 === 1) {
	      align = "l";
	    } else if (_i5 > 0 && isAligned) {
	      // "aligned" mode.
	      pregap = 1; // add one \quad
	    }

	    cols[_i5] = {
	      type: "align",
	      align: align,
	      pregap: pregap,
	      postgap: 0
	    };
	  }

	  res.colSeparationType = isAligned ? "align" : "alignat";
	  return res;
	}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
	// is part of the source2e.pdf file of LaTeX2e source documentation.
	// {darray} is an {array} environment where cells are set in \displaystyle,
	// as defined in nccmath.sty.


	defineEnvironment({
	  type: "array",
	  names: ["array", "darray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Since no types are specified above, the two possibilities are
	    // - The argument is wrapped in {} or [], in which case Parser's
	    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
	    // - The argument is a bare symbol node.
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text;

	      if ("lcr".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      } else if (ca === "|") {
	        return {
	          type: "separator",
	          separator: "|"
	        };
	      } else if (ca === ":") {
	        return {
	          type: "separator",
	          separator: ":"
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });
	    var res = {
	      cols,
	      hskipBeforeAndAfter: true,
	      // \@preamble in lttab.dtx
	      maxNumCols: cols.length
	    };
	    return parseArray(context.parser, res, dCellStyle(context.envName));
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // The matrix environments of amsmath builds on the array environment
	// of LaTeX, which is discussed above.
	// The mathtools package adds starred versions of the same environments.
	// These have an optional argument to choose left|center|right justification.

	defineEnvironment({
	  type: "array",
	  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var delimiters = {
	      "matrix": null,
	      "pmatrix": ["(", ")"],
	      "bmatrix": ["[", "]"],
	      "Bmatrix": ["\\{", "\\}"],
	      "vmatrix": ["|", "|"],
	      "Vmatrix": ["\\Vert", "\\Vert"]
	    }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

	    var colAlign = "c";
	    var payload = {
	      hskipBeforeAndAfter: false,
	      cols: [{
	        type: "align",
	        align: colAlign
	      }]
	    };

	    if (context.envName.charAt(context.envName.length - 1) === "*") {
	      // It's one of the mathtools starred functions.
	      // Parse the optional alignment argument.
	      var parser = context.parser;
	      parser.consumeSpaces();

	      if (parser.fetch().text === "[") {
	        parser.consume();
	        parser.consumeSpaces();
	        colAlign = parser.fetch().text;

	        if ("lcr".indexOf(colAlign) === -1) {
	          throw new ParseError("Expected l or c or r", parser.nextToken);
	        }

	        parser.consume();
	        parser.consumeSpaces();
	        parser.expect("]");
	        parser.consume();
	        payload.cols = [{
	          type: "align",
	          align: colAlign
	        }];
	      }
	    }

	    var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

	    var numCols = Math.max(0, ...res.body.map(row => row.length));
	    res.cols = new Array(numCols).fill({
	      type: "align",
	      align: colAlign
	    });
	    return delimiters ? {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: delimiters[0],
	      right: delimiters[1],
	      rightColor: undefined // \right uninfluenced by \color in array

	    } : res;
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineEnvironment({
	  type: "array",
	  names: ["smallmatrix"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 0.5
	    };
	    var res = parseArray(context.parser, payload, "script");
	    res.colSeparationType = "small";
	    return res;
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineEnvironment({
	  type: "array",
	  names: ["subarray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Parsing of {subarray} is similar to {array}
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text; // {subarray} only recognizes "l" & "c"

	      if ("lc".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });

	    if (cols.length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    var res = {
	      cols,
	      hskipBeforeAndAfter: false,
	      arraystretch: 0.5
	    };
	    res = parseArray(context.parser, res, "script");

	    if (res.body.length > 0 && res.body[0].length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    return res;
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // A cases environment (in amsmath.sty) is almost equivalent to
	// \def\arraystretch{1.2}%
	// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
	// {dcases} is a {cases} environment where cells are set in \displaystyle,
	// as defined in mathtools.sty.
	// {rcases} is another mathtools environment. It's brace is on the right side.

	defineEnvironment({
	  type: "array",
	  names: ["cases", "dcases", "rcases", "drcases"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 1.2,
	      cols: [{
	        type: "align",
	        align: "l",
	        pregap: 0,
	        // TODO(kevinb) get the current style.
	        // For now we use the metrics for TEXT style which is what we were
	        // doing before.  Before attempting to get the current style we
	        // should look at TeX's behavior especially for \over and matrices.
	        postgap: 1.0
	        /* 1em quad */

	      }, {
	        type: "align",
	        align: "l",
	        pregap: 0,
	        postgap: 0
	      }]
	    };
	    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
	    return {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
	      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
	      rightColor: undefined
	    };
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // In the align environment, one uses ampersands, &, to specify number of
	// columns in each row, and to locate spacing between each column.
	// align gets automatic numbering. align* and aligned do not.
	// The alignedat environment can be used in math mode.
	// Note that we assume \nomallineskiplimit to be zero,
	// so that \strut@ is the same as \strut.

	defineEnvironment({
	  type: "array",
	  names: ["align", "align*", "aligned", "split"],
	  props: {
	    numArgs: 0
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // A gathered environment is like an array environment with one centered
	// column, but where rows are considered lines so get \jot line spacing
	// and contents are set in \displaystyle.

	defineEnvironment({
	  type: "array",
	  names: ["gathered", "gather", "gather*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    if (utils.contains(["gather", "gather*"], context.envName)) {
	      validateAmsEnvironmentContext(context);
	    }

	    var res = {
	      cols: [{
	        type: "align",
	        align: "c"
	      }],
	      addJot: true,
	      colSeparationType: "gather",
	      addEqnNum: context.envName === "gather",
	      emptySingleRow: true,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // alignat environment is like an align environment, but one must explicitly
	// specify maximum number of columns in each row, and can adjust spacing between
	// each columns.

	defineEnvironment({
	  type: "array",
	  names: ["alignat", "alignat*", "alignedat"],
	  props: {
	    numArgs: 1
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineEnvironment({
	  type: "array",
	  names: ["equation", "equation*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    var res = {
	      addEqnNum: context.envName === "equation",
	      emptySingleRow: true,
	      singleRow: true,
	      maxNumCols: 1,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineEnvironment({
	  type: "array",
	  names: ["CD"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    return parseCD(context.parser);
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$3
	}); // Catch \hline outside array environment

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\hline", "\\hdashline"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: true
	  },

	  handler(context, args) {
	    throw new ParseError(context.funcName + " valid only within array environment");
	  }

	});

	var environments = _environments;

	// defineEnvironment definitions.

	defineFunction({
	  type: "environment",
	  names: ["\\begin", "\\end"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"]
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var nameGroup = args[0];

	    if (nameGroup.type !== "ordgroup") {
	      throw new ParseError("Invalid environment name", nameGroup);
	    }

	    var envName = "";

	    for (var i = 0; i < nameGroup.body.length; ++i) {
	      envName += assertNodeType(nameGroup.body[i], "textord").text;
	    }

	    if (funcName === "\\begin") {
	      // begin...end is similar to left...right
	      if (!environments.hasOwnProperty(envName)) {
	        throw new ParseError("No such environment: " + envName, nameGroup);
	      } // Build the environment object. Arguments and other information will
	      // be made available to the begin and end methods using properties.


	      var env = environments[envName];
	      var {
	        args: _args,
	        optArgs
	      } = parser.parseArguments("\\begin{" + envName + "}", env);
	      var context = {
	        mode: parser.mode,
	        envName,
	        parser
	      };
	      var result = env.handler(context, _args, optArgs);
	      parser.expect("\\end", false);
	      var endNameToken = parser.nextToken;
	      var end = assertNodeType(parser.parseFunction(), "environment");

	      if (end.name !== envName) {
	        throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
	      } // $FlowFixMe, "environment" handler returns an environment ParseNode


	      return result;
	    }

	    return {
	      type: "environment",
	      mode: parser.mode,
	      name: envName,
	      nameGroup
	    };
	  }

	});

	var makeSpan$2 = buildCommon.makeSpan;

	function htmlBuilder$4(group, options) {
	  var elements = buildExpression(group.body, options, true);
	  return makeSpan$2([group.mclass], elements, options);
	}

	function mathmlBuilder$4(group, options) {
	  var node;
	  var inner = buildExpression$1(group.body, options);

	  if (group.mclass === "minner") {
	    return mathMLTree.newDocumentFragment(inner);
	  } else if (group.mclass === "mord") {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mi";
	    } else {
	      node = new mathMLTree.MathNode("mi", inner);
	    }
	  } else {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mo";
	    } else {
	      node = new mathMLTree.MathNode("mo", inner);
	    } // Set spacing based on what is the most likely adjacent atom type.
	    // See TeXbook p170.


	    if (group.mclass === "mbin") {
	      node.attributes.lspace = "0.22em"; // medium space

	      node.attributes.rspace = "0.22em";
	    } else if (group.mclass === "mpunct") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0.17em"; // thinspace
	    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0em";
	    } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
	    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

	  }

	  return node;
	} // Math class commands except \mathop


	defineFunction({
	  type: "mclass",
	  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: "m" + funcName.substr(5),
	      // TODO(kevinb): don't prefix with 'm'
	      body: ordargument(body),
	      isCharacterBox: utils.isCharacterBox(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$4
	});
	var binrelClass = arg => {
	  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
	  // (by rendering separately and with {}s before and after, and measuring
	  // the change in spacing).  We'll do roughly the same by detecting the
	  // atom type directly.
	  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

	  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
	    return "m" + atom.family;
	  } else {
	    return "mord";
	  }
	}; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
	// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

	defineFunction({
	  type: "mclass",
	  names: ["\\@binrel"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(args[0]),
	      body: ordargument(args[1]),
	      isCharacterBox: utils.isCharacterBox(args[1])
	    };
	  }

	}); // Build a relation or stacked op by placing one symbol on top of another

	defineFunction({
	  type: "mclass",
	  names: ["\\stackrel", "\\overset", "\\underset"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref3, args) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var baseArg = args[1];
	    var shiftedArg = args[0];
	    var mclass;

	    if (funcName !== "\\stackrel") {
	      // LaTeX applies \binrel spacing to \overset and \underset.
	      mclass = binrelClass(baseArg);
	    } else {
	      mclass = "mrel"; // for \stackrel
	    }

	    var baseOp = {
	      type: "op",
	      mode: baseArg.mode,
	      limits: true,
	      alwaysHandleSupSub: true,
	      parentIsSupSub: false,
	      symbol: false,
	      suppressBaseShift: funcName !== "\\stackrel",
	      body: ordargument(baseArg)
	    };
	    var supsub = {
	      type: "supsub",
	      mode: shiftedArg.mode,
	      base: baseOp,
	      sup: funcName === "\\underset" ? null : shiftedArg,
	      sub: funcName === "\\underset" ? shiftedArg : null
	    };
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass,
	      body: [supsub],
	      isCharacterBox: utils.isCharacterBox(supsub)
	    };
	  },

	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$4
	});

	// TODO(kevinb): implement \\sl and \\sc

	var htmlBuilder$5 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup(group.body, newOptions);
	};

	var mathmlBuilder$5 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup$1(group.body, newOptions);
	};

	var fontAliases = {
	  "\\Bbb": "\\mathbb",
	  "\\bold": "\\mathbf",
	  "\\frak": "\\mathfrak",
	  "\\bm": "\\boldsymbol"
	};
	defineFunction({
	  type: "font",
	  names: [// styles, except \boldsymbol defined below
	  "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
	  "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
	  "\\Bbb", "\\bold", "\\frak"],
	  props: {
	    numArgs: 1,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = normalizeArgument(args[0]);
	    var func = funcName;

	    if (func in fontAliases) {
	      func = fontAliases[func];
	    }

	    return {
	      type: "font",
	      mode: parser.mode,
	      font: func.slice(1),
	      body
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$5
	});
	defineFunction({
	  type: "mclass",
	  names: ["\\boldsymbol", "\\bm"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
	    // argument's bin|rel|ord status

	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(body),
	      body: [{
	        type: "font",
	        mode: parser.mode,
	        font: "boldsymbol",
	        body
	      }],
	      isCharacterBox: isCharacterBox
	    };
	  }
	}); // Old font changing functions

	defineFunction({
	  type: "font",
	  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser,
	      funcName,
	      breakOnTokenText
	    } = _ref3;
	    var {
	      mode
	    } = parser;
	    var body = parser.parseExpression(true, breakOnTokenText);
	    var style = "math" + funcName.slice(1);
	    return {
	      type: "font",
	      mode: mode,
	      font: style,
	      body: {
	        type: "ordgroup",
	        mode: parser.mode,
	        body
	      }
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$5
	});

	var adjustStyle = (size, originalStyle) => {
	  // Figure out what style this fraction should be in based on the
	  // function used
	  var style = originalStyle;

	  if (size === "display") {
	    // Get display style as a default.
	    // If incoming style is sub/sup, use style.text() to get correct size.
	    style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
	  } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
	    // We're in a \tfrac but incoming style is displaystyle, so:
	    style = Style$1.TEXT;
	  } else if (size === "script") {
	    style = Style$1.SCRIPT;
	  } else if (size === "scriptscript") {
	    style = Style$1.SCRIPTSCRIPT;
	  }

	  return style;
	};

	var htmlBuilder$6 = (group, options) => {
	  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
	  var style = adjustStyle(group.size, options.style);
	  var nstyle = style.fracNum();
	  var dstyle = style.fracDen();
	  var newOptions;
	  newOptions = options.havingStyle(nstyle);
	  var numerm = buildGroup(group.numer, newOptions, options);

	  if (group.continued) {
	    // \cfrac inserts a \strut into the numerator.
	    // Get \strut dimensions from TeXbook page 353.
	    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
	    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
	    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
	    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
	  }

	  newOptions = options.havingStyle(dstyle);
	  var denomm = buildGroup(group.denom, newOptions, options);
	  var rule;
	  var ruleWidth;
	  var ruleSpacing;

	  if (group.hasBarLine) {
	    if (group.barSize) {
	      ruleWidth = calculateSize(group.barSize, options);
	      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
	    } else {
	      rule = buildCommon.makeLineSpan("frac-line", options);
	    }

	    ruleWidth = rule.height;
	    ruleSpacing = rule.height;
	  } else {
	    rule = null;
	    ruleWidth = 0;
	    ruleSpacing = options.fontMetrics().defaultRuleThickness;
	  } // Rule 15b


	  var numShift;
	  var clearance;
	  var denomShift;

	  if (style.size === Style$1.DISPLAY.size || group.size === "display") {
	    numShift = options.fontMetrics().num1;

	    if (ruleWidth > 0) {
	      clearance = 3 * ruleSpacing;
	    } else {
	      clearance = 7 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom1;
	  } else {
	    if (ruleWidth > 0) {
	      numShift = options.fontMetrics().num2;
	      clearance = ruleSpacing;
	    } else {
	      numShift = options.fontMetrics().num3;
	      clearance = 3 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom2;
	  }

	  var frac;

	  if (!rule) {
	    // Rule 15c
	    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

	    if (candidateClearance < clearance) {
	      numShift += 0.5 * (clearance - candidateClearance);
	      denomShift += 0.5 * (clearance - candidateClearance);
	    }

	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } else {
	    // Rule 15d
	    var axisHeight = options.fontMetrics().axisHeight;

	    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
	      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
	    }

	    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
	      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
	    }

	    var midShift = -(axisHeight - 0.5 * ruleWidth);
	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: rule,
	        shift: midShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } // Since we manually change the style sometimes (with \dfrac or \tfrac),
	  // account for the possible size change here.


	  newOptions = options.havingStyle(style);
	  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
	  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

	  var delimSize;

	  if (style.size === Style$1.DISPLAY.size) {
	    delimSize = options.fontMetrics().delim1;
	  } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
	    delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
	  } else {
	    delimSize = options.fontMetrics().delim2;
	  }

	  var leftDelim;
	  var rightDelim;

	  if (group.leftDelim == null) {
	    leftDelim = makeNullDelimiter(options, ["mopen"]);
	  } else {
	    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
	  }

	  if (group.continued) {
	    rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
	  } else if (group.rightDelim == null) {
	    rightDelim = makeNullDelimiter(options, ["mclose"]);
	  } else {
	    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
	  }

	  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
	};

	var mathmlBuilder$6 = (group, options) => {
	  var node = new mathMLTree.MathNode("mfrac", [buildGroup$1(group.numer, options), buildGroup$1(group.denom, options)]);

	  if (!group.hasBarLine) {
	    node.setAttribute("linethickness", "0px");
	  } else if (group.barSize) {
	    var ruleWidth = calculateSize(group.barSize, options);
	    node.setAttribute("linethickness", ruleWidth + "em");
	  }

	  var style = adjustStyle(group.size, options.style);

	  if (style.size !== options.style.size) {
	    node = new mathMLTree.MathNode("mstyle", [node]);
	    var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
	    node.setAttribute("displaystyle", isDisplay);
	    node.setAttribute("scriptlevel", "0");
	  }

	  if (group.leftDelim != null || group.rightDelim != null) {
	    var withDelims = [];

	    if (group.leftDelim != null) {
	      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
	      leftOp.setAttribute("fence", "true");
	      withDelims.push(leftOp);
	    }

	    withDelims.push(node);

	    if (group.rightDelim != null) {
	      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
	      rightOp.setAttribute("fence", "true");
	      withDelims.push(rightOp);
	    }

	    return makeRow(withDelims);
	  }

	  return node;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
	  "\\\\bracefrac", "\\\\brackfrac" // ditto
	  ],
	  props: {
	    numArgs: 2,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var numer = args[0];
	    var denom = args[1];
	    var hasBarLine;
	    var leftDelim = null;
	    var rightDelim = null;
	    var size = "auto";

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\frac":
	      case "\\tfrac":
	        hasBarLine = true;
	        break;

	      case "\\\\atopfrac":
	        hasBarLine = false;
	        break;

	      case "\\dbinom":
	      case "\\binom":
	      case "\\tbinom":
	        hasBarLine = false;
	        leftDelim = "(";
	        rightDelim = ")";
	        break;

	      case "\\\\bracefrac":
	        hasBarLine = false;
	        leftDelim = "\\{";
	        rightDelim = "\\}";
	        break;

	      case "\\\\brackfrac":
	        hasBarLine = false;
	        leftDelim = "[";
	        rightDelim = "]";
	        break;

	      default:
	        throw new Error("Unrecognized genfrac command");
	    }

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\dbinom":
	        size = "display";
	        break;

	      case "\\tfrac":
	      case "\\tbinom":
	        size = "text";
	        break;
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: false,
	      numer,
	      denom,
	      hasBarLine,
	      leftDelim,
	      rightDelim,
	      size,
	      barSize: null
	    };
	  },
	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\cfrac"],
	  props: {
	    numArgs: 2
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var numer = args[0];
	    var denom = args[1];
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: true,
	      numer,
	      denom,
	      hasBarLine: true,
	      leftDelim: null,
	      rightDelim: null,
	      size: "display",
	      barSize: null
	    };
	  }
	}); // Infix generalized fractions -- these are not rendered directly, but replaced
	// immediately by one of the variants above.

	defineFunction({
	  type: "infix",
	  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
	  props: {
	    numArgs: 0,
	    infix: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref3;
	    var replaceWith;

	    switch (funcName) {
	      case "\\over":
	        replaceWith = "\\frac";
	        break;

	      case "\\choose":
	        replaceWith = "\\binom";
	        break;

	      case "\\atop":
	        replaceWith = "\\\\atopfrac";
	        break;

	      case "\\brace":
	        replaceWith = "\\\\bracefrac";
	        break;

	      case "\\brack":
	        replaceWith = "\\\\brackfrac";
	        break;

	      default:
	        throw new Error("Unrecognized infix genfrac command");
	    }

	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith,
	      token
	    };
	  }

	});
	var stylArray = ["display", "text", "script", "scriptscript"];

	var delimFromValue = function delimFromValue(delimString) {
	  var delim = null;

	  if (delimString.length > 0) {
	    delim = delimString;
	    delim = delim === "." ? null : delim;
	  }

	  return delim;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\genfrac"],
	  props: {
	    numArgs: 6,
	    allowedInArgument: true,
	    argTypes: ["math", "math", "size", "text", "math", "math"]
	  },

	  handler(_ref4, args) {
	    var {
	      parser
	    } = _ref4;
	    var numer = args[4];
	    var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

	    var leftNode = normalizeArgument(args[0]);
	    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
	    var rightNode = normalizeArgument(args[1]);
	    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
	    var barNode = assertNodeType(args[2], "size");
	    var hasBarLine;
	    var barSize = null;

	    if (barNode.isBlank) {
	      // \genfrac acts differently than \above.
	      // \genfrac treats an empty size group as a signal to use a
	      // standard bar size. \above would see size = 0 and omit the bar.
	      hasBarLine = true;
	    } else {
	      barSize = barNode.value;
	      hasBarLine = barSize.number > 0;
	    } // Find out if we want displaystyle, textstyle, etc.


	    var size = "auto";
	    var styl = args[3];

	    if (styl.type === "ordgroup") {
	      if (styl.body.length > 0) {
	        var textOrd = assertNodeType(styl.body[0], "textord");
	        size = stylArray[Number(textOrd.text)];
	      }
	    } else {
	      styl = assertNodeType(styl, "textord");
	      size = stylArray[Number(styl.text)];
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim,
	      rightDelim,
	      size
	    };
	  },

	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$6
	}); // \above is an infix fraction that also defines a fraction bar size.

	defineFunction({
	  type: "infix",
	  names: ["\\above"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    infix: true
	  },

	  handler(_ref5, args) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref5;
	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith: "\\\\abovefrac",
	      size: assertNodeType(args[0], "size").value,
	      token
	    };
	  }

	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\\\abovefrac"],
	  props: {
	    numArgs: 3,
	    argTypes: ["math", "size", "math"]
	  },
	  handler: (_ref6, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref6;
	    var numer = args[0];
	    var barSize = assert(assertNodeType(args[1], "infix").size);
	    var denom = args[2];
	    var hasBarLine = barSize.number > 0;
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim: null,
	      rightDelim: null,
	      size: "auto"
	    };
	  },
	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$6
	});

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
	// also "supsub" since an over/underbrace can affect super/subscripting.
	var htmlBuilder$7 = (grp, options) => {
	  var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

	  var supSubGroup;
	  var group;

	  if (grp.type === "supsub") {
	    // Ref: LaTeX source2e: }}}}\limits}
	    // i.e. LaTeX treats the brace similar to an op and passes it
	    // with \limits, so we need to assign supsub style.
	    supSubGroup = grp.sup ? buildGroup(grp.sup, options.havingStyle(style.sup()), options) : buildGroup(grp.sub, options.havingStyle(style.sub()), options);
	    group = assertNodeType(grp.base, "horizBrace");
	  } else {
	    group = assertNodeType(grp, "horizBrace");
	  } // Build the base group


	  var body = buildGroup(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element

	  var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
	  // This first vlist contains the content and the brace:   equation

	  var vlist;

	  if (group.isOver) {
	    vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: braceBody
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	  } else {
	    vlist = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: body.depth + 0.1 + braceBody.height,
	      children: [{
	        type: "elem",
	        elem: braceBody
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: body
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[0].classes.push("svg-align");
	  }

	  if (supSubGroup) {
	    // To write the supsub, wrap the first vlist in another vlist:
	    // They can't all go in the same vlist, because the note might be
	    // wider than the equation. We want the equation to control the
	    // brace width.
	    //      note          long note           long note
	    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
	    //    equation           eqn                 eqn
	    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

	    if (group.isOver) {
	      vlist = buildCommon.makeVList({
	        positionType: "firstBaseline",
	        children: [{
	          type: "elem",
	          elem: vSpan
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: supSubGroup
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "bottom",
	        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
	        children: [{
	          type: "elem",
	          elem: supSubGroup
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: vSpan
	        }]
	      }, options);
	    }
	  }

	  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
	};

	var mathmlBuilder$7 = (group, options) => {
	  var accentNode = stretchy.mathMLnode(group.label);
	  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup$1(group.base, options), accentNode]);
	}; // Horizontal stretchy braces


	defineFunction({
	  type: "horizBrace",
	  names: ["\\overbrace", "\\underbrace"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "horizBrace",
	      mode: parser.mode,
	      label: funcName,
	      isOver: /^\\over/.test(funcName),
	      base: args[0]
	    };
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$7
	});

	defineFunction({
	  type: "href",
	  names: ["\\href"],
	  props: {
	    numArgs: 2,
	    argTypes: ["url", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[1];
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\href",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\href");
	    }

	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression(group.body, options, false);
	    return buildCommon.makeAnchor(group.href, [], elements, options);
	  },
	  mathmlBuilder: (group, options) => {
	    var math = buildExpressionRow(group.body, options);

	    if (!(math instanceof MathNode)) {
	      math = new MathNode("mrow", [math]);
	    }

	    math.setAttribute("href", group.href);
	    return math;
	  }
	});
	defineFunction({
	  type: "href",
	  names: ["\\url"],
	  props: {
	    numArgs: 1,
	    argTypes: ["url"],
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\url",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\url");
	    }

	    var chars = [];

	    for (var i = 0; i < href.length; i++) {
	      var c = href[i];

	      if (c === "~") {
	        c = "\\textasciitilde";
	      }

	      chars.push({
	        type: "textord",
	        mode: "text",
	        text: c
	      });
	    }

	    var body = {
	      type: "text",
	      mode: parser.mode,
	      font: "\\texttt",
	      body: chars
	    };
	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  }
	});

	// In LaTeX, \vcenter can act only on a box, as in
	// \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
	// This function by itself doesn't do anything but prevent a soft line break.

	defineFunction({
	  type: "hbox",
	  names: ["\\hbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "hbox",
	      mode: parser.mode,
	      body: ordargument(args[0])
	    };
	  },

	  htmlBuilder(group, options) {
	    var elements = buildExpression(group.body, options, false);
	    return buildCommon.makeFragment(elements);
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", buildExpression$1(group.body, options));
	  }

	});

	defineFunction({
	  type: "html",
	  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
	  props: {
	    numArgs: 2,
	    argTypes: ["raw", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref;
	    var value = assertNodeType(args[0], "raw").string;
	    var body = args[1];

	    if (parser.settings.strict) {
	      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
	    }

	    var trustContext;
	    var attributes = {};

	    switch (funcName) {
	      case "\\htmlClass":
	        attributes.class = value;
	        trustContext = {
	          command: "\\htmlClass",
	          class: value
	        };
	        break;

	      case "\\htmlId":
	        attributes.id = value;
	        trustContext = {
	          command: "\\htmlId",
	          id: value
	        };
	        break;

	      case "\\htmlStyle":
	        attributes.style = value;
	        trustContext = {
	          command: "\\htmlStyle",
	          style: value
	        };
	        break;

	      case "\\htmlData":
	        {
	          var data = value.split(",");

	          for (var i = 0; i < data.length; i++) {
	            var keyVal = data[i].split("=");

	            if (keyVal.length !== 2) {
	              throw new ParseError("Error parsing key-value for \\htmlData");
	            }

	            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
	          }

	          trustContext = {
	            command: "\\htmlData",
	            attributes
	          };
	          break;
	        }

	      default:
	        throw new Error("Unrecognized html command");
	    }

	    if (!parser.settings.isTrusted(trustContext)) {
	      return parser.formatUnsupportedCmd(funcName);
	    }

	    return {
	      type: "html",
	      mode: parser.mode,
	      attributes,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression(group.body, options, false);
	    var classes = ["enclosing"];

	    if (group.attributes.class) {
	      classes.push(...group.attributes.class.trim().split(/\s+/));
	    }

	    var span = buildCommon.makeSpan(classes, elements, options);

	    for (var attr in group.attributes) {
	      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
	        span.setAttribute(attr, group.attributes[attr]);
	      }
	    }

	    return span;
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.body, options);
	  }
	});

	defineFunction({
	  type: "htmlmathml",
	  names: ["\\html@mathml"],
	  props: {
	    numArgs: 2,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "htmlmathml",
	      mode: parser.mode,
	      html: ordargument(args[0]),
	      mathml: ordargument(args[1])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression(group.html, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.mathml, options);
	  }
	});

	var sizeData = function sizeData(str) {
	  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
	    // str is a number with no unit specified.
	    // default unit is bp, per graphix package.
	    return {
	      number: +str,
	      unit: "bp"
	    };
	  } else {
	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
	    }

	    return data;
	  }
	};

	defineFunction({
	  type: "includegraphics",
	  names: ["\\includegraphics"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    argTypes: ["raw", "url"],
	    allowedInText: false
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var width = {
	      number: 0,
	      unit: "em"
	    };
	    var height = {
	      number: 0.9,
	      unit: "em"
	    }; // sorta character sized.

	    var totalheight = {
	      number: 0,
	      unit: "em"
	    };
	    var alt = "";

	    if (optArgs[0]) {
	      var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

	      var attributes = attributeStr.split(",");

	      for (var i = 0; i < attributes.length; i++) {
	        var keyVal = attributes[i].split("=");

	        if (keyVal.length === 2) {
	          var str = keyVal[1].trim();

	          switch (keyVal[0].trim()) {
	            case "alt":
	              alt = str;
	              break;

	            case "width":
	              width = sizeData(str);
	              break;

	            case "height":
	              height = sizeData(str);
	              break;

	            case "totalheight":
	              totalheight = sizeData(str);
	              break;

	            default:
	              throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
	          }
	        }
	      }
	    }

	    var src = assertNodeType(args[0], "url").url;

	    if (alt === "") {
	      // No alt given. Use the file name. Strip away the path.
	      alt = src;
	      alt = alt.replace(/^.*[\\/]/, '');
	      alt = alt.substring(0, alt.lastIndexOf('.'));
	    }

	    if (!parser.settings.isTrusted({
	      command: "\\includegraphics",
	      url: src
	    })) {
	      return parser.formatUnsupportedCmd("\\includegraphics");
	    }

	    return {
	      type: "includegraphics",
	      mode: parser.mode,
	      alt: alt,
	      width: width,
	      height: height,
	      totalheight: totalheight,
	      src: src
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	      depth = Number(depth.toFixed(2));
	    }

	    var width = 0;

	    if (group.width.number > 0) {
	      width = calculateSize(group.width, options);
	    }

	    var style = {
	      height: height + depth + "em"
	    };

	    if (width > 0) {
	      style.width = width + "em";
	    }

	    if (depth > 0) {
	      style.verticalAlign = -depth + "em";
	    }

	    var node = new Img(group.src, group.alt, style);
	    node.height = height;
	    node.depth = depth;
	    return node;
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mglyph", []);
	    node.setAttribute("alt", group.alt);
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	      depth = depth.toFixed(2);
	      node.setAttribute("valign", "-" + depth + "em");
	    }

	    node.setAttribute("height", height + depth + "em");

	    if (group.width.number > 0) {
	      var width = calculateSize(group.width, options);
	      node.setAttribute("width", width + "em");
	    }

	    node.setAttribute("src", group.src);
	    return node;
	  }
	});

	// Horizontal spacing commands

	defineFunction({
	  type: "kern",
	  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    primitive: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var size = assertNodeType(args[0], "size");

	    if (parser.settings.strict) {
	      var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

	      var muUnit = size.value.unit === 'mu';

	      if (mathFunction) {
	        if (!muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
	        }

	        if (parser.mode !== "math") {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
	        }
	      } else {
	        // !mathFunction
	        if (muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
	        }
	      }
	    }

	    return {
	      type: "kern",
	      mode: parser.mode,
	      dimension: size.value
	    };
	  },

	  htmlBuilder(group, options) {
	    return buildCommon.makeGlue(group.dimension, options);
	  },

	  mathmlBuilder(group, options) {
	    var dimension = calculateSize(group.dimension, options);
	    return new mathMLTree.SpaceNode(dimension);
	  }

	});

	// Horizontal overlap functions
	defineFunction({
	  type: "lap",
	  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "lap",
	      mode: parser.mode,
	      alignment: funcName.slice(5),
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var inner;

	    if (group.alignment === "clap") {
	      // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
	      inner = buildCommon.makeSpan([], [buildGroup(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

	      inner = buildCommon.makeSpan(["inner"], [inner], options);
	    } else {
	      inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options)]);
	    }

	    var fix = buildCommon.makeSpan(["fix"], []);
	    var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
	    // two items involved in the lap.
	    // Next, use a strut to set the height of the HTML bounding box.
	    // Otherwise, a tall argument may be misplaced.
	    // This code resolved issue #1153

	    var strut = buildCommon.makeSpan(["strut"]);
	    strut.style.height = node.height + node.depth + "em";
	    strut.style.verticalAlign = -node.depth + "em";
	    node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
	    // This code resolves issue #1234

	    node = buildCommon.makeSpan(["thinbox"], [node], options);
	    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, options)]);

	    if (group.alignment !== "rlap") {
	      var offset = group.alignment === "llap" ? "-1" : "-0.5";
	      node.setAttribute("lspace", offset + "width");
	    }

	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "styling",
	  names: ["\\(", "$"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(_ref, args) {
	    var {
	      funcName,
	      parser
	    } = _ref;
	    var outerMode = parser.mode;
	    parser.switchMode("math");
	    var close = funcName === "\\(" ? "\\)" : "$";
	    var body = parser.parseExpression(false, close);
	    parser.expect(close);
	    parser.switchMode(outerMode);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      style: "text",
	      body
	    };
	  }

	}); // Check for extra closing math delimiters

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\)", "\\]"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(context, args) {
	    throw new ParseError("Mismatched " + context.funcName);
	  }

	});

	var chooseMathStyle = (group, options) => {
	  switch (options.style.size) {
	    case Style$1.DISPLAY.size:
	      return group.display;

	    case Style$1.TEXT.size:
	      return group.text;

	    case Style$1.SCRIPT.size:
	      return group.script;

	    case Style$1.SCRIPTSCRIPT.size:
	      return group.scriptscript;

	    default:
	      return group.text;
	  }
	};

	defineFunction({
	  type: "mathchoice",
	  names: ["\\mathchoice"],
	  props: {
	    numArgs: 4,
	    primitive: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "mathchoice",
	      mode: parser.mode,
	      display: ordargument(args[0]),
	      text: ordargument(args[1]),
	      script: ordargument(args[2]),
	      scriptscript: ordargument(args[3])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    var elements = buildExpression(body, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    return buildExpressionRow(body, options);
	  }
	});

	// For an operator with limits, assemble the base, sup, and sub into a span.
	var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
	  base = buildCommon.makeSpan([], [base]);
	  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
	  var sub;
	  var sup; // We manually have to handle the superscripts and subscripts. This,
	  // aside from the kern calculations, is copied from supsub.

	  if (supGroup) {
	    var elem = buildGroup(supGroup, options.havingStyle(style.sup()), options);
	    sup = {
	      elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
	    };
	  }

	  if (subGroup) {
	    var _elem = buildGroup(subGroup, options.havingStyle(style.sub()), options);

	    sub = {
	      elem: _elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
	    };
	  } // Build the final group as a vlist of the possible subscript, base,
	  // and possible superscript.


	  var finalGroup;

	  if (sup && sub) {
	    var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: bottom,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: -slant + "em"
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: slant + "em"
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else if (sub) {
	    var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
	    // that we are supposed to shift the limits by 1/2 of the slant,
	    // but since we are centering the limits adding a full slant of
	    // margin will shift by 1/2 that.

	    finalGroup = buildCommon.makeVList({
	      positionType: "top",
	      positionData: top,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: -slant + "em"
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }]
	    }, options);
	  } else if (sup) {
	    var _bottom = base.depth + baseShift;

	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: _bottom,
	      children: [{
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: slant + "em"
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else {
	    // This case probably shouldn't occur (this would mean the
	    // supsub was sending us a group with no superscript or
	    // subscript) but be safe.
	    return base;
	  }

	  var parts = [finalGroup];

	  if (sub && slant !== 0 && !subIsSingleCharacter) {
	    // A negative margin-left was applied to the lower limit.
	    // Avoid an overlap by placing a spacer on the left on the group.
	    var spacer = buildCommon.makeSpan(["mspace"], [], options);
	    spacer.style.marginRight = slant + "em";
	    parts.unshift(spacer);
	  }

	  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
	};

	// Limits, symbols
	// Most operators have a large successor symbol, but these don't.
	var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
	// "supsub" since some of them (like \int) can affect super/subscripting.

	var htmlBuilder$8 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "op");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "op");
	  }

	  var style = options.style;
	  var large = false;

	  if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
	    // Most symbol operators get larger in displaystyle (rule 13)
	    large = true;
	  }

	  var base;

	  if (group.symbol) {
	    // If this is a symbol, create the symbol.
	    var fontName = large ? "Size2-Regular" : "Size1-Regular";
	    var stash = "";

	    if (group.name === "\\oiint" || group.name === "\\oiiint") {
	      // No font glyphs yet, so use a glyph w/o the oval.
	      // TODO: When font glyphs are available, delete this code.
	      stash = group.name.substr(1);
	      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
	    }

	    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

	    if (stash.length > 0) {
	      // We're in \oiint or \oiiint. Overlay the oval.
	      // TODO: When font glyphs are available, delete this code.
	      var italic = base.italic;
	      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
	      base = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: base,
	          shift: 0
	        }, {
	          type: "elem",
	          elem: oval,
	          shift: large ? 0.08 : 0
	        }]
	      }, options);
	      group.name = "\\" + stash;
	      base.classes.unshift("mop"); // $FlowFixMe

	      base.italic = italic;
	    }
	  } else if (group.body) {
	    // If this is a list, compose that list.
	    var inner = buildExpression(group.body, options, true);

	    if (inner.length === 1 && inner[0] instanceof SymbolNode) {
	      base = inner[0];
	      base.classes[0] = "mop"; // replace old mclass
	    } else {
	      base = buildCommon.makeSpan(["mop"], inner, options);
	    }
	  } else {
	    // Otherwise, this is a text operator. Build the text from the
	    // operator's name.
	    var output = [];

	    for (var i = 1; i < group.name.length; i++) {
	      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
	    }

	    base = buildCommon.makeSpan(["mop"], output, options);
	  } // If content of op is a single symbol, shift it vertically.


	  var baseShift = 0;
	  var slant = 0;

	  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
	    // We suppress the shift of the base of \overset and \underset. Otherwise,
	    // shift the symbol so its center lies on the axis (rule 13). It
	    // appears that our fonts have the centers of the symbols already
	    // almost on the axis, so these numbers are very small. Note we
	    // don't actually apply this here, but instead it is used either in
	    // the vlist creation or separately when there are no limits.
	    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
	    // $FlowFixMe

	    slant = base.italic;
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
	  } else {
	    if (baseShift) {
	      base.style.position = "relative";
	      base.style.top = baseShift + "em";
	    }

	    return base;
	  }
	};

	var mathmlBuilder$8 = (group, options) => {
	  var node;

	  if (group.symbol) {
	    // This is a symbol. Just add the symbol.
	    node = new MathNode("mo", [makeText(group.name, group.mode)]);

	    if (utils.contains(noSuccessor, group.name)) {
	      node.setAttribute("largeop", "false");
	    }
	  } else if (group.body) {
	    // This is an operator with children. Add them.
	    node = new MathNode("mo", buildExpression$1(group.body, options));
	  } else {
	    // This is a text operator. Add all of the characters from the
	    // operator's name.
	    node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
	    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

	    var operator = new MathNode("mo", [makeText("\u2061", "text")]);

	    if (group.parentIsSupSub) {
	      node = new MathNode("mrow", [node, operator]);
	    } else {
	      node = newDocumentFragment([node, operator]);
	    }
	  }

	  return node;
	};

	var singleCharBigOps = {
	  "\u220F": "\\prod",
	  "\u2210": "\\coprod",
	  "\u2211": "\\sum",
	  "\u22c0": "\\bigwedge",
	  "\u22c1": "\\bigvee",
	  "\u22c2": "\\bigcap",
	  "\u22c3": "\\bigcup",
	  "\u2a00": "\\bigodot",
	  "\u2a01": "\\bigoplus",
	  "\u2a02": "\\bigotimes",
	  "\u2a04": "\\biguplus",
	  "\u2a06": "\\bigsqcup"
	};
	defineFunction({
	  type: "op",
	  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22c0", "\u22c1", "\u22c2", "\u22c3", "\u2a00", "\u2a01", "\u2a02", "\u2a04", "\u2a06"],
	  props: {
	    numArgs: 0
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharBigOps[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },
	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$8
	}); // Note: calling defineFunction with a type that's already been defined only
	// works because the same htmlBuilder and mathmlBuilder are being used.

	defineFunction({
	  type: "op",
	  names: ["\\mathop"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$8
	}); // There are 2 flags for operators; whether they produce limits in
	// displaystyle, and whether they are symbols and should grow in
	// displaystyle. These four groups cover the four possible choices.

	var singleCharIntegrals = {
	  "\u222b": "\\int",
	  "\u222c": "\\iint",
	  "\u222d": "\\iiint",
	  "\u222e": "\\oint",
	  "\u222f": "\\oiint",
	  "\u2230": "\\oiiint"
	}; // No limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$8
	}); // Limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$8
	}); // No limits, symbols

	defineFunction({
	  type: "op",
	  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222b", "\u222c", "\u222d", "\u222e", "\u222f", "\u2230"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref5) {
	    var {
	      parser,
	      funcName
	    } = _ref5;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharIntegrals[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$8
	});

	/**
	 * Predefined macros for KaTeX.
	 * This can be used to define some commands in terms of others.
	 */
	var builtinMacros = {};

	function defineMacro(name, body) {
	  builtinMacros[name] = body;
	} //////////////////////////////////////////////////////////////////////
	// macro tools

	defineMacro("\\noexpand", function (context) {
	  // The expansion is the token itself; but that token is interpreted
	  // as if its meaning were ‘\relax’ if it is a control sequence that
	  // would ordinarily be expanded by TeX’s expansion rules.
	  var t = context.popToken();

	  if (context.isExpandable(t.text)) {
	    t.noexpand = true;
	    t.treatAsRelax = true;
	  }

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	});
	defineMacro("\\expandafter", function (context) {
	  // TeX first reads the token that comes immediately after \expandafter,
	  // without expanding it; let’s call this token t. Then TeX reads the
	  // token that comes after t (and possibly more tokens, if that token
	  // has an argument), replacing it by its expansion. Finally TeX puts
	  // t back in front of that expansion.
	  var t = context.popToken();
	  context.expandOnce(true); // expand only an expandable token

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	}); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
	// TeX source: \long\def\@firstoftwo#1#2{#1}

	defineMacro("\\@firstoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[0],
	    numArgs: 0
	  };
	}); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
	// TeX source: \long\def\@secondoftwo#1#2{#2}

	defineMacro("\\@secondoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[1],
	    numArgs: 0
	  };
	}); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
	// symbol that isn't a space, consuming any spaces but not consuming the
	// first nonspace character.  If that nonspace character matches #1, then
	// the macro expands to #2; otherwise, it expands to #3.

	defineMacro("\\@ifnextchar", function (context) {
	  var args = context.consumeArgs(3); // symbol, if, else

	  context.consumeSpaces();
	  var nextToken = context.future();

	  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[2],
	      numArgs: 0
	    };
	  }
	}); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
	// If it is `*`, then it consumes the symbol, and the macro expands to #1;
	// otherwise, the macro expands to #2 (without consuming the symbol).
	// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

	defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

	defineMacro("\\TextOrMath", function (context) {
	  var args = context.consumeArgs(2);

	  if (context.mode === 'text') {
	    return {
	      tokens: args[0],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  }
	}); // Lookup table for parsing numbers in base 8 through 16

	var digitToNumber = {
	  "0": 0,
	  "1": 1,
	  "2": 2,
	  "3": 3,
	  "4": 4,
	  "5": 5,
	  "6": 6,
	  "7": 7,
	  "8": 8,
	  "9": 9,
	  "a": 10,
	  "A": 10,
	  "b": 11,
	  "B": 11,
	  "c": 12,
	  "C": 12,
	  "d": 13,
	  "D": 13,
	  "e": 14,
	  "E": 14,
	  "f": 15,
	  "F": 15
	}; // TeX \char makes a literal character (catcode 12) using the following forms:
	// (see The TeXBook, p. 43)
	//   \char123  -- decimal
	//   \char'123 -- octal
	//   \char"123 -- hex
	//   \char`x   -- character that can be written (i.e. isn't active)
	//   \char`\x  -- character that cannot be written (e.g. %)
	// These all refer to characters from the font, so we turn them into special
	// calls to a function \@char dealt with in the Parser.

	defineMacro("\\char", function (context) {
	  var token = context.popToken();
	  var base;
	  var number = '';

	  if (token.text === "'") {
	    base = 8;
	    token = context.popToken();
	  } else if (token.text === '"') {
	    base = 16;
	    token = context.popToken();
	  } else if (token.text === "`") {
	    token = context.popToken();

	    if (token.text[0] === "\\") {
	      number = token.text.charCodeAt(1);
	    } else if (token.text === "EOF") {
	      throw new ParseError("\\char` missing argument");
	    } else {
	      number = token.text.charCodeAt(0);
	    }
	  } else {
	    base = 10;
	  }

	  if (base) {
	    // Parse a number in the given base, starting with first `token`.
	    number = digitToNumber[token.text];

	    if (number == null || number >= base) {
	      throw new ParseError("Invalid base-" + base + " digit " + token.text);
	    }

	    var digit;

	    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
	      number *= base;
	      number += digit;
	      context.popToken();
	    }
	  }

	  return "\\@char{" + number + "}";
	}); // \newcommand{\macro}[args]{definition}
	// \renewcommand{\macro}[args]{definition}
	// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

	var newcommand = (context, existsOK, nonexistsOK) => {
	  var arg = context.consumeArg().tokens;

	  if (arg.length !== 1) {
	    throw new ParseError("\\newcommand's first argument must be a macro name");
	  }

	  var name = arg[0].text;
	  var exists = context.isDefined(name);

	  if (exists && !existsOK) {
	    throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
	  }

	  if (!exists && !nonexistsOK) {
	    throw new ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
	  }

	  var numArgs = 0;
	  arg = context.consumeArg().tokens;

	  if (arg.length === 1 && arg[0].text === "[") {
	    var argText = '';
	    var token = context.expandNextToken();

	    while (token.text !== "]" && token.text !== "EOF") {
	      // TODO: Should properly expand arg, e.g., ignore {}s
	      argText += token.text;
	      token = context.expandNextToken();
	    }

	    if (!argText.match(/^\s*[0-9]+\s*$/)) {
	      throw new ParseError("Invalid number of arguments: " + argText);
	    }

	    numArgs = parseInt(argText);
	    arg = context.consumeArg().tokens;
	  } // Final arg is the expansion of the macro


	  context.macros.set(name, {
	    tokens: arg,
	    numArgs
	  });
	  return '';
	};

	defineMacro("\\newcommand", context => newcommand(context, false, true));
	defineMacro("\\renewcommand", context => newcommand(context, true, false));
	defineMacro("\\providecommand", context => newcommand(context, true, true)); // terminal (console) tools

	defineMacro("\\message", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.log(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\errmessage", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.error(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\show", context => {
	  var tok = context.popToken();
	  var name = tok.text; // eslint-disable-next-line no-console

	  console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
	  return '';
	}); //////////////////////////////////////////////////////////////////////
	// Grouping
	// \let\bgroup={ \let\egroup=}

	defineMacro("\\bgroup", "{");
	defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
	// \def~{\nobreakspace{}}
	// \def\lq{`}
	// \def\rq{'}
	// \def \aa {\r a}
	// \def \AA {\r A}

	defineMacro("~", "\\nobreakspace");
	defineMacro("\\lq", "`");
	defineMacro("\\rq", "'");
	defineMacro("\\aa", "\\r a");
	defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
	// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
	// \DeclareTextCommandDefault{\textregistered}{\textcircled{%
	//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
	// \DeclareRobustCommand{\copyright}{%
	//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

	defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
	defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
	defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

	defineMacro("\u212C", "\\mathscr{B}"); // script

	defineMacro("\u2130", "\\mathscr{E}");
	defineMacro("\u2131", "\\mathscr{F}");
	defineMacro("\u210B", "\\mathscr{H}");
	defineMacro("\u2110", "\\mathscr{I}");
	defineMacro("\u2112", "\\mathscr{L}");
	defineMacro("\u2133", "\\mathscr{M}");
	defineMacro("\u211B", "\\mathscr{R}");
	defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

	defineMacro("\u210C", "\\mathfrak{H}");
	defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

	defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
	// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
	// the dot at U+22C5 and gives it punct spacing.

	defineMacro("\u00b7", "\\cdotp"); // \llap and \rlap render their contents in text mode

	defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
	defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
	defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

	defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

	defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
	// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
	// It's thus treated like a \mathrel, but defined by a symbol that has zero
	// width but extends to the right.  We use \rlap to get that spacing.
	// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

	defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
	// \def\neq{\not=} \let\ne=\neq
	// \DeclareRobustCommand
	//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
	// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

	defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
	defineMacro("\\ne", "\\neq");
	defineMacro("\u2260", "\\neq");
	defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
	defineMacro("\u2209", "\\notin"); // Unicode stacked relations

	defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
	defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
	defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
	defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
	defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

	defineMacro("\u27C2", "\\perp");
	defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
	defineMacro("\u220C", "\\notni");
	defineMacro("\u231C", "\\ulcorner");
	defineMacro("\u231D", "\\urcorner");
	defineMacro("\u231E", "\\llcorner");
	defineMacro("\u231F", "\\lrcorner");
	defineMacro("\u00A9", "\\copyright");
	defineMacro("\u00AE", "\\textregistered");
	defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
	// For MathML purposes, use the Unicode code point.

	defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
	defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
	defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
	defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX_2ε
	// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
	// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
	// We'll call \varvdots, which gets a glyph from symbols.js.
	// The zero-width rule gets us an equivalent to the vertical 6pt kern.

	defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
	defineMacro("\u22ee", "\\vdots"); //////////////////////////////////////////////////////////////////////
	// amsmath.sty
	// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
	// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
	// but they are equivalent to \mathit{\Letter}.

	defineMacro("\\varGamma", "\\mathit{\\Gamma}");
	defineMacro("\\varDelta", "\\mathit{\\Delta}");
	defineMacro("\\varTheta", "\\mathit{\\Theta}");
	defineMacro("\\varLambda", "\\mathit{\\Lambda}");
	defineMacro("\\varXi", "\\mathit{\\Xi}");
	defineMacro("\\varPi", "\\mathit{\\Pi}");
	defineMacro("\\varSigma", "\\mathit{\\Sigma}");
	defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
	defineMacro("\\varPhi", "\\mathit{\\Phi}");
	defineMacro("\\varPsi", "\\mathit{\\Psi}");
	defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

	defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
	// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

	defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

	defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
	// \def\implies{\DOTSB\;\Longrightarrow\;}
	// \def\impliedby{\DOTSB\;\Longleftarrow\;}

	defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
	defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
	defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

	var dotsByToken = {
	  ',': '\\dotsc',
	  '\\not': '\\dotsb',
	  // \keybin@ checks for the following:
	  '+': '\\dotsb',
	  '=': '\\dotsb',
	  '<': '\\dotsb',
	  '>': '\\dotsb',
	  '-': '\\dotsb',
	  '*': '\\dotsb',
	  ':': '\\dotsb',
	  // Symbols whose definition starts with \DOTSB:
	  '\\DOTSB': '\\dotsb',
	  '\\coprod': '\\dotsb',
	  '\\bigvee': '\\dotsb',
	  '\\bigwedge': '\\dotsb',
	  '\\biguplus': '\\dotsb',
	  '\\bigcap': '\\dotsb',
	  '\\bigcup': '\\dotsb',
	  '\\prod': '\\dotsb',
	  '\\sum': '\\dotsb',
	  '\\bigotimes': '\\dotsb',
	  '\\bigoplus': '\\dotsb',
	  '\\bigodot': '\\dotsb',
	  '\\bigsqcup': '\\dotsb',
	  '\\And': '\\dotsb',
	  '\\longrightarrow': '\\dotsb',
	  '\\Longrightarrow': '\\dotsb',
	  '\\longleftarrow': '\\dotsb',
	  '\\Longleftarrow': '\\dotsb',
	  '\\longleftrightarrow': '\\dotsb',
	  '\\Longleftrightarrow': '\\dotsb',
	  '\\mapsto': '\\dotsb',
	  '\\longmapsto': '\\dotsb',
	  '\\hookrightarrow': '\\dotsb',
	  '\\doteq': '\\dotsb',
	  // Symbols whose definition starts with \mathbin:
	  '\\mathbin': '\\dotsb',
	  // Symbols whose definition starts with \mathrel:
	  '\\mathrel': '\\dotsb',
	  '\\relbar': '\\dotsb',
	  '\\Relbar': '\\dotsb',
	  '\\xrightarrow': '\\dotsb',
	  '\\xleftarrow': '\\dotsb',
	  // Symbols whose definition starts with \DOTSI:
	  '\\DOTSI': '\\dotsi',
	  '\\int': '\\dotsi',
	  '\\oint': '\\dotsi',
	  '\\iint': '\\dotsi',
	  '\\iiint': '\\dotsi',
	  '\\iiiint': '\\dotsi',
	  '\\idotsint': '\\dotsi',
	  // Symbols whose definition starts with \DOTSX:
	  '\\DOTSX': '\\dotsx'
	};
	defineMacro("\\dots", function (context) {
	  // TODO: If used in text mode, should expand to \textellipsis.
	  // However, in KaTeX, \textellipsis and \ldots behave the same
	  // (in text mode), and it's unlikely we'd see any of the math commands
	  // that affect the behavior of \dots when in text mode.  So fine for now
	  // (until we support \ifmmode ... \else ... \fi).
	  var thedots = '\\dotso';
	  var next = context.expandAfterFuture().text;

	  if (next in dotsByToken) {
	    thedots = dotsByToken[next];
	  } else if (next.substr(0, 4) === '\\not') {
	    thedots = '\\dotsb';
	  } else if (next in symbols.math) {
	    if (utils.contains(['bin', 'rel'], symbols.math[next].group)) {
	      thedots = '\\dotsb';
	    }
	  }

	  return thedots;
	});
	var spaceAfterDots = {
	  // \rightdelim@ checks for the following:
	  ')': true,
	  ']': true,
	  '\\rbrack': true,
	  '\\}': true,
	  '\\rbrace': true,
	  '\\rangle': true,
	  '\\rceil': true,
	  '\\rfloor': true,
	  '\\rgroup': true,
	  '\\rmoustache': true,
	  '\\right': true,
	  '\\bigr': true,
	  '\\biggr': true,
	  '\\Bigr': true,
	  '\\Biggr': true,
	  // \extra@ also tests for the following:
	  '$': true,
	  // \extrap@ checks for the following:
	  ';': true,
	  '.': true,
	  ',': true
	};
	defineMacro("\\dotso", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\dotsc", function (context) {
	  var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
	  // ';' and '.', but doesn't check for ','.

	  if (next in spaceAfterDots && next !== ',') {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\cdots", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\@cdots\\,";
	  } else {
	    return "\\@cdots";
	  }
	});
	defineMacro("\\dotsb", "\\cdots");
	defineMacro("\\dotsm", "\\cdots");
	defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
	// starting with \DOTSX implies \dotso, and then \extra@ detects this case
	// and forces the added `\,`.

	defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
	// \let\DOTSB\relax
	// \let\DOTSX\relax

	defineMacro("\\DOTSI", "\\relax");
	defineMacro("\\DOTSB", "\\relax");
	defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
	// \DeclareRobustCommand{\tmspace}[3]{%
	//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

	defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

	defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
	// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
	// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\>", "\\mskip{4mu}");
	defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

	defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip = 5mu plus 5mu

	defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

	defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

	defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
	// TODO: math mode should use \medmuskip

	defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip

	defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

	defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

	defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

	defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

	defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

	defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
	defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
	defineMacro("\\tag@literal", context => {
	  if (context.macros.get("\\df@tag")) {
	    throw new ParseError("Multiple \\tag");
	  }

	  return "\\gdef\\df@tag{\\text{#1}}";
	}); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
	//   {\operator@font mod}\penalty900
	//   \mkern5mu\nonscript\mskip-\medmuskip}
	// \newcommand{\pod}[1]{\allowbreak
	//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
	// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
	// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
	//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
	// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
	defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
	defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
	defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
	// The version in ambsy.sty works by typesetting three copies of the argument
	// with small offsets. We use two copies. We omit the vertical offset because
	// of rendering problems that makeVList encounters in Safari.

	defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX source2e
	// \expandafter\let\expandafter\@normalcr
	//     \csname\expandafter\@gobble\string\\ \endcsname
	// \DeclareRobustCommand\newline{\@normalcr\relax}

	defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
	// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
	// support \@ yet, so that's omitted, and we add \text so that the result
	// doesn't look funny in math mode.

	defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
	//         {\sbox\z@ T%
	//          \vbox to\ht\z@{\hbox{\check@mathfonts
	//                               \fontsize\sf@size\z@
	//                               \math@fontsfalse\selectfont
	//                               A}%
	//                         \vss}%
	//         }%
	//         \kern-.15em%
	//         \TeX}
	// This code aligns the top of the A with the T (from the perspective of TeX's
	// boxes, though visually the A appears to extend above slightly).
	// We compute the corresponding \raisebox when A is rendered in \normalsize
	// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

	var latexRaiseA = fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1] + "em";
	defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

	defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
	// \def\@hspace#1{\hskip  #1\relax}
	// \def\@hspacer#1{\vrule \@width\z@\nobreak
	//                 \hskip #1\hskip \z@skip}

	defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
	defineMacro("\\@hspace", "\\hskip #1\\relax");
	defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
	// mathtools.sty
	//\providecommand\ordinarycolon{:}

	defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
	//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

	defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

	defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
	// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
	// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

	defineMacro("\u2237", "\\dblcolon"); // ::

	defineMacro("\u2239", "\\eqcolon"); // -:

	defineMacro("\u2254", "\\coloneqq"); // :=

	defineMacro("\u2255", "\\eqqcolon"); // =:

	defineMacro("\u2A74", "\\Coloneqq"); // ::=
	//////////////////////////////////////////////////////////////////////
	// colonequals.sty
	// Alternate names for mathtools's macros:

	defineMacro("\\ratio", "\\vcentcolon");
	defineMacro("\\coloncolon", "\\dblcolon");
	defineMacro("\\colonequals", "\\coloneqq");
	defineMacro("\\coloncolonequals", "\\Coloneqq");
	defineMacro("\\equalscolon", "\\eqqcolon");
	defineMacro("\\equalscoloncolon", "\\Eqqcolon");
	defineMacro("\\colonminus", "\\coloneq");
	defineMacro("\\coloncolonminus", "\\Coloneq");
	defineMacro("\\minuscolon", "\\eqcolon");
	defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

	defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

	defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

	defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
	defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

	defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
	defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
	defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
	// From amsopn.sty

	defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
	defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
	defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
	defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
	defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
	defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
	// MathML alternates for KaTeX glyphs in the Unicode private area

	defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
	defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
	defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
	defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
	defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
	defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
	defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
	defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
	defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
	defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
	defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
	defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
	defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
	defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
	defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
	defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
	// stmaryrd and semantic
	// The stmaryrd and semantic packages render the next four items by calling a
	// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

	defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27e6}}");
	defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27e7}}");
	defineMacro("\u27e6", "\\llbracket"); // blackboard bold [

	defineMacro("\u27e7", "\\rrbracket"); // blackboard bold ]

	defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
	defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
	defineMacro("\u2983", "\\lBrace"); // blackboard bold {

	defineMacro("\u2984", "\\rBrace"); // blackboard bold }
	// TODO: Create variable sized versions of the last two items. I believe that
	// will require new font glyphs.
	// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
	// superimposes the characters \circ and \mathminus. Used in chemistry.

	defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
	defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
	// texvc.sty
	// The texvc package contains macros available in mediawiki pages.
	// We omit the functions deprecated at
	// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
	// We also omit texvc's \O, which conflicts with \text{\O}

	defineMacro("\\darr", "\\downarrow");
	defineMacro("\\dArr", "\\Downarrow");
	defineMacro("\\Darr", "\\Downarrow");
	defineMacro("\\lang", "\\langle");
	defineMacro("\\rang", "\\rangle");
	defineMacro("\\uarr", "\\uparrow");
	defineMacro("\\uArr", "\\Uparrow");
	defineMacro("\\Uarr", "\\Uparrow");
	defineMacro("\\N", "\\mathbb{N}");
	defineMacro("\\R", "\\mathbb{R}");
	defineMacro("\\Z", "\\mathbb{Z}");
	defineMacro("\\alef", "\\aleph");
	defineMacro("\\alefsym", "\\aleph");
	defineMacro("\\Alpha", "\\mathrm{A}");
	defineMacro("\\Beta", "\\mathrm{B}");
	defineMacro("\\bull", "\\bullet");
	defineMacro("\\Chi", "\\mathrm{X}");
	defineMacro("\\clubs", "\\clubsuit");
	defineMacro("\\cnums", "\\mathbb{C}");
	defineMacro("\\Complex", "\\mathbb{C}");
	defineMacro("\\Dagger", "\\ddagger");
	defineMacro("\\diamonds", "\\diamondsuit");
	defineMacro("\\empty", "\\emptyset");
	defineMacro("\\Epsilon", "\\mathrm{E}");
	defineMacro("\\Eta", "\\mathrm{H}");
	defineMacro("\\exist", "\\exists");
	defineMacro("\\harr", "\\leftrightarrow");
	defineMacro("\\hArr", "\\Leftrightarrow");
	defineMacro("\\Harr", "\\Leftrightarrow");
	defineMacro("\\hearts", "\\heartsuit");
	defineMacro("\\image", "\\Im");
	defineMacro("\\infin", "\\infty");
	defineMacro("\\Iota", "\\mathrm{I}");
	defineMacro("\\isin", "\\in");
	defineMacro("\\Kappa", "\\mathrm{K}");
	defineMacro("\\larr", "\\leftarrow");
	defineMacro("\\lArr", "\\Leftarrow");
	defineMacro("\\Larr", "\\Leftarrow");
	defineMacro("\\lrarr", "\\leftrightarrow");
	defineMacro("\\lrArr", "\\Leftrightarrow");
	defineMacro("\\Lrarr", "\\Leftrightarrow");
	defineMacro("\\Mu", "\\mathrm{M}");
	defineMacro("\\natnums", "\\mathbb{N}");
	defineMacro("\\Nu", "\\mathrm{N}");
	defineMacro("\\Omicron", "\\mathrm{O}");
	defineMacro("\\plusmn", "\\pm");
	defineMacro("\\rarr", "\\rightarrow");
	defineMacro("\\rArr", "\\Rightarrow");
	defineMacro("\\Rarr", "\\Rightarrow");
	defineMacro("\\real", "\\Re");
	defineMacro("\\reals", "\\mathbb{R}");
	defineMacro("\\Reals", "\\mathbb{R}");
	defineMacro("\\Rho", "\\mathrm{P}");
	defineMacro("\\sdot", "\\cdot");
	defineMacro("\\sect", "\\S");
	defineMacro("\\spades", "\\spadesuit");
	defineMacro("\\sub", "\\subset");
	defineMacro("\\sube", "\\subseteq");
	defineMacro("\\supe", "\\supseteq");
	defineMacro("\\Tau", "\\mathrm{T}");
	defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

	defineMacro("\\weierp", "\\wp");
	defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
	// statmath.sty
	// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

	defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
	defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
	defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
	// braket.sty
	// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

	defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
	defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
	defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
	defineMacro("\\Bra", "\\left\\langle#1\\right|");
	defineMacro("\\Ket", "\\left|#1\\right\\rangle"); //////////////////////////////////////////////////////////////////////
	// actuarialangle.dtx

	defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

	defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
	defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
	defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
	defineMacro("\\red", "\\textcolor{##df0030}{#1}");
	defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
	defineMacro("\\gray", "\\textcolor{gray}{#1}");
	defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
	defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
	defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
	defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
	defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
	defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
	defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
	defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
	defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
	defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
	defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
	defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
	defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
	defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
	defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
	defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
	defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
	defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
	defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
	defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
	defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
	defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
	defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
	defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
	defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
	defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
	defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
	defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
	defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
	defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
	defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
	defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
	defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
	defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
	defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
	defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
	defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
	defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
	defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
	defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
	defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
	defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
	defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
	defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
	defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
	defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
	defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
	defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
	defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
	defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only
	// "operatorname", but also  "supsub" since \operatorname* can
	// affect super/subscripting.
	var htmlBuilder$9 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "operatorname");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "operatorname");
	  }

	  var base;

	  if (group.body.length > 0) {
	    var body = group.body.map(child => {
	      // $FlowFixMe: Check if the node has a string `text` property.
	      var childText = child.text;

	      if (typeof childText === "string") {
	        return {
	          type: "textord",
	          mode: child.mode,
	          text: childText
	        };
	      } else {
	        return child;
	      }
	    }); // Consolidate function names into symbol characters.

	    var expression = buildExpression(body, options.withFont("mathrm"), true);

	    for (var i = 0; i < expression.length; i++) {
	      var child = expression[i];

	      if (child instanceof SymbolNode) {
	        // Per amsopn package,
	        // change minus to hyphen and \ast to asterisk
	        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	      }
	    }

	    base = buildCommon.makeSpan(["mop"], expression, options);
	  } else {
	    base = buildCommon.makeSpan(["mop"], [], options);
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
	  } else {
	    return base;
	  }
	};

	var mathmlBuilder$9 = (group, options) => {
	  // The steps taken here are similar to the html version.
	  var expression = buildExpression$1(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

	  var isAllString = true; // default

	  for (var i = 0; i < expression.length; i++) {
	    var node = expression[i];

	    if (node instanceof mathMLTree.SpaceNode) ; else if (node instanceof mathMLTree.MathNode) {
	      switch (node.type) {
	        case "mi":
	        case "mn":
	        case "ms":
	        case "mspace":
	        case "mtext":
	          break;
	        // Do nothing yet.

	        case "mo":
	          {
	            var child = node.children[0];

	            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
	              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	            } else {
	              isAllString = false;
	            }

	            break;
	          }

	        default:
	          isAllString = false;
	      }
	    } else {
	      isAllString = false;
	    }
	  }

	  if (isAllString) {
	    // Write a single TextNode instead of multiple nested tags.
	    var word = expression.map(node => node.toText()).join("");
	    expression = [new mathMLTree.TextNode(word)];
	  }

	  var identifier = new mathMLTree.MathNode("mi", expression);
	  identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
	  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

	  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

	  if (group.parentIsSupSub) {
	    return new mathMLTree.MathNode("mrow", [identifier, operator]);
	  } else {
	    return mathMLTree.newDocumentFragment([identifier, operator]);
	  }
	}; // \operatorname
	// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


	defineFunction({
	  type: "operatorname",
	  names: ["\\operatorname@", "\\operatornamewithlimits"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "operatorname",
	      mode: parser.mode,
	      body: ordargument(body),
	      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
	      limits: false,
	      parentIsSupSub: false
	    };
	  },
	  htmlBuilder: htmlBuilder$9,
	  mathmlBuilder: mathmlBuilder$9
	});
	defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");

	defineFunctionBuilders({
	  type: "ordgroup",

	  htmlBuilder(group, options) {
	    if (group.semisimple) {
	      return buildCommon.makeFragment(buildExpression(group.body, options, false));
	    }

	    return buildCommon.makeSpan(["mord"], buildExpression(group.body, options, true), options);
	  },

	  mathmlBuilder(group, options) {
	    return buildExpressionRow(group.body, options, true);
	  }

	});

	defineFunction({
	  type: "overline",
	  names: ["\\overline"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "overline",
	      mode: parser.mode,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Overlines are handled in the TeXbook pg 443, Rule 9.
	    // Build the inner group in the cramped style.
	    var innerGroup = buildGroup(group.body, options.havingCrampedStyle()); // Create the line above the body

	    var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: innerGroup
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: defaultRuleThickness
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("mover", [buildGroup$1(group.body, options), operator]);
	    node.setAttribute("accent", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "phantom",
	  names: ["\\phantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "phantom",
	      mode: parser.mode,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
	    // See "color" for more details.

	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression$1(group.body, options);
	    return new mathMLTree.MathNode("mphantom", inner);
	  }
	});
	defineFunction({
	  type: "hphantom",
	  names: ["\\hphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "hphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup(group.body, options.withPhantom())]);
	    node.height = 0;
	    node.depth = 0;

	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        node.children[i].height = 0;
	        node.children[i].depth = 0;
	      }
	    } // See smash for comment re: use of makeVList


	    node = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression$1(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("height", "0px");
	    node.setAttribute("depth", "0px");
	    return node;
	  }
	});
	defineFunction({
	  type: "vphantom",
	  names: ["\\vphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser
	    } = _ref3;
	    var body = args[0];
	    return {
	      type: "vphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options.withPhantom())]);
	    var fix = buildCommon.makeSpan(["fix"], []);
	    return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression$1(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "raisebox",
	  names: ["\\raisebox"],
	  props: {
	    numArgs: 2,
	    argTypes: ["size", "hbox"],
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var amount = assertNodeType(args[0], "size").value;
	    var body = args[1];
	    return {
	      type: "raisebox",
	      mode: parser.mode,
	      dy: amount,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup(group.body, options);
	    var dy = calculateSize(group.dy, options);
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: -dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, options)]);
	    var dy = group.dy.number + group.dy.unit;
	    node.setAttribute("voffset", dy);
	    return node;
	  }

	});

	defineFunction({
	  type: "rule",
	  names: ["\\rule"],
	  props: {
	    numArgs: 2,
	    numOptionalArgs: 1,
	    argTypes: ["size", "size", "size"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var shift = optArgs[0];
	    var width = assertNodeType(args[0], "size");
	    var height = assertNodeType(args[1], "size");
	    return {
	      type: "rule",
	      mode: parser.mode,
	      shift: shift && assertNodeType(shift, "size").value,
	      width: width.value,
	      height: height.value
	    };
	  },

	  htmlBuilder(group, options) {
	    // Make an empty span for the rule
	    var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

	    rule.style.borderRightWidth = width + "em";
	    rule.style.borderTopWidth = height + "em";
	    rule.style.bottom = shift + "em"; // Record the height and width

	    rule.width = width;
	    rule.height = height + shift;
	    rule.depth = -shift; // Font size is the number large enough that the browser will
	    // reserve at least `absHeight` space above the baseline.
	    // The 1.125 factor was empirically determined

	    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
	    return rule;
	  },

	  mathmlBuilder(group, options) {
	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0;
	    var color = options.color && options.getColor() || "black";
	    var rule = new mathMLTree.MathNode("mspace");
	    rule.setAttribute("mathbackground", color);
	    rule.setAttribute("width", width + "em");
	    rule.setAttribute("height", height + "em");
	    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

	    if (shift >= 0) {
	      wrapper.setAttribute("height", "+" + shift + "em");
	    } else {
	      wrapper.setAttribute("height", shift + "em");
	      wrapper.setAttribute("depth", "+" + -shift + "em");
	    }

	    wrapper.setAttribute("voffset", shift + "em");
	    return wrapper;
	  }

	});

	function sizingGroup(value, options, baseOptions) {
	  var inner = buildExpression(value, options, false);
	  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
	  // manually. Handle nested size changes.

	  for (var i = 0; i < inner.length; i++) {
	    var pos = inner[i].classes.indexOf("sizing");

	    if (pos < 0) {
	      Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
	    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
	      // This is a nested size change: e.g., inner[i] is the "b" in
	      // `\Huge a \small b`. Override the old size (the `reset-` class)
	      // but not the new size.
	      inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
	    }

	    inner[i].height *= multiplier;
	    inner[i].depth *= multiplier;
	  }

	  return buildCommon.makeFragment(inner);
	}
	var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
	var htmlBuilder$a = (group, options) => {
	  // Handle sizing operators like \Huge. Real TeX doesn't actually allow
	  // these functions inside of math expressions, so we do some special
	  // handling.
	  var newOptions = options.havingSize(group.size);
	  return sizingGroup(group.body, newOptions, options);
	};
	defineFunction({
	  type: "sizing",
	  names: sizeFuncs,
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    var body = parser.parseExpression(false, breakOnTokenText);
	    return {
	      type: "sizing",
	      mode: parser.mode,
	      // Figure out what size to use based on the list of functions above
	      size: sizeFuncs.indexOf(funcName) + 1,
	      body
	    };
	  },
	  htmlBuilder: htmlBuilder$a,
	  mathmlBuilder: (group, options) => {
	    var newOptions = options.havingSize(group.size);
	    var inner = buildExpression$1(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
	    // changes, because we don't keep state of what style we're currently
	    // in, so we can't reset the size to normal before changing it.  Now
	    // that we're passing an options parameter we should be able to fix
	    // this.

	    node.setAttribute("mathsize", newOptions.sizeMultiplier + "em");
	    return node;
	  }
	});

	// smash, with optional [tb], as in AMS
	defineFunction({
	  type: "smash",
	  names: ["\\smash"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var smashHeight = false;
	    var smashDepth = false;
	    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

	    if (tbArg) {
	      // Optional [tb] argument is engaged.
	      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
	      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
	      var letter = "";

	      for (var i = 0; i < tbArg.body.length; ++i) {
	        var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

	        letter = node.text;

	        if (letter === "t") {
	          smashHeight = true;
	        } else if (letter === "b") {
	          smashDepth = true;
	        } else {
	          smashHeight = false;
	          smashDepth = false;
	          break;
	        }
	      }
	    } else {
	      smashHeight = true;
	      smashDepth = true;
	    }

	    var body = args[0];
	    return {
	      type: "smash",
	      mode: parser.mode,
	      body,
	      smashHeight,
	      smashDepth
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup(group.body, options)]);

	    if (!group.smashHeight && !group.smashDepth) {
	      return node;
	    }

	    if (group.smashHeight) {
	      node.height = 0; // In order to influence makeVList, we have to reset the children.

	      if (node.children) {
	        for (var i = 0; i < node.children.length; i++) {
	          node.children[i].height = 0;
	        }
	      }
	    }

	    if (group.smashDepth) {
	      node.depth = 0;

	      if (node.children) {
	        for (var _i = 0; _i < node.children.length; _i++) {
	          node.children[_i].depth = 0;
	        }
	      }
	    } // At this point, we've reset the TeX-like height and depth values.
	    // But the span still has an HTML line height.
	    // makeVList applies "display: table-cell", which prevents the browser
	    // from acting on that line height. So we'll call makeVList now.


	    var smashedNode = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [smashedNode], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, options)]);

	    if (group.smashHeight) {
	      node.setAttribute("height", "0px");
	    }

	    if (group.smashDepth) {
	      node.setAttribute("depth", "0px");
	    }

	    return node;
	  }
	});

	defineFunction({
	  type: "sqrt",
	  names: ["\\sqrt"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var index = optArgs[0];
	    var body = args[0];
	    return {
	      type: "sqrt",
	      mode: parser.mode,
	      body,
	      index
	    };
	  },

	  htmlBuilder(group, options) {
	    // Square roots are handled in the TeXbook pg. 443, Rule 11.
	    // First, we do the same steps as in overline to build the inner group
	    // and line
	    var inner = buildGroup(group.body, options.havingCrampedStyle());

	    if (inner.height === 0) {
	      // Render a small surd.
	      inner.height = options.fontMetrics().xHeight;
	    } // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.


	    inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

	    var metrics = options.fontMetrics();
	    var theta = metrics.defaultRuleThickness;
	    var phi = theta;

	    if (options.style.id < Style$1.TEXT.id) {
	      phi = options.fontMetrics().xHeight;
	    } // Calculate the clearance between the body and line


	    var lineClearance = theta + phi / 4;
	    var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

	    var {
	      span: img,
	      ruleWidth,
	      advanceWidth
	    } = delimiter.sqrtImage(minDelimiterHeight, options);
	    var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

	    if (delimDepth > inner.height + inner.depth + lineClearance) {
	      lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
	    } // Shift the sqrt image


	    var imgShift = img.height - inner.height - lineClearance - ruleWidth;
	    inner.style.paddingLeft = advanceWidth + "em"; // Overlay the image and the argument.

	    var body = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: inner,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: -(inner.height + imgShift)
	      }, {
	        type: "elem",
	        elem: img
	      }, {
	        type: "kern",
	        size: ruleWidth
	      }]
	    }, options);

	    if (!group.index) {
	      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
	    } else {
	      // Handle the optional root index
	      // The index is always in scriptscript style
	      var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
	      var rootm = buildGroup(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
	      // source, in the definition of `\r@@t`.

	      var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

	      var rootVList = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -toShift,
	        children: [{
	          type: "elem",
	          elem: rootm
	        }]
	      }, options); // Add a class surrounding it so we can add on the appropriate
	      // kerning

	      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
	      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
	    }
	  },

	  mathmlBuilder(group, options) {
	    var {
	      body,
	      index
	    } = group;
	    return index ? new mathMLTree.MathNode("mroot", [buildGroup$1(body, options), buildGroup$1(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup$1(body, options)]);
	  }

	});

	var styleMap$1 = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	defineFunction({
	  type: "styling",
	  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    // parse out the implicit body
	    var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
	    // here and in buildHTML and de-dupe the enumeration of all the styles).
	    // $FlowFixMe: The names above exactly match the styles.

	    var style = funcName.slice(1, funcName.length - 5);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      // Figure out what style to use by pulling out the style from
	      // the function name
	      style,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Style changes are handled in the TeXbook on pg. 442, Rule 3.
	    var newStyle = styleMap$1[group.style];
	    var newOptions = options.havingStyle(newStyle).withFont('');
	    return sizingGroup(group.body, newOptions, options);
	  },

	  mathmlBuilder(group, options) {
	    // Figure out what style we're changing to.
	    var newStyle = styleMap$1[group.style];
	    var newOptions = options.havingStyle(newStyle);
	    var inner = buildExpression$1(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner);
	    var styleAttributes = {
	      "display": ["0", "true"],
	      "text": ["0", "false"],
	      "script": ["1", "false"],
	      "scriptscript": ["2", "false"]
	    };
	    var attr = styleAttributes[group.style];
	    node.setAttribute("scriptlevel", attr[0]);
	    node.setAttribute("displaystyle", attr[1]);
	    return node;
	  }

	});

	/**
	 * Sometimes, groups perform special rules when they have superscripts or
	 * subscripts attached to them. This function lets the `supsub` group know that
	 * Sometimes, groups perform special rules when they have superscripts or
	 * its inner element should handle the superscripts and subscripts instead of
	 * handling them itself.
	 */
	var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
	  var base = group.base;

	  if (!base) {
	    return null;
	  } else if (base.type === "op") {
	    // Operators handle supsubs differently when they have limits
	    // (e.g. `\displaystyle\sum_2^3`)
	    var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
	    return delegate ? htmlBuilder$8 : null;
	  } else if (base.type === "operatorname") {
	    var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);

	    return _delegate ? htmlBuilder$9 : null;
	  } else if (base.type === "accent") {
	    return utils.isCharacterBox(base.base) ? htmlBuilder : null;
	  } else if (base.type === "horizBrace") {
	    var isSup = !group.sub;
	    return isSup === base.isOver ? htmlBuilder$7 : null;
	  } else {
	    return null;
	  }
	}; // Super scripts and subscripts, whose precise placement can depend on other
	// functions that precede them.


	defineFunctionBuilders({
	  type: "supsub",

	  htmlBuilder(group, options) {
	    // Superscript and subscripts are handled in the TeXbook on page
	    // 445-446, rules 18(a-f).
	    // Here is where we defer to the inner group if it should handle
	    // superscripts and subscripts itself.
	    var builderDelegate = htmlBuilderDelegate(group, options);

	    if (builderDelegate) {
	      return builderDelegate(group, options);
	    }

	    var {
	      base: valueBase,
	      sup: valueSup,
	      sub: valueSub
	    } = group;
	    var base = buildGroup(valueBase, options);
	    var supm;
	    var subm;
	    var metrics = options.fontMetrics(); // Rule 18a

	    var supShift = 0;
	    var subShift = 0;
	    var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

	    if (valueSup) {
	      var newOptions = options.havingStyle(options.style.sup());
	      supm = buildGroup(valueSup, newOptions, options);

	      if (!isCharacterBox) {
	        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    }

	    if (valueSub) {
	      var _newOptions = options.havingStyle(options.style.sub());

	      subm = buildGroup(valueSub, _newOptions, options);

	      if (!isCharacterBox) {
	        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    } // Rule 18c


	    var minSupShift;

	    if (options.style === Style$1.DISPLAY) {
	      minSupShift = metrics.sup1;
	    } else if (options.style.cramped) {
	      minSupShift = metrics.sup3;
	    } else {
	      minSupShift = metrics.sup2;
	    } // scriptspace is a font-size-independent size, so scale it
	    // appropriately for use as the marginRight.


	    var multiplier = options.sizeMultiplier;
	    var marginRight = 0.5 / metrics.ptPerEm / multiplier + "em";
	    var marginLeft = null;

	    if (subm) {
	      // Subscripts shouldn't be shifted by the base's italic correction.
	      // Account for that by shifting the subscript back the appropriate
	      // amount. Note we only do this when the base is a single symbol.
	      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

	      if (base instanceof SymbolNode || isOiint) {
	        // $FlowFixMe
	        marginLeft = -base.italic + "em";
	      }
	    }

	    var supsub;

	    if (supm && subm) {
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      subShift = Math.max(subShift, metrics.sub2);
	      var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

	      var maxWidth = 4 * ruleWidth;

	      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
	        subShift = maxWidth - (supShift - supm.depth) + subm.height;
	        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

	        if (psi > 0) {
	          supShift += psi;
	          subShift -= psi;
	        }
	      }

	      var vlistElem = [{
	        type: "elem",
	        elem: subm,
	        shift: subShift,
	        marginRight,
	        marginLeft
	      }, {
	        type: "elem",
	        elem: supm,
	        shift: -supShift,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: vlistElem
	      }, options);
	    } else if (subm) {
	      // Rule 18b
	      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
	      var _vlistElem = [{
	        type: "elem",
	        elem: subm,
	        marginLeft,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: subShift,
	        children: _vlistElem
	      }, options);
	    } else if (supm) {
	      // Rule 18c, d
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -supShift,
	        children: [{
	          type: "elem",
	          elem: supm,
	          marginRight
	        }]
	      }, options);
	    } else {
	      throw new Error("supsub must have either sup or sub.");
	    } // Wrap the supsub vlist in a span.msupsub to reset text-align.


	    var mclass = getTypeOfDomTree(base, "right") || "mord";
	    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
	  },

	  mathmlBuilder(group, options) {
	    // Is the inner group a relevant horizonal brace?
	    var isBrace = false;
	    var isOver;
	    var isSup;

	    if (group.base && group.base.type === "horizBrace") {
	      isSup = !!group.sup;

	      if (isSup === group.base.isOver) {
	        isBrace = true;
	        isOver = group.base.isOver;
	      }
	    }

	    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
	      group.base.parentIsSupSub = true;
	    }

	    var children = [buildGroup$1(group.base, options)];

	    if (group.sub) {
	      children.push(buildGroup$1(group.sub, options));
	    }

	    if (group.sup) {
	      children.push(buildGroup$1(group.sup, options));
	    }

	    var nodeType;

	    if (isBrace) {
	      nodeType = isOver ? "mover" : "munder";
	    } else if (!group.sub) {
	      var base = group.base;

	      if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
	        nodeType = "mover";
	      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "mover";
	      } else {
	        nodeType = "msup";
	      }
	    } else if (!group.sup) {
	      var _base = group.base;

	      if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
	        nodeType = "munder";
	      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "munder";
	      } else {
	        nodeType = "msub";
	      }
	    } else {
	      var _base2 = group.base;

	      if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
	        nodeType = "munderover";
	      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
	        nodeType = "munderover";
	      } else {
	        nodeType = "msubsup";
	      }
	    }

	    return new mathMLTree.MathNode(nodeType, children);
	  }

	});

	defineFunctionBuilders({
	  type: "atom",

	  htmlBuilder(group, options) {
	    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

	    if (group.family === "bin") {
	      var variant = getVariant(group, options);

	      if (variant === "bold-italic") {
	        node.setAttribute("mathvariant", variant);
	      }
	    } else if (group.family === "punct") {
	      node.setAttribute("separator", "true");
	    } else if (group.family === "open" || group.family === "close") {
	      // Delims built here should not stretch vertically.
	      // See delimsizing.js for stretchy delims.
	      node.setAttribute("stretchy", "false");
	    }

	    return node;
	  }

	});

	// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
	// src/symbols.js.
	var defaultVariant = {
	  "mi": "italic",
	  "mn": "normal",
	  "mtext": "normal"
	};
	defineFunctionBuilders({
	  type: "mathord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "mathord");
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
	    var variant = getVariant(group, options) || "italic";

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});
	defineFunctionBuilders({
	  type: "textord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "textord");
	  },

	  mathmlBuilder(group, options) {
	    var text = makeText(group.text, group.mode, options);
	    var variant = getVariant(group, options) || "normal";
	    var node;

	    if (group.mode === 'text') {
	      node = new mathMLTree.MathNode("mtext", [text]);
	    } else if (/[0-9]/.test(group.text)) {
	      node = new mathMLTree.MathNode("mn", [text]);
	    } else if (group.text === "\\prime") {
	      node = new mathMLTree.MathNode("mo", [text]);
	    } else {
	      node = new mathMLTree.MathNode("mi", [text]);
	    }

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});

	var cssSpace = {
	  "\\nobreak": "nobreak",
	  "\\allowbreak": "allowbreak"
	}; // A lookup table to determine whether a spacing function/symbol should be
	// treated like a regular space character.  If a symbol or command is a key
	// in this table, then it should be a regular space character.  Furthermore,
	// the associated value may have a `className` specifying an extra CSS class
	// to add to the created `span`.

	var regularSpace = {
	  " ": {},
	  "\\ ": {},
	  "~": {
	    className: "nobreak"
	  },
	  "\\space": {},
	  "\\nobreakspace": {
	    className: "nobreak"
	  }
	}; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
	// src/symbols.js.

	defineFunctionBuilders({
	  type: "spacing",

	  htmlBuilder(group, options) {
	    if (regularSpace.hasOwnProperty(group.text)) {
	      var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
	      // things has an entry in the symbols table, so these will be turned
	      // into appropriate outputs.

	      if (group.mode === "text") {
	        var ord = buildCommon.makeOrd(group, options, "textord");
	        ord.classes.push(className);
	        return ord;
	      } else {
	        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
	      }
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // Spaces based on just a CSS class.
	      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }
	  },

	  mathmlBuilder(group, options) {
	    var node;

	    if (regularSpace.hasOwnProperty(group.text)) {
	      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
	      return new mathMLTree.MathNode("mspace");
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }

	    return node;
	  }

	});

	var pad = () => {
	  var padNode = new mathMLTree.MathNode("mtd", []);
	  padNode.setAttribute("width", "50%");
	  return padNode;
	};

	defineFunctionBuilders({
	  type: "tag",

	  mathmlBuilder(group, options) {
	    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
	    table.setAttribute("width", "100%");
	    return table; // TODO: Left-aligned tags.
	    // Currently, the group and options passed here do not contain
	    // enough info to set tag alignment. `leqno` is in Settings but it is
	    // not passed to Options. On the HTML side, leqno is
	    // set by a CSS class applied in buildTree.js. That would have worked
	    // in MathML if browsers supported <mlabeledtr>. Since they don't, we
	    // need to rewrite the way this function is called.
	  }

	});

	var textFontFamilies = {
	  "\\text": undefined,
	  "\\textrm": "textrm",
	  "\\textsf": "textsf",
	  "\\texttt": "texttt",
	  "\\textnormal": "textrm"
	};
	var textFontWeights = {
	  "\\textbf": "textbf",
	  "\\textmd": "textmd"
	};
	var textFontShapes = {
	  "\\textit": "textit",
	  "\\textup": "textup"
	};

	var optionsWithFont = (group, options) => {
	  var font = group.font; // Checks if the argument is a font family or a font style.

	  if (!font) {
	    return options;
	  } else if (textFontFamilies[font]) {
	    return options.withTextFontFamily(textFontFamilies[font]);
	  } else if (textFontWeights[font]) {
	    return options.withTextFontWeight(textFontWeights[font]);
	  } else {
	    return options.withTextFontShape(textFontShapes[font]);
	  }
	};

	defineFunction({
	  type: "text",
	  names: [// Font families
	  "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
	  "\\textbf", "\\textmd", // Font Shapes
	  "\\textit", "\\textup"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInArgument: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "text",
	      mode: parser.mode,
	      body: ordargument(body),
	      font: funcName
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    var inner = buildExpression(group.body, newOptions, true);
	    return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    return buildExpressionRow(group.body, newOptions);
	  }

	});

	defineFunction({
	  type: "underline",
	  names: ["\\underline"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "underline",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Underlines are handled in the TeXbook pg 443, Rule 10.
	    // Build the inner group.
	    var innerGroup = buildGroup(group.body, options); // Create the line to go below the body

	    var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "kern",
	        size: defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("munder", [buildGroup$1(group.body, options), operator]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "vcenter",
	  names: ["\\vcenter"],
	  props: {
	    numArgs: 1,
	    argTypes: ["original"],
	    // In LaTeX, \vcenter can act only on a box.
	    allowedInText: false
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "vcenter",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup(group.body, options);
	    var axisHeight = options.fontMetrics().axisHeight;
	    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    // There is no way to do this in MathML.
	    // Write a class as a breadcrumb in case some post-processor wants
	    // to perform a vcenter adjustment.
	    return new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, options)], ["vcenter"]);
	  }

	});

	defineFunction({
	  type: "verb",
	  names: ["\\verb"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(context, args, optArgs) {
	    // \verb and \verb* are dealt with directly in Parser.js.
	    // If we end up here, it's because of a failure to match the two delimiters
	    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
	    // terminated by end of line (or file).
	    throw new ParseError("\\verb ended by end of line instead of matching delimiter");
	  },

	  htmlBuilder(group, options) {
	    var text = makeVerb(group);
	    var body = []; // \verb enters text mode and therefore is sized like \textstyle

	    var newOptions = options.havingStyle(options.style.text());

	    for (var i = 0; i < text.length; i++) {
	      var c = text[i];

	      if (c === '~') {
	        c = '\\textasciitilde';
	      }

	      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
	    }

	    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var text = new mathMLTree.TextNode(makeVerb(group));
	    var node = new mathMLTree.MathNode("mtext", [text]);
	    node.setAttribute("mathvariant", "monospace");
	    return node;
	  }

	});
	/**
	 * Converts verb group into body string.
	 *
	 * \verb* replaces each space with an open box \u2423
	 * \verb replaces each space with a no-break space \xA0
	 */

	var makeVerb = group => group.body.replace(/ /g, group.star ? '\u2423' : '\xA0');

	/** Include this to ensure that all functions are defined. */
	var functions = _functions;

	/**
	 * The Lexer class handles tokenizing the input in various ways. Since our
	 * parser expects us to be able to backtrack, the lexer allows lexing from any
	 * given starting point.
	 *
	 * Its main exposed function is the `lex` function, which takes a position to
	 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
	 * function.
	 *
	 * The various `_innerLex` functions perform the actual lexing of different
	 * kinds.
	 */

	/* The following tokenRegex
	 * - matches typical whitespace (but not NBSP etc.) using its first group
	 * - does not match any control character \x00-\x1f except whitespace
	 * - does not match a bare backslash
	 * - matches any ASCII character except those just mentioned
	 * - does not match the BMP private use area \uE000-\uF8FF
	 * - does not match bare surrogate code units
	 * - matches any BMP character except for those just described
	 * - matches any valid Unicode surrogate pair
	 * - matches a backslash followed by one or more whitespace characters
	 * - matches a backslash followed by one or more letters then whitespace
	 * - matches a backslash followed by any BMP character
	 * Capturing groups:
	 *   [1] regular whitespace
	 *   [2] backslash followed by whitespace
	 *   [3] anything else, which may include:
	 *     [4] left character of \verb*
	 *     [5] left character of \verb
	 *     [6] backslash followed by word, excluding any trailing whitespace
	 * Just because the Lexer matches something doesn't mean it's valid input:
	 * If there is no matching function or symbol definition, the Parser will
	 * still reject the input.
	 */
	var spaceRegexString = "[ \r\n\t]";
	var controlWordRegexString = "\\\\[a-zA-Z@]+";
	var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
	var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
	var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
	var combiningDiacriticalMarkString = "[\u0300-\u036f]";
	var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
	var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
	controlSpaceRegexString + "|") + // \whitespace
	"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|\\\\verb\\*([^]).*?\\4" + // \verb*
	"|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
	"|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
	"|" + controlSymbolRegexString + ")"); // \\, \', etc.

	/** Main Lexer class */

	class Lexer {
	  // Category codes. The lexer only supports comment characters (14) for now.
	  // MacroExpander additionally distinguishes active (13).
	  constructor(input, settings) {
	    this.input = void 0;
	    this.settings = void 0;
	    this.tokenRegex = void 0;
	    this.catcodes = void 0;
	    // Separate accents from characters
	    this.input = input;
	    this.settings = settings;
	    this.tokenRegex = new RegExp(tokenRegexString, 'g');
	    this.catcodes = {
	      "%": 14,
	      // comment character
	      "~": 13 // active character

	    };
	  }

	  setCatcode(char, code) {
	    this.catcodes[char] = code;
	  }
	  /**
	   * This function lexes a single token.
	   */


	  lex() {
	    var input = this.input;
	    var pos = this.tokenRegex.lastIndex;

	    if (pos === input.length) {
	      return new Token("EOF", new SourceLocation(this, pos, pos));
	    }

	    var match = this.tokenRegex.exec(input);

	    if (match === null || match.index !== pos) {
	      throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
	    }

	    var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

	    if (this.catcodes[text] === 14) {
	      // comment character
	      var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

	      if (nlIndex === -1) {
	        this.tokenRegex.lastIndex = input.length; // EOF

	        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
	      } else {
	        this.tokenRegex.lastIndex = nlIndex + 1;
	      }

	      return this.lex();
	    }

	    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
	  }

	}

	/**
	 * A `Namespace` refers to a space of nameable things like macros or lengths,
	 * which can be `set` either globally or local to a nested group, using an
	 * undo stack similar to how TeX implements this functionality.
	 * Performance-wise, `get` and local `set` take constant time, while global
	 * `set` takes time proportional to the depth of group nesting.
	 */
	class Namespace {
	  /**
	   * Both arguments are optional.  The first argument is an object of
	   * built-in mappings which never change.  The second argument is an object
	   * of initial (global-level) mappings, which will constantly change
	   * according to any global/top-level `set`s done.
	   */
	  constructor(builtins, globalMacros) {
	    if (builtins === void 0) {
	      builtins = {};
	    }

	    if (globalMacros === void 0) {
	      globalMacros = {};
	    }

	    this.current = void 0;
	    this.builtins = void 0;
	    this.undefStack = void 0;
	    this.current = globalMacros;
	    this.builtins = builtins;
	    this.undefStack = [];
	  }
	  /**
	   * Start a new nested group, affecting future local `set`s.
	   */


	  beginGroup() {
	    this.undefStack.push({});
	  }
	  /**
	   * End current nested group, restoring values before the group began.
	   */


	  endGroup() {
	    if (this.undefStack.length === 0) {
	      throw new ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
	    }

	    var undefs = this.undefStack.pop();

	    for (var undef in undefs) {
	      if (undefs.hasOwnProperty(undef)) {
	        if (undefs[undef] === undefined) {
	          delete this.current[undef];
	        } else {
	          this.current[undef] = undefs[undef];
	        }
	      }
	    }
	  }
	  /**
	   * Detect whether `name` has a definition.  Equivalent to
	   * `get(name) != null`.
	   */


	  has(name) {
	    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
	  }
	  /**
	   * Get the current value of a name, or `undefined` if there is no value.
	   *
	   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
	   * is defined, as the definition may be the empty string which evaluates
	   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
	   * `if (namespace.has(...))`.
	   */


	  get(name) {
	    if (this.current.hasOwnProperty(name)) {
	      return this.current[name];
	    } else {
	      return this.builtins[name];
	    }
	  }
	  /**
	   * Set the current value of a name, and optionally set it globally too.
	   * Local set() sets the current value and (when appropriate) adds an undo
	   * operation to the undo stack.  Global set() may change the undo
	   * operation at every level, so takes time linear in their number.
	   */


	  set(name, value, global) {
	    if (global === void 0) {
	      global = false;
	    }

	    if (global) {
	      // Global set is equivalent to setting in all groups.  Simulate this
	      // by destroying any undos currently scheduled for this name,
	      // and adding an undo with the *new* value (in case it later gets
	      // locally reset within this environment).
	      for (var i = 0; i < this.undefStack.length; i++) {
	        delete this.undefStack[i][name];
	      }

	      if (this.undefStack.length > 0) {
	        this.undefStack[this.undefStack.length - 1][name] = value;
	      }
	    } else {
	      // Undo this set at end of this group (possibly to `undefined`),
	      // unless an undo is already in place, in which case that older
	      // value is the correct one.
	      var top = this.undefStack[this.undefStack.length - 1];

	      if (top && !top.hasOwnProperty(name)) {
	        top[name] = this.current[name];
	      }
	    }

	    this.current[name] = value;
	  }

	}

	/**
	 * This file contains the “gullet” where macros are expanded
	 * until only non-macro tokens remain.
	 */
	// List of commands that act like macros but aren't defined as a macro,
	// function, or symbol.  Used in `isDefined`.
	var implicitCommands = {
	  "\\relax": true,
	  // MacroExpander.js
	  "^": true,
	  // Parser.js
	  "_": true,
	  // Parser.js
	  "\\limits": true,
	  // Parser.js
	  "\\nolimits": true // Parser.js

	};
	class MacroExpander {
	  constructor(input, settings, mode) {
	    this.settings = void 0;
	    this.expansionCount = void 0;
	    this.lexer = void 0;
	    this.macros = void 0;
	    this.stack = void 0;
	    this.mode = void 0;
	    this.settings = settings;
	    this.expansionCount = 0;
	    this.feed(input); // Make new global namespace

	    this.macros = new Namespace(builtinMacros, settings.macros);
	    this.mode = mode;
	    this.stack = []; // contains tokens in REVERSE order
	  }
	  /**
	   * Feed a new input string to the same MacroExpander
	   * (with existing macros etc.).
	   */


	  feed(input) {
	    this.lexer = new Lexer(input, this.settings);
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	  }
	  /**
	   * Start a new group nesting within all namespaces.
	   */


	  beginGroup() {
	    this.macros.beginGroup();
	  }
	  /**
	   * End current group nesting within all namespaces.
	   */


	  endGroup() {
	    this.macros.endGroup();
	  }
	  /**
	   * Returns the topmost token on the stack, without expanding it.
	   * Similar in behavior to TeX's `\futurelet`.
	   */


	  future() {
	    if (this.stack.length === 0) {
	      this.pushToken(this.lexer.lex());
	    }

	    return this.stack[this.stack.length - 1];
	  }
	  /**
	   * Remove and return the next unexpanded token.
	   */


	  popToken() {
	    this.future(); // ensure non-empty stack

	    return this.stack.pop();
	  }
	  /**
	   * Add a given token to the token stack.  In particular, this get be used
	   * to put back a token returned from one of the other methods.
	   */


	  pushToken(token) {
	    this.stack.push(token);
	  }
	  /**
	   * Append an array of tokens to the token stack.
	   */


	  pushTokens(tokens) {
	    this.stack.push(...tokens);
	  }
	  /**
	   * Find an macro argument without expanding tokens and append the array of
	   * tokens to the token stack. Uses Token as a container for the result.
	   */


	  scanArgument(isOptional) {
	    var start;
	    var end;
	    var tokens;

	    if (isOptional) {
	      this.consumeSpaces(); // \@ifnextchar gobbles any space following it

	      if (this.future().text !== "[") {
	        return null;
	      }

	      start = this.popToken(); // don't include [ in tokens

	      ({
	        tokens,
	        end
	      } = this.consumeArg(["]"]));
	    } else {
	      ({
	        tokens,
	        start,
	        end
	      } = this.consumeArg());
	    } // indicate the end of an argument


	    this.pushToken(new Token("EOF", end.loc));
	    this.pushTokens(tokens);
	    return start.range(end, "");
	  }
	  /**
	   * Consume all following space tokens, without expansion.
	   */


	  consumeSpaces() {
	    for (;;) {
	      var token = this.future();

	      if (token.text === " ") {
	        this.stack.pop();
	      } else {
	        break;
	      }
	    }
	  }
	  /**
	   * Consume an argument from the token stream, and return the resulting array
	   * of tokens and start/end token.
	   */


	  consumeArg(delims) {
	    // The argument for a delimited parameter is the shortest (possibly
	    // empty) sequence of tokens with properly nested {...} groups that is
	    // followed ... by this particular list of non-parameter tokens.
	    // The argument for an undelimited parameter is the next nonblank
	    // token, unless that token is ‘{’, when the argument will be the
	    // entire {...} group that follows.
	    var tokens = [];
	    var isDelimited = delims && delims.length > 0;

	    if (!isDelimited) {
	      // Ignore spaces between arguments.  As the TeXbook says:
	      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
	      //  put spaces between the arguments (e.g., ‘\row x n’), because
	      //  TeX doesn’t use single spaces as undelimited arguments."
	      this.consumeSpaces();
	    }

	    var start = this.future();
	    var tok;
	    var depth = 0;
	    var match = 0;

	    do {
	      tok = this.popToken();
	      tokens.push(tok);

	      if (tok.text === "{") {
	        ++depth;
	      } else if (tok.text === "}") {
	        --depth;

	        if (depth === -1) {
	          throw new ParseError("Extra }", tok);
	        }
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
	      }

	      if (delims && isDelimited) {
	        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
	          ++match;

	          if (match === delims.length) {
	            // don't include delims in tokens
	            tokens.splice(-match, match);
	            break;
	          }
	        } else {
	          match = 0;
	        }
	      }
	    } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
	    // ... the outermost braces enclosing the argument are removed


	    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
	      tokens.pop();
	      tokens.shift();
	    }

	    tokens.reverse(); // to fit in with stack order

	    return {
	      tokens,
	      start,
	      end: tok
	    };
	  }
	  /**
	   * Consume the specified number of (delimited) arguments from the token
	   * stream and return the resulting array of arguments.
	   */


	  consumeArgs(numArgs, delimiters) {
	    if (delimiters) {
	      if (delimiters.length !== numArgs + 1) {
	        throw new ParseError("The length of delimiters doesn't match the number of args!");
	      }

	      var delims = delimiters[0];

	      for (var i = 0; i < delims.length; i++) {
	        var tok = this.popToken();

	        if (delims[i] !== tok.text) {
	          throw new ParseError("Use of the macro doesn't match its definition", tok);
	        }
	      }
	    }

	    var args = [];

	    for (var _i = 0; _i < numArgs; _i++) {
	      args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
	    }

	    return args;
	  }
	  /**
	   * Expand the next token only once if possible.
	   *
	   * If the token is expanded, the resulting tokens will be pushed onto
	   * the stack in reverse order and will be returned as an array,
	   * also in reverse order.
	   *
	   * If not, the next token will be returned without removing it
	   * from the stack.  This case can be detected by a `Token` return value
	   * instead of an `Array` return value.
	   *
	   * In either case, the next token will be on the top of the stack,
	   * or the stack will be empty.
	   *
	   * Used to implement `expandAfterFuture` and `expandNextToken`.
	   *
	   * If expandableOnly, only expandable tokens are expanded and
	   * an undefined control sequence results in an error.
	   */


	  expandOnce(expandableOnly) {
	    var topToken = this.popToken();
	    var name = topToken.text;
	    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

	    if (expansion == null || expandableOnly && expansion.unexpandable) {
	      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
	        throw new ParseError("Undefined control sequence: " + name);
	      }

	      this.pushToken(topToken);
	      return topToken;
	    }

	    this.expansionCount++;

	    if (this.expansionCount > this.settings.maxExpand) {
	      throw new ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
	    }

	    var tokens = expansion.tokens;
	    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

	    if (expansion.numArgs) {
	      // paste arguments in place of the placeholders
	      tokens = tokens.slice(); // make a shallow copy

	      for (var i = tokens.length - 1; i >= 0; --i) {
	        var tok = tokens[i];

	        if (tok.text === "#") {
	          if (i === 0) {
	            throw new ParseError("Incomplete placeholder at end of macro body", tok);
	          }

	          tok = tokens[--i]; // next token on stack

	          if (tok.text === "#") {
	            // ## → #
	            tokens.splice(i + 1, 1); // drop first #
	          } else if (/^[1-9]$/.test(tok.text)) {
	            // replace the placeholder with the indicated argument
	            tokens.splice(i, 2, ...args[+tok.text - 1]);
	          } else {
	            throw new ParseError("Not a valid argument number", tok);
	          }
	        }
	      }
	    } // Concatenate expansion onto top of stack.


	    this.pushTokens(tokens);
	    return tokens;
	  }
	  /**
	   * Expand the next token only once (if possible), and return the resulting
	   * top token on the stack (without removing anything from the stack).
	   * Similar in behavior to TeX's `\expandafter\futurelet`.
	   * Equivalent to expandOnce() followed by future().
	   */


	  expandAfterFuture() {
	    this.expandOnce();
	    return this.future();
	  }
	  /**
	   * Recursively expand first token, then return first non-expandable token.
	   */


	  expandNextToken() {
	    for (;;) {
	      var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        // \relax stops the expansion, but shouldn't get returned (a
	        // null return value couldn't get implemented as a function).
	        // the token after \noexpand is interpreted as if its meaning
	        // were ‘\relax’
	        if (expanded.text === "\\relax" || expanded.treatAsRelax) {
	          this.stack.pop();
	        } else {
	          return this.stack.pop(); // === expanded
	        }
	      }
	    } // Flow unable to figure out that this pathway is impossible.
	    // https://github.com/facebook/flow/issues/4808


	    throw new Error(); // eslint-disable-line no-unreachable
	  }
	  /**
	   * Fully expand the given macro name and return the resulting list of
	   * tokens, or return `undefined` if no such macro is defined.
	   */


	  expandMacro(name) {
	    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
	  }
	  /**
	   * Fully expand the given token stream and return the resulting list of tokens
	   */


	  expandTokens(tokens) {
	    var output = [];
	    var oldStackLength = this.stack.length;
	    this.pushTokens(tokens);

	    while (this.stack.length > oldStackLength) {
	      var expanded = this.expandOnce(true); // expand only expandable tokens
	      // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        if (expanded.treatAsRelax) {
	          // the expansion of \noexpand is the token itself
	          expanded.noexpand = false;
	          expanded.treatAsRelax = false;
	        }

	        output.push(this.stack.pop());
	      }
	    }

	    return output;
	  }
	  /**
	   * Fully expand the given macro name and return the result as a string,
	   * or return `undefined` if no such macro is defined.
	   */


	  expandMacroAsText(name) {
	    var tokens = this.expandMacro(name);

	    if (tokens) {
	      return tokens.map(token => token.text).join("");
	    } else {
	      return tokens;
	    }
	  }
	  /**
	   * Returns the expanded macro as a reversed array of tokens and a macro
	   * argument count.  Or returns `null` if no such macro.
	   */


	  _getExpansion(name) {
	    var definition = this.macros.get(name);

	    if (definition == null) {
	      // mainly checking for undefined here
	      return definition;
	    } // If a single character has an associated catcode other than 13
	    // (active character), then don't expand it.


	    if (name.length === 1) {
	      var catcode = this.lexer.catcodes[name];

	      if (catcode != null && catcode !== 13) {
	        return;
	      }
	    }

	    var expansion = typeof definition === "function" ? definition(this) : definition;

	    if (typeof expansion === "string") {
	      var numArgs = 0;

	      if (expansion.indexOf("#") !== -1) {
	        var stripped = expansion.replace(/##/g, "");

	        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
	          ++numArgs;
	        }
	      }

	      var bodyLexer = new Lexer(expansion, this.settings);
	      var tokens = [];
	      var tok = bodyLexer.lex();

	      while (tok.text !== "EOF") {
	        tokens.push(tok);
	        tok = bodyLexer.lex();
	      }

	      tokens.reverse(); // to fit in with stack using push and pop

	      var expanded = {
	        tokens,
	        numArgs
	      };
	      return expanded;
	    }

	    return expansion;
	  }
	  /**
	   * Determine whether a command is currently "defined" (has some
	   * functionality), meaning that it's a macro (in the current group),
	   * a function, a symbol, or one of the special commands listed in
	   * `implicitCommands`.
	   */


	  isDefined(name) {
	    return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
	  }
	  /**
	   * Determine whether a command is expandable.
	   */


	  isExpandable(name) {
	    var macro = this.macros.get(name);
	    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
	  }

	}

	/* eslint no-constant-condition:0 */

	var unicodeAccents = {
	  "́": {
	    "text": "\\'",
	    "math": "\\acute"
	  },
	  "̀": {
	    "text": "\\`",
	    "math": "\\grave"
	  },
	  "̈": {
	    "text": "\\\"",
	    "math": "\\ddot"
	  },
	  "̃": {
	    "text": "\\~",
	    "math": "\\tilde"
	  },
	  "̄": {
	    "text": "\\=",
	    "math": "\\bar"
	  },
	  "̆": {
	    "text": "\\u",
	    "math": "\\breve"
	  },
	  "̌": {
	    "text": "\\v",
	    "math": "\\check"
	  },
	  "̂": {
	    "text": "\\^",
	    "math": "\\hat"
	  },
	  "̇": {
	    "text": "\\.",
	    "math": "\\dot"
	  },
	  "̊": {
	    "text": "\\r",
	    "math": "\\mathring"
	  },
	  "̋": {
	    "text": "\\H"
	  }
	};
	var unicodeSymbols = {
	  "á": "á",
	  "à": "à",
	  "ä": "ä",
	  "ǟ": "ǟ",
	  "ã": "ã",
	  "ā": "ā",
	  "ă": "ă",
	  "ắ": "ắ",
	  "ằ": "ằ",
	  "ẵ": "ẵ",
	  "ǎ": "ǎ",
	  "â": "â",
	  "ấ": "ấ",
	  "ầ": "ầ",
	  "ẫ": "ẫ",
	  "ȧ": "ȧ",
	  "ǡ": "ǡ",
	  "å": "å",
	  "ǻ": "ǻ",
	  "ḃ": "ḃ",
	  "ć": "ć",
	  "č": "č",
	  "ĉ": "ĉ",
	  "ċ": "ċ",
	  "ď": "ď",
	  "ḋ": "ḋ",
	  "é": "é",
	  "è": "è",
	  "ë": "ë",
	  "ẽ": "ẽ",
	  "ē": "ē",
	  "ḗ": "ḗ",
	  "ḕ": "ḕ",
	  "ĕ": "ĕ",
	  "ě": "ě",
	  "ê": "ê",
	  "ế": "ế",
	  "ề": "ề",
	  "ễ": "ễ",
	  "ė": "ė",
	  "ḟ": "ḟ",
	  "ǵ": "ǵ",
	  "ḡ": "ḡ",
	  "ğ": "ğ",
	  "ǧ": "ǧ",
	  "ĝ": "ĝ",
	  "ġ": "ġ",
	  "ḧ": "ḧ",
	  "ȟ": "ȟ",
	  "ĥ": "ĥ",
	  "ḣ": "ḣ",
	  "í": "í",
	  "ì": "ì",
	  "ï": "ï",
	  "ḯ": "ḯ",
	  "ĩ": "ĩ",
	  "ī": "ī",
	  "ĭ": "ĭ",
	  "ǐ": "ǐ",
	  "î": "î",
	  "ǰ": "ǰ",
	  "ĵ": "ĵ",
	  "ḱ": "ḱ",
	  "ǩ": "ǩ",
	  "ĺ": "ĺ",
	  "ľ": "ľ",
	  "ḿ": "ḿ",
	  "ṁ": "ṁ",
	  "ń": "ń",
	  "ǹ": "ǹ",
	  "ñ": "ñ",
	  "ň": "ň",
	  "ṅ": "ṅ",
	  "ó": "ó",
	  "ò": "ò",
	  "ö": "ö",
	  "ȫ": "ȫ",
	  "õ": "õ",
	  "ṍ": "ṍ",
	  "ṏ": "ṏ",
	  "ȭ": "ȭ",
	  "ō": "ō",
	  "ṓ": "ṓ",
	  "ṑ": "ṑ",
	  "ŏ": "ŏ",
	  "ǒ": "ǒ",
	  "ô": "ô",
	  "ố": "ố",
	  "ồ": "ồ",
	  "ỗ": "ỗ",
	  "ȯ": "ȯ",
	  "ȱ": "ȱ",
	  "ő": "ő",
	  "ṕ": "ṕ",
	  "ṗ": "ṗ",
	  "ŕ": "ŕ",
	  "ř": "ř",
	  "ṙ": "ṙ",
	  "ś": "ś",
	  "ṥ": "ṥ",
	  "š": "š",
	  "ṧ": "ṧ",
	  "ŝ": "ŝ",
	  "ṡ": "ṡ",
	  "ẗ": "ẗ",
	  "ť": "ť",
	  "ṫ": "ṫ",
	  "ú": "ú",
	  "ù": "ù",
	  "ü": "ü",
	  "ǘ": "ǘ",
	  "ǜ": "ǜ",
	  "ǖ": "ǖ",
	  "ǚ": "ǚ",
	  "ũ": "ũ",
	  "ṹ": "ṹ",
	  "ū": "ū",
	  "ṻ": "ṻ",
	  "ŭ": "ŭ",
	  "ǔ": "ǔ",
	  "û": "û",
	  "ů": "ů",
	  "ű": "ű",
	  "ṽ": "ṽ",
	  "ẃ": "ẃ",
	  "ẁ": "ẁ",
	  "ẅ": "ẅ",
	  "ŵ": "ŵ",
	  "ẇ": "ẇ",
	  "ẘ": "ẘ",
	  "ẍ": "ẍ",
	  "ẋ": "ẋ",
	  "ý": "ý",
	  "ỳ": "ỳ",
	  "ÿ": "ÿ",
	  "ỹ": "ỹ",
	  "ȳ": "ȳ",
	  "ŷ": "ŷ",
	  "ẏ": "ẏ",
	  "ẙ": "ẙ",
	  "ź": "ź",
	  "ž": "ž",
	  "ẑ": "ẑ",
	  "ż": "ż",
	  "Á": "Á",
	  "À": "À",
	  "Ä": "Ä",
	  "Ǟ": "Ǟ",
	  "Ã": "Ã",
	  "Ā": "Ā",
	  "Ă": "Ă",
	  "Ắ": "Ắ",
	  "Ằ": "Ằ",
	  "Ẵ": "Ẵ",
	  "Ǎ": "Ǎ",
	  "Â": "Â",
	  "Ấ": "Ấ",
	  "Ầ": "Ầ",
	  "Ẫ": "Ẫ",
	  "Ȧ": "Ȧ",
	  "Ǡ": "Ǡ",
	  "Å": "Å",
	  "Ǻ": "Ǻ",
	  "Ḃ": "Ḃ",
	  "Ć": "Ć",
	  "Č": "Č",
	  "Ĉ": "Ĉ",
	  "Ċ": "Ċ",
	  "Ď": "Ď",
	  "Ḋ": "Ḋ",
	  "É": "É",
	  "È": "È",
	  "Ë": "Ë",
	  "Ẽ": "Ẽ",
	  "Ē": "Ē",
	  "Ḗ": "Ḗ",
	  "Ḕ": "Ḕ",
	  "Ĕ": "Ĕ",
	  "Ě": "Ě",
	  "Ê": "Ê",
	  "Ế": "Ế",
	  "Ề": "Ề",
	  "Ễ": "Ễ",
	  "Ė": "Ė",
	  "Ḟ": "Ḟ",
	  "Ǵ": "Ǵ",
	  "Ḡ": "Ḡ",
	  "Ğ": "Ğ",
	  "Ǧ": "Ǧ",
	  "Ĝ": "Ĝ",
	  "Ġ": "Ġ",
	  "Ḧ": "Ḧ",
	  "Ȟ": "Ȟ",
	  "Ĥ": "Ĥ",
	  "Ḣ": "Ḣ",
	  "Í": "Í",
	  "Ì": "Ì",
	  "Ï": "Ï",
	  "Ḯ": "Ḯ",
	  "Ĩ": "Ĩ",
	  "Ī": "Ī",
	  "Ĭ": "Ĭ",
	  "Ǐ": "Ǐ",
	  "Î": "Î",
	  "İ": "İ",
	  "Ĵ": "Ĵ",
	  "Ḱ": "Ḱ",
	  "Ǩ": "Ǩ",
	  "Ĺ": "Ĺ",
	  "Ľ": "Ľ",
	  "Ḿ": "Ḿ",
	  "Ṁ": "Ṁ",
	  "Ń": "Ń",
	  "Ǹ": "Ǹ",
	  "Ñ": "Ñ",
	  "Ň": "Ň",
	  "Ṅ": "Ṅ",
	  "Ó": "Ó",
	  "Ò": "Ò",
	  "Ö": "Ö",
	  "Ȫ": "Ȫ",
	  "Õ": "Õ",
	  "Ṍ": "Ṍ",
	  "Ṏ": "Ṏ",
	  "Ȭ": "Ȭ",
	  "Ō": "Ō",
	  "Ṓ": "Ṓ",
	  "Ṑ": "Ṑ",
	  "Ŏ": "Ŏ",
	  "Ǒ": "Ǒ",
	  "Ô": "Ô",
	  "Ố": "Ố",
	  "Ồ": "Ồ",
	  "Ỗ": "Ỗ",
	  "Ȯ": "Ȯ",
	  "Ȱ": "Ȱ",
	  "Ő": "Ő",
	  "Ṕ": "Ṕ",
	  "Ṗ": "Ṗ",
	  "Ŕ": "Ŕ",
	  "Ř": "Ř",
	  "Ṙ": "Ṙ",
	  "Ś": "Ś",
	  "Ṥ": "Ṥ",
	  "Š": "Š",
	  "Ṧ": "Ṧ",
	  "Ŝ": "Ŝ",
	  "Ṡ": "Ṡ",
	  "Ť": "Ť",
	  "Ṫ": "Ṫ",
	  "Ú": "Ú",
	  "Ù": "Ù",
	  "Ü": "Ü",
	  "Ǘ": "Ǘ",
	  "Ǜ": "Ǜ",
	  "Ǖ": "Ǖ",
	  "Ǚ": "Ǚ",
	  "Ũ": "Ũ",
	  "Ṹ": "Ṹ",
	  "Ū": "Ū",
	  "Ṻ": "Ṻ",
	  "Ŭ": "Ŭ",
	  "Ǔ": "Ǔ",
	  "Û": "Û",
	  "Ů": "Ů",
	  "Ű": "Ű",
	  "Ṽ": "Ṽ",
	  "Ẃ": "Ẃ",
	  "Ẁ": "Ẁ",
	  "Ẅ": "Ẅ",
	  "Ŵ": "Ŵ",
	  "Ẇ": "Ẇ",
	  "Ẍ": "Ẍ",
	  "Ẋ": "Ẋ",
	  "Ý": "Ý",
	  "Ỳ": "Ỳ",
	  "Ÿ": "Ÿ",
	  "Ỹ": "Ỹ",
	  "Ȳ": "Ȳ",
	  "Ŷ": "Ŷ",
	  "Ẏ": "Ẏ",
	  "Ź": "Ź",
	  "Ž": "Ž",
	  "Ẑ": "Ẑ",
	  "Ż": "Ż",
	  "ά": "ά",
	  "ὰ": "ὰ",
	  "ᾱ": "ᾱ",
	  "ᾰ": "ᾰ",
	  "έ": "έ",
	  "ὲ": "ὲ",
	  "ή": "ή",
	  "ὴ": "ὴ",
	  "ί": "ί",
	  "ὶ": "ὶ",
	  "ϊ": "ϊ",
	  "ΐ": "ΐ",
	  "ῒ": "ῒ",
	  "ῑ": "ῑ",
	  "ῐ": "ῐ",
	  "ό": "ό",
	  "ὸ": "ὸ",
	  "ύ": "ύ",
	  "ὺ": "ὺ",
	  "ϋ": "ϋ",
	  "ΰ": "ΰ",
	  "ῢ": "ῢ",
	  "ῡ": "ῡ",
	  "ῠ": "ῠ",
	  "ώ": "ώ",
	  "ὼ": "ὼ",
	  "Ύ": "Ύ",
	  "Ὺ": "Ὺ",
	  "Ϋ": "Ϋ",
	  "Ῡ": "Ῡ",
	  "Ῠ": "Ῠ",
	  "Ώ": "Ώ",
	  "Ὼ": "Ὼ"
	};

	/**
	 * This file contains the parser used to parse out a TeX expression from the
	 * input. Since TeX isn't context-free, standard parsers don't work particularly
	 * well.
	 *
	 * The strategy of this parser is as such:
	 *
	 * The main functions (the `.parse...` ones) take a position in the current
	 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
	 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
	 * individual tokens are needed at a position, the lexer is called to pull out a
	 * token, which is then used.
	 *
	 * The parser has a property called "mode" indicating the mode that
	 * the parser is currently in. Currently it has to be one of "math" or
	 * "text", which denotes whether the current environment is a math-y
	 * one or a text-y one (e.g. inside \text). Currently, this serves to
	 * limit the functions which can be used in text mode.
	 *
	 * The main functions then return an object which contains the useful data that
	 * was parsed at its given point, and a new position at the end of the parsed
	 * data. The main functions can call each other and continue the parsing by
	 * using the returned position as a new starting point.
	 *
	 * There are also extra `.handle...` functions, which pull out some reused
	 * functionality into self-contained functions.
	 *
	 * The functions return ParseNodes.
	 */
	class Parser {
	  constructor(input, settings) {
	    this.mode = void 0;
	    this.gullet = void 0;
	    this.settings = void 0;
	    this.leftrightDepth = void 0;
	    this.nextToken = void 0;
	    // Start in math mode
	    this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
	    // new lexer (mouth) for this parser (stomach, in the language of TeX)

	    this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

	    this.settings = settings; // Count leftright depth (for \middle errors)

	    this.leftrightDepth = 0;
	  }
	  /**
	   * Checks a result to make sure it has the right type, and throws an
	   * appropriate error otherwise.
	   */


	  expect(text, consume) {
	    if (consume === void 0) {
	      consume = true;
	    }

	    if (this.fetch().text !== text) {
	      throw new ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
	    }

	    if (consume) {
	      this.consume();
	    }
	  }
	  /**
	   * Discards the current lookahead token, considering it consumed.
	   */


	  consume() {
	    this.nextToken = null;
	  }
	  /**
	   * Return the current lookahead token, or if there isn't one (at the
	   * beginning, or if the previous lookahead token was consume()d),
	   * fetch the next token as the new lookahead token and return it.
	   */


	  fetch() {
	    if (this.nextToken == null) {
	      this.nextToken = this.gullet.expandNextToken();
	    }

	    return this.nextToken;
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	    this.gullet.switchMode(newMode);
	  }
	  /**
	   * Main parsing function, which parses an entire input.
	   */


	  parse() {
	    if (!this.settings.globalGroup) {
	      // Create a group namespace for the math expression.
	      // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
	      this.gullet.beginGroup();
	    } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
	    // We do this within the group for the math expression, so it doesn't
	    // pollute settings.macros.


	    if (this.settings.colorIsTextColor) {
	      this.gullet.macros.set("\\color", "\\textcolor");
	    } // Try to parse the input


	    var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

	    this.expect("EOF"); // End the group namespace for the expression

	    if (!this.settings.globalGroup) {
	      this.gullet.endGroup();
	    }

	    return parse;
	  }

	  /**
	   * Parses an "expression", which is a list of atoms.
	   *
	   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
	   *                 happens when functions have higher precendence han infix
	   *                 nodes in implicit parses.
	   *
	   * `breakOnTokenText`: The text of the token that the expression should end
	   *                     with, or `null` if something else should end the
	   *                     expression.
	   */
	  parseExpression(breakOnInfix, breakOnTokenText) {
	    var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
	    // we reached the end, a }, or a \right)

	    while (true) {
	      // Ignore spaces in math mode
	      if (this.mode === "math") {
	        this.consumeSpaces();
	      }

	      var lex = this.fetch();

	      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
	        break;
	      }

	      if (breakOnTokenText && lex.text === breakOnTokenText) {
	        break;
	      }

	      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
	        break;
	      }

	      var atom = this.parseAtom(breakOnTokenText);

	      if (!atom) {
	        break;
	      } else if (atom.type === "internal") {
	        continue;
	      }

	      body.push(atom);
	    }

	    if (this.mode === "text") {
	      this.formLigatures(body);
	    }

	    return this.handleInfixNodes(body);
	  }
	  /**
	   * Rewrites infix operators such as \over with corresponding commands such
	   * as \frac.
	   *
	   * There can only be one infix operator per group.  If there's more than one
	   * then the expression is ambiguous.  This can be resolved by adding {}.
	   */


	  handleInfixNodes(body) {
	    var overIndex = -1;
	    var funcName;

	    for (var i = 0; i < body.length; i++) {
	      if (body[i].type === "infix") {
	        if (overIndex !== -1) {
	          throw new ParseError("only one infix operator per group", body[i].token);
	        }

	        overIndex = i;
	        funcName = body[i].replaceWith;
	      }
	    }

	    if (overIndex !== -1 && funcName) {
	      var numerNode;
	      var denomNode;
	      var numerBody = body.slice(0, overIndex);
	      var denomBody = body.slice(overIndex + 1);

	      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
	        numerNode = numerBody[0];
	      } else {
	        numerNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: numerBody
	        };
	      }

	      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
	        denomNode = denomBody[0];
	      } else {
	        denomNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: denomBody
	        };
	      }

	      var node;

	      if (funcName === "\\\\abovefrac") {
	        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
	      } else {
	        node = this.callFunction(funcName, [numerNode, denomNode], []);
	      }

	      return [node];
	    } else {
	      return body;
	    }
	  }
	  /**
	   * Handle a subscript or superscript with nice errors.
	   */


	  handleSupSubscript(name) {
	    var symbolToken = this.fetch();
	    var symbol = symbolToken.text;
	    this.consume();
	    this.consumeSpaces(); // ignore spaces before sup/subscript argument

	    var group = this.parseGroup(name);

	    if (!group) {
	      throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
	    }

	    return group;
	  }
	  /**
	   * Converts the textual input of an unsupported command into a text node
	   * contained within a color node whose color is determined by errorColor
	   */


	  formatUnsupportedCmd(text) {
	    var textordArray = [];

	    for (var i = 0; i < text.length; i++) {
	      textordArray.push({
	        type: "textord",
	        mode: "text",
	        text: text[i]
	      });
	    }

	    var textNode = {
	      type: "text",
	      mode: this.mode,
	      body: textordArray
	    };
	    var colorNode = {
	      type: "color",
	      mode: this.mode,
	      color: this.settings.errorColor,
	      body: [textNode]
	    };
	    return colorNode;
	  }
	  /**
	   * Parses a group with optional super/subscripts.
	   */


	  parseAtom(breakOnTokenText) {
	    // The body of an atom is an implicit group, so that things like
	    // \left(x\right)^2 work correctly.
	    var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

	    if (this.mode === "text") {
	      return base;
	    } // Note that base may be empty (i.e. null) at this point.


	    var superscript;
	    var subscript;

	    while (true) {
	      // Guaranteed in math mode, so eat any spaces first.
	      this.consumeSpaces(); // Lex the first token

	      var lex = this.fetch();

	      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
	        // We got a limit control
	        if (base && base.type === "op") {
	          var limits = lex.text === "\\limits";
	          base.limits = limits;
	          base.alwaysHandleSupSub = true;
	        } else if (base && base.type === "operatorname") {
	          if (base.alwaysHandleSupSub) {
	            base.limits = lex.text === "\\limits";
	          }
	        } else {
	          throw new ParseError("Limit controls must follow a math operator", lex);
	        }

	        this.consume();
	      } else if (lex.text === "^") {
	        // We got a superscript start
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        superscript = this.handleSupSubscript("superscript");
	      } else if (lex.text === "_") {
	        // We got a subscript start
	        if (subscript) {
	          throw new ParseError("Double subscript", lex);
	        }

	        subscript = this.handleSupSubscript("subscript");
	      } else if (lex.text === "'") {
	        // We got a prime
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        var prime = {
	          type: "textord",
	          mode: this.mode,
	          text: "\\prime"
	        }; // Many primes can be grouped together, so we handle this here

	        var primes = [prime];
	        this.consume(); // Keep lexing tokens until we get something that's not a prime

	        while (this.fetch().text === "'") {
	          // For each one, add another prime to the list
	          primes.push(prime);
	          this.consume();
	        } // If there's a superscript following the primes, combine that
	        // superscript in with the primes.


	        if (this.fetch().text === "^") {
	          primes.push(this.handleSupSubscript("superscript"));
	        } // Put everything into an ordgroup as the superscript


	        superscript = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: primes
	        };
	      } else {
	        // If it wasn't ^, _, or ', stop parsing super/subscripts
	        break;
	      }
	    } // Base must be set if superscript or subscript are set per logic above,
	    // but need to check here for type check to pass.


	    if (superscript || subscript) {
	      // If we got either a superscript or subscript, create a supsub
	      return {
	        type: "supsub",
	        mode: this.mode,
	        base: base,
	        sup: superscript,
	        sub: subscript
	      };
	    } else {
	      // Otherwise return the original body
	      return base;
	    }
	  }
	  /**
	   * Parses an entire function, including its base and all of its arguments.
	   */


	  parseFunction(breakOnTokenText, name) {
	    var token = this.fetch();
	    var func = token.text;
	    var funcData = functions[func];

	    if (!funcData) {
	      return null;
	    }

	    this.consume(); // consume command token

	    if (name && name !== "atom" && !funcData.allowedInArgument) {
	      throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
	    } else if (this.mode === "text" && !funcData.allowedInText) {
	      throw new ParseError("Can't use function '" + func + "' in text mode", token);
	    } else if (this.mode === "math" && funcData.allowedInMath === false) {
	      throw new ParseError("Can't use function '" + func + "' in math mode", token);
	    }

	    var {
	      args,
	      optArgs
	    } = this.parseArguments(func, funcData);
	    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
	  }
	  /**
	   * Call a function handler with a suitable context and arguments.
	   */


	  callFunction(name, args, optArgs, token, breakOnTokenText) {
	    var context = {
	      funcName: name,
	      parser: this,
	      token,
	      breakOnTokenText
	    };
	    var func = functions[name];

	    if (func && func.handler) {
	      return func.handler(context, args, optArgs);
	    } else {
	      throw new ParseError("No function handler for " + name);
	    }
	  }
	  /**
	   * Parses the arguments of a function or environment
	   */


	  parseArguments(func, // Should look like "\name" or "\begin{name}".
	  funcData) {
	    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

	    if (totalArgs === 0) {
	      return {
	        args: [],
	        optArgs: []
	      };
	    }

	    var args = [];
	    var optArgs = [];

	    for (var i = 0; i < totalArgs; i++) {
	      var argType = funcData.argTypes && funcData.argTypes[i];
	      var isOptional = i < funcData.numOptionalArgs;

	      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
	      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
	        argType = "primitive";
	      }

	      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

	      if (isOptional) {
	        optArgs.push(arg);
	      } else if (arg != null) {
	        args.push(arg);
	      } else {
	        // should be unreachable
	        throw new ParseError("Null argument, please report this as a bug");
	      }
	    }

	    return {
	      args,
	      optArgs
	    };
	  }
	  /**
	   * Parses a group when the mode is changing.
	   */


	  parseGroupOfType(name, type, optional) {
	    switch (type) {
	      case "color":
	        return this.parseColorGroup(optional);

	      case "size":
	        return this.parseSizeGroup(optional);

	      case "url":
	        return this.parseUrlGroup(optional);

	      case "math":
	      case "text":
	        return this.parseArgumentGroup(optional, type);

	      case "hbox":
	        {
	          // hbox argument type wraps the argument in the equivalent of
	          // \hbox, which is like \text but switching to \textstyle size.
	          var group = this.parseArgumentGroup(optional, "text");
	          return group != null ? {
	            type: "styling",
	            mode: group.mode,
	            body: [group],
	            style: "text" // simulate \textstyle

	          } : null;
	        }

	      case "raw":
	        {
	          var token = this.parseStringGroup("raw", optional);
	          return token != null ? {
	            type: "raw",
	            mode: "text",
	            string: token.text
	          } : null;
	        }

	      case "primitive":
	        {
	          if (optional) {
	            throw new ParseError("A primitive argument cannot be optional");
	          }

	          var _group = this.parseGroup(name);

	          if (_group == null) {
	            throw new ParseError("Expected group as " + name, this.fetch());
	          }

	          return _group;
	        }

	      case "original":
	      case null:
	      case undefined:
	        return this.parseArgumentGroup(optional);

	      default:
	        throw new ParseError("Unknown group type as " + name, this.fetch());
	    }
	  }
	  /**
	   * Discard any space tokens, fetching the next non-space token.
	   */


	  consumeSpaces() {
	    while (this.fetch().text === " ") {
	      this.consume();
	    }
	  }
	  /**
	   * Parses a group, essentially returning the string formed by the
	   * brace-enclosed tokens plus some position information.
	   */


	  parseStringGroup(modeName, // Used to describe the mode in error messages.
	  optional) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF") {
	      str += nextToken.text;
	      this.consume();
	    }

	    this.consume(); // consume the end of the argument

	    argToken.text = str;
	    return argToken;
	  }
	  /**
	   * Parses a regex-delimited group: the largest sequence of tokens
	   * whose concatenated strings match `regex`. Returns the string
	   * formed by the tokens plus some position information.
	   */


	  parseRegexGroup(regex, modeName) {
	    var firstToken = this.fetch();
	    var lastToken = firstToken;
	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
	      lastToken = nextToken;
	      str += lastToken.text;
	      this.consume();
	    }

	    if (str === "") {
	      throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
	    }

	    return firstToken.range(lastToken, str);
	  }
	  /**
	   * Parses a color description.
	   */


	  parseColorGroup(optional) {
	    var res = this.parseStringGroup("color", optional);

	    if (res == null) {
	      return null;
	    }

	    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid color: '" + res.text + "'", res);
	    }

	    var color = match[0];

	    if (/^[0-9a-f]{6}$/i.test(color)) {
	      // We allow a 6-digit HTML color spec without a leading "#".
	      // This follows the xcolor package's HTML color model.
	      // Predefined color names are all missed by this RegEx pattern.
	      color = "#" + color;
	    }

	    return {
	      type: "color-token",
	      mode: this.mode,
	      color
	    };
	  }
	  /**
	   * Parses a size specification, consisting of magnitude and unit.
	   */


	  parseSizeGroup(optional) {
	    var res;
	    var isBlank = false; // don't expand before parseStringGroup

	    this.gullet.consumeSpaces();

	    if (!optional && this.gullet.future().text !== "{") {
	      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
	    } else {
	      res = this.parseStringGroup("size", optional);
	    }

	    if (!res) {
	      return null;
	    }

	    if (!optional && res.text.length === 0) {
	      // Because we've tested for what is !optional, this block won't
	      // affect \kern, \hspace, etc. It will capture the mandatory arguments
	      // to \genfrac and \above.
	      res.text = "0pt"; // Enable \above{}

	      isBlank = true; // This is here specifically for \genfrac
	    }

	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + res.text + "'", res);
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "'", res);
	    }

	    return {
	      type: "size",
	      mode: this.mode,
	      value: data,
	      isBlank
	    };
	  }
	  /**
	   * Parses an URL, checking escaped letters and allowed protocols,
	   * and setting the catcode of % as an active character (as in \hyperref).
	   */


	  parseUrlGroup(optional) {
	    this.gullet.lexer.setCatcode("%", 13); // active character

	    this.gullet.lexer.setCatcode("~", 12); // other character

	    var res = this.parseStringGroup("url", optional);
	    this.gullet.lexer.setCatcode("%", 14); // comment character

	    this.gullet.lexer.setCatcode("~", 13); // active character

	    if (res == null) {
	      return null;
	    } // hyperref package allows backslashes alone in href, but doesn't
	    // generate valid links in such cases; we interpret this as
	    // "undefined" behaviour, and keep them as-is. Some browser will
	    // replace backslashes with forward slashes.


	    var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
	    return {
	      type: "url",
	      mode: this.mode,
	      url
	    };
	  }
	  /**
	   * Parses an argument with the mode specified.
	   */


	  parseArgumentGroup(optional, mode) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var outerMode = this.mode;

	    if (mode) {
	      // Switch to specified mode
	      this.switchMode(mode);
	    }

	    this.gullet.beginGroup();
	    var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

	    this.expect("EOF"); // expect the end of the argument

	    this.gullet.endGroup();
	    var result = {
	      type: "ordgroup",
	      mode: this.mode,
	      loc: argToken.loc,
	      body: expression
	    };

	    if (mode) {
	      // Switch mode back
	      this.switchMode(outerMode);
	    }

	    return result;
	  }
	  /**
	   * Parses an ordinary group, which is either a single nucleus (like "x")
	   * or an expression in braces (like "{x+y}") or an implicit group, a group
	   * that starts at the current position, and ends right before a higher explicit
	   * group ends, or at EOF.
	   */


	  parseGroup(name, // For error reporting.
	  breakOnTokenText) {
	    var firstToken = this.fetch();
	    var text = firstToken.text;
	    var result; // Try to parse an open brace or \begingroup

	    if (text === "{" || text === "\\begingroup") {
	      this.consume();
	      var groupEnd = text === "{" ? "}" : "\\endgroup";
	      this.gullet.beginGroup(); // If we get a brace, parse an expression

	      var expression = this.parseExpression(false, groupEnd);
	      var lastToken = this.fetch();
	      this.expect(groupEnd); // Check that we got a matching closing brace

	      this.gullet.endGroup();
	      result = {
	        type: "ordgroup",
	        mode: this.mode,
	        loc: SourceLocation.range(firstToken, lastToken),
	        body: expression,
	        // A group formed by \begingroup...\endgroup is a semi-simple group
	        // which doesn't affect spacing in math mode, i.e., is transparent.
	        // https://tex.stackexchange.com/questions/1930/when-should-one-
	        // use-begingroup-instead-of-bgroup
	        semisimple: text === "\\begingroup" || undefined
	      };
	    } else {
	      // If there exists a function with this name, parse the function.
	      // Otherwise, just return a nucleus
	      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

	      if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
	        if (this.settings.throwOnError) {
	          throw new ParseError("Undefined control sequence: " + text, firstToken);
	        }

	        result = this.formatUnsupportedCmd(text);
	        this.consume();
	      }
	    }

	    return result;
	  }
	  /**
	   * Form ligature-like combinations of characters for text mode.
	   * This includes inputs like "--", "---", "``" and "''".
	   * The result will simply replace multiple textord nodes with a single
	   * character in each value by a single textord node having multiple
	   * characters in its value.  The representation is still ASCII source.
	   * The group will be modified in place.
	   */


	  formLigatures(group) {
	    var n = group.length - 1;

	    for (var i = 0; i < n; ++i) {
	      var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

	      var v = a.text;

	      if (v === "-" && group[i + 1].text === "-") {
	        if (i + 1 < n && group[i + 2].text === "-") {
	          group.splice(i, 3, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 2]),
	            text: "---"
	          });
	          n -= 2;
	        } else {
	          group.splice(i, 2, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 1]),
	            text: "--"
	          });
	          n -= 1;
	        }
	      }

	      if ((v === "'" || v === "`") && group[i + 1].text === v) {
	        group.splice(i, 2, {
	          type: "textord",
	          mode: "text",
	          loc: SourceLocation.range(a, group[i + 1]),
	          text: v + v
	        });
	        n -= 1;
	      }
	    }
	  }
	  /**
	   * Parse a single symbol out of the string. Here, we handle single character
	   * symbols and special functions like \verb.
	   */


	  parseSymbol() {
	    var nucleus = this.fetch();
	    var text = nucleus.text;

	    if (/^\\verb[^a-zA-Z]/.test(text)) {
	      this.consume();
	      var arg = text.slice(5);
	      var star = arg.charAt(0) === "*";

	      if (star) {
	        arg = arg.slice(1);
	      } // Lexer's tokenRegex is constructed to always have matching
	      // first/last characters.


	      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
	        throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
	      }

	      arg = arg.slice(1, -1); // remove first and last char

	      return {
	        type: "verb",
	        mode: "text",
	        body: arg,
	        star
	      };
	    } // At this point, we should have a symbol, possibly with accents.
	    // First expand any accented base symbol according to unicodeSymbols.


	    if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {
	      // This behavior is not strict (XeTeX-compatible) in math mode.
	      if (this.settings.strict && this.mode === "math") {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      text = unicodeSymbols[text[0]] + text.substr(1);
	    } // Strip off any combining characters


	    var match = combiningDiacriticalMarksEndRegex.exec(text);

	    if (match) {
	      text = text.substring(0, match.index);

	      if (text === 'i') {
	        text = '\u0131'; // dotless i, in math and text mode
	      } else if (text === 'j') {
	        text = '\u0237'; // dotless j, in math and text mode
	      }
	    } // Recognize base symbol


	    var symbol;

	    if (symbols[this.mode][text]) {
	      if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      var group = symbols[this.mode][text].group;
	      var loc = SourceLocation.range(nucleus);
	      var s;

	      if (ATOMS.hasOwnProperty(group)) {
	        // $FlowFixMe
	        var family = group;
	        s = {
	          type: "atom",
	          mode: this.mode,
	          family,
	          loc,
	          text
	        };
	      } else {
	        // $FlowFixMe
	        s = {
	          type: group,
	          mode: this.mode,
	          loc,
	          text
	        };
	      } // $FlowFixMe


	      symbol = s;
	    } else if (text.charCodeAt(0) >= 0x80) {
	      // no symbol for e.g. ^
	      if (this.settings.strict) {
	        if (!supportedCodepoint(text.charCodeAt(0))) {
	          this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
	        } else if (this.mode === "math") {
	          this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
	        }
	      } // All nonmathematical Unicode characters are rendered as if they
	      // are in text mode (wrapped in \text) because that's what it
	      // takes to render them in LaTeX.  Setting `mode: this.mode` is
	      // another natural choice (the user requested math mode), but
	      // this makes it more difficult for getCharacterMetrics() to
	      // distinguish Unicode characters without metrics and those for
	      // which we want to simulate the letter M.


	      symbol = {
	        type: "textord",
	        mode: "text",
	        loc: SourceLocation.range(nucleus),
	        text
	      };
	    } else {
	      return null; // EOF, ^, _, {, }, etc.
	    }

	    this.consume(); // Transform combining characters into accents

	    if (match) {
	      for (var i = 0; i < match[0].length; i++) {
	        var accent = match[0][i];

	        if (!unicodeAccents[accent]) {
	          throw new ParseError("Unknown accent ' " + accent + "'", nucleus);
	        }

	        var command = unicodeAccents[accent][this.mode];

	        if (!command) {
	          throw new ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
	        }

	        symbol = {
	          type: "accent",
	          mode: this.mode,
	          loc: SourceLocation.range(nucleus),
	          label: command,
	          isStretchy: false,
	          isShifty: true,
	          // $FlowFixMe
	          base: symbol
	        };
	      }
	    } // $FlowFixMe


	    return symbol;
	  }

	}
	Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

	/**
	 * Provides a single function for parsing an expression using a Parser
	 * TODO(emily): Remove this
	 */

	/**
	 * Parses an expression using a Parser, then returns the parsed result.
	 */
	var parseTree = function parseTree(toParse, settings) {
	  if (!(typeof toParse === 'string' || toParse instanceof String)) {
	    throw new TypeError('KaTeX can only parse string typed expression');
	  }

	  var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

	  delete parser.gullet.macros.current["\\df@tag"];
	  var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

	  delete parser.gullet.macros.current["\\current@color"];
	  delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
	  // In this case, we separately parse the tag and wrap the tree.

	  if (parser.gullet.macros.get("\\df@tag")) {
	    if (!settings.displayMode) {
	      throw new ParseError("\\tag works only in display equations");
	    }

	    parser.gullet.feed("\\df@tag");
	    tree = [{
	      type: "tag",
	      mode: "text",
	      body: tree,
	      tag: parser.parse()
	    }];
	  }

	  return tree;
	};

	/* eslint no-console:0 */

	/**
	 * Parse and build an expression, and place that expression in the DOM node
	 * given.
	 */
	var render = function render(expression, baseNode, options) {
	  baseNode.textContent = "";
	  var node = renderToDomTree(expression, options).toNode();
	  baseNode.appendChild(node);
	}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
	// disable rendering.


	if (typeof document !== "undefined") {
	  if (document.compatMode !== "CSS1Compat") {
	    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

	    render = function render() {
	      throw new ParseError("KaTeX doesn't work in quirks mode.");
	    };
	  }
	}
	/**
	 * Parse and build an expression, and return the markup for that.
	 */


	var renderToString = function renderToString(expression, options) {
	  var markup = renderToDomTree(expression, options).toMarkup();
	  return markup;
	};
	/**
	 * Parse an expression and return the parse tree.
	 */


	var generateParseTree = function generateParseTree(expression, options) {
	  var settings = new Settings(options);
	  return parseTree(expression, settings);
	};
	/**
	 * If the given error is a KaTeX ParseError and options.throwOnError is false,
	 * renders the invalid LaTeX as a span with hover title giving the KaTeX
	 * error message.  Otherwise, simply throws the error.
	 */


	var renderError = function renderError(error, expression, options) {
	  if (options.throwOnError || !(error instanceof ParseError)) {
	    throw error;
	  }

	  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
	  node.setAttribute("title", error.toString());
	  node.setAttribute("style", "color:" + options.errorColor);
	  return node;
	};
	/**
	 * Generates and returns the katex build tree. This is used for advanced
	 * use cases (like rendering to custom output).
	 */


	var renderToDomTree = function renderToDomTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};
	/**
	 * Generates and returns the katex build tree, with just HTML (no MathML).
	 * This is used for advanced use cases (like rendering to custom output).
	 */


	var renderToHTMLTree = function renderToHTMLTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildHTMLTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};

	var katex = {
	  /**
	   * Current KaTeX version
	   */
	  version: "0.13.13",

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination, and adds
	   * it as a child to the specified DOM node.
	   */
	  render,

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination string,
	   * for sending to the client.
	   */
	  renderToString,

	  /**
	   * KaTeX error, usually during parsing.
	   */
	  ParseError,

	  /**
	   * Parses the given LaTeX into KaTeX's internal parse tree structure,
	   * without rendering to HTML or MathML.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __parse: generateParseTree,

	  /**
	   * Renders the given LaTeX into an HTML+MathML internal DOM tree
	   * representation, without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToDomTree: renderToDomTree,

	  /**
	   * Renders the given LaTeX into an HTML internal DOM tree representation,
	   * without MathML and without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToHTMLTree: renderToHTMLTree,

	  /**
	   * extends internal font metrics object with a new object
	   * each key in the new object represents a font name
	  */
	  __setFontMetrics: setFontMetrics,

	  /**
	   * adds a new symbol to builtin symbols table
	   */
	  __defineSymbol: defineSymbol,

	  /**
	   * adds a new macro to builtin macro list
	   */
	  __defineMacro: defineMacro,

	  /**
	   * Expose the dom tree node types, which can be useful for type checking nodes.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __domTree: {
	    Span,
	    Anchor,
	    SymbolNode,
	    SvgNode,
	    PathNode,
	    LineNode
	  }
	};

	/**
	 * @constructor
	 * @param {!{patterns: !Object, leftmin: !number, rightmin: !number}} language The language pattern file. Compatible with Hyphenator.js.
	 */

	function Hypher(language) {
	    var exceptions = [],
	        i = 0;
	    /**
	     * @type {!Hypher.TrieNode}
	     */
	    this.trie = this.createTrie(language['patterns']);

	    /**
	     * @type {!number}
	     * @const
	     */
	    this.leftMin = language['leftmin'];

	    /**
	     * @type {!number}
	     * @const
	     */
	    this.rightMin = language['rightmin'];

	    /**
	     * @type {!Object.<string, !Array.<string>>}
	     */
	    this.exceptions = {};

	    if (language['exceptions']) {
	        exceptions = language['exceptions'].split(/,\s?/g);

	        for (; i < exceptions.length; i += 1) {
	            this.exceptions[exceptions[i].replace(/\u2027/g, '').toLowerCase()] = new RegExp('(' + exceptions[i].split('\u2027').join(')(') + ')', 'i');
	        }
	    }
	}

	/**
	 * @typedef {{_points: !Array.<number>}}
	 */
	Hypher.TrieNode;

	/**
	 * Creates a trie from a language pattern.
	 * @private
	 * @param {!Object} patternObject An object with language patterns.
	 * @return {!Hypher.TrieNode} An object trie.
	 */
	Hypher.prototype.createTrie = function (patternObject) {
	    var size = 0,
	        i = 0,
	        c = 0,
	        p = 0,
	        chars = null,
	        points = null,
	        codePoint = null,
	        t = null,
	        tree = {
	            _points: []
	        },
	        patterns;

	    for (size in patternObject) {
	        if (patternObject.hasOwnProperty(size)) {
	            patterns = patternObject[size].match(new RegExp('.{1,' + (+size) + '}', 'g'));

	            for (i = 0; i < patterns.length; i += 1) {
	                chars = patterns[i].replace(/[0-9]/g, '').split('');
	                points = patterns[i].split(/\D/);
	                t = tree;

	                for (c = 0; c < chars.length; c += 1) {
	                    codePoint = chars[c].charCodeAt(0);

	                    if (!t[codePoint]) {
	                        t[codePoint] = {};
	                    }
	                    t = t[codePoint];
	                }

	                t._points = [];

	                for (p = 0; p < points.length; p += 1) {
	                    t._points[p] = points[p] || 0;
	                }
	            }
	        }
	    }
	    return tree;
	};

	/**
	 * Hyphenates a text.
	 *
	 * @param {!string} str The text to hyphenate.
	 * @return {!string} The same text with soft hyphens inserted in the right positions.
	 */
	Hypher.prototype.hyphenateText = function (str, minLength) {
	    minLength = minLength || 4;

	    // Regexp("\b", "g") splits on word boundaries,
	    // compound separators and ZWNJ so we don't need
	    // any special cases for those characters. Unfortunately
	    // it does not support unicode word boundaries, so
	    // we implement it manually.
	    var words = str.split(/([a-zA-Z0-9_\u0027\u00AD\u00DF-\u00EA\u00EB\u00EC-\u00EF\u00F1-\u00F6\u00F8-\u00FD\u0101\u0103\u0105\u0107\u0109\u010D\u010F\u0111\u0113\u0117\u0119\u011B\u011D\u011F\u0123\u0125\u012B\u012F\u0131\u0135\u0137\u013C\u013E\u0142\u0144\u0146\u0148\u0151\u0153\u0155\u0159\u015B\u015D\u015F\u0161\u0165\u016B\u016D\u016F\u0171\u0173\u017A\u017C\u017E\u017F\u0219\u021B\u02BC\u0390\u03AC-\u03CE\u03F2\u0401\u0410-\u044F\u0451\u0454\u0456\u0457\u045E\u0491\u0531-\u0556\u0561-\u0587\u0902\u0903\u0905-\u090B\u090E-\u0910\u0912\u0914-\u0928\u092A-\u0939\u093E-\u0943\u0946-\u0948\u094A-\u094D\u0982\u0983\u0985-\u098B\u098F\u0990\u0994-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BE-\u09C3\u09C7\u09C8\u09CB-\u09CD\u09D7\u0A02\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A14-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A82\u0A83\u0A85-\u0A8B\u0A8F\u0A90\u0A94-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABE-\u0AC3\u0AC7\u0AC8\u0ACB-\u0ACD\u0B02\u0B03\u0B05-\u0B0B\u0B0F\u0B10\u0B14-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3E-\u0B43\u0B47\u0B48\u0B4B-\u0B4D\u0B57\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5\u0BB7-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C02\u0C03\u0C05-\u0C0B\u0C0E-\u0C10\u0C12\u0C14-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3E-\u0C43\u0C46-\u0C48\u0C4A-\u0C4D\u0C82\u0C83\u0C85-\u0C8B\u0C8E-\u0C90\u0C92\u0C94-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBE-\u0CC3\u0CC6-\u0CC8\u0CCA-\u0CCD\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D3E-\u0D43\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D60\u0D61\u0D7A-\u0D7F\u1F00-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB2-\u1FB4\u1FB6\u1FB7\u1FBD\u1FBF\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD2\u1FD3\u1FD6\u1FD7\u1FE2-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u200D\u2019]+)/gi);

	    for (var i = 0; i < words.length; i += 1) {
	        if (words[i].indexOf('/') !== -1) {
	            // Don't insert a zero width space if the slash is at the beginning or end
	            // of the text, or right after or before a space.
	            if (i !== 0 && i !== words.length - 1 && !(/\s+\/|\/\s+/.test(words[i]))) {
	                words[i] += '\u200B';
	            }
	        } else if (words[i].length > minLength) {
	            words[i] = this.hyphenate(words[i]).join('\u00AD');
	        }
	    }
	    return words.join('');
	};

	/**
	 * Hyphenates a word.
	 *
	 * @param {!string} word The word to hyphenate
	 * @return {!Array.<!string>} An array of word fragments indicating valid hyphenation points.
	 */
	Hypher.prototype.hyphenate = function (word) {
	    var characters,
	        characterPoints = [],
	        originalCharacters,
	        i,
	        j,
	        k,
	        node,
	        points = [],
	        wordLength,
	        lowerCaseWord = word.toLowerCase(),
	        nodePoints,
	        nodePointsLength,
	        m = Math.max,
	        trie = this.trie,
	        result = [''];

	    if (this.exceptions.hasOwnProperty(lowerCaseWord)) {
	        return word.match(this.exceptions[lowerCaseWord]).slice(1);
	    }

	    if (word.indexOf('\u00AD') !== -1) {
	        return [word];
	    }

	    word = '_' + word + '_';

	    characters = word.toLowerCase().split('');
	    originalCharacters = word.split('');
	    wordLength = characters.length;

	    for (i = 0; i < wordLength; i += 1) {
	        points[i] = 0;
	        characterPoints[i] = characters[i].charCodeAt(0);
	    }

	    for (i = 0; i < wordLength; i += 1) {
	        node = trie;
	        for (j = i; j < wordLength; j += 1) {
	            node = node[characterPoints[j]];

	            if (node) {
	                nodePoints = node._points;
	                if (nodePoints) {
	                    for (k = 0, nodePointsLength = nodePoints.length; k < nodePointsLength; k += 1) {
	                        points[i + k] = m(points[i + k], nodePoints[k]);
	                    }
	                }
	            } else {
	                break;
	            }
	        }
	    }

	    for (i = 1; i < wordLength - 1; i += 1) {
	        if (i > this.leftMin && i < (wordLength - this.rightMin) && points[i] % 2) {
	            result.push(originalCharacters[i]);
	        } else {
	            result[result.length - 1] += originalCharacters[i];
	        }
	    }

	    return result;
	};

	var hypher = Hypher;

	var Hypher$1 = /*@__PURE__*/getDefaultExportFromCjs(hypher);

	// The en-US hyphenation patterns are retrieved from
	// http://tug_org/svn/texhyphen/trunk/collaboration/repository/hyphenator/
	var enUs = {
		'id': ['en-us', 'en'],
		'leftmin': 2,
		'rightmin': 3,
		'patterns': {
			3 : "x1qei2e1je1f1to2tlou2w3c1tue1q4tvtw41tyo1q4tz4tcd2yd1wd1v1du1ta4eu1pas4y1droo2d1psw24sv1dod1m1fad1j1su4fdo2n4fh1fi4fm4fn1fopd42ft3fu1fy1ga2sss1ru5jd5cd1bg3bgd44uk2ok1cyo5jgl2g1m4pf4pg1gog3p1gr1soc1qgs2oi2g3w1gysk21coc5nh1bck1h1fh1h4hk1zo1ci4zms2hh1w2ch5zl2idc3c2us2igi3hi3j4ik1cab1vsa22btr1w4bp2io2ipu3u4irbk4b1j1va2ze2bf4oar1p4nz4zbi1u2iv4iy5ja1jeza1y1wk1bk3fkh4k1ikk4k1lk1mk5tk1w2ldr1mn1t2lfr1lr3j4ljl1l2lm2lp4ltn1rrh4v4yn1q1ly1maw1brg2r1fwi24ao2mhw4kr1cw5p4mkm1m1mo4wtwy4x1ar1ba2nn5mx1ex1h4mtx3i1muqu2p3wx3o4mwa1jx3p1naai2x1ua2fxx4y1ba2dn1jy1cn3fpr2y1dy1i",
			4 : "4dryn2itni4on1inn1im_up3nik4ni4dy5giye4tyes4_ye44ab_nhe4nha4abe2n2gyn1guy1ery5eep2pe4abry3lay3lone4wne4v1nesy3chn1erne2q3neo1nenp2seps4hy2cey5lu2nedne2cyme44nk2y5at2adine2b2ne_y5ac2p1tp2ten1den1cun1cryn5dp2th4adup4twpub3ae4rxu3ayn5gaff4pue4n2au4p1ppuf4n2atag1ipu4mag1na2gon4asx3tix1t2pu2na4gya3haa3heah4la3ho_ti2a5ian2an5puspu2tnak4_th2n1kl_te4_ta4mu4u4mupmun23mum2alex4ob_sy25ynxal1i_st4y1o4xi5cxi5a4alm_si2_sh2m5sixhu4m4sh4m3r4amam2py2rabm2pixhi2yo5dr2ai4m1pmo2vmos2x2edmo2r4n1la2mor2asx3c2xas5yom4x4apxam3nme44mokrbi2nne44andy4osp4ot3noemn4omn4a4m1n4nog4m1l2angws4l1posw3shwri4wra4yp3iwom11wo2m2izrb4ow4nopo4pr2cem2isrd2iano4mig4y3pomi3awiz55mi_no4n4m1fme4v2re_wir42mes1menme2mme2gre1o2med4me_4nop4m5c4m1bwil21noureu2whi4w3ev4maprev2w1era2plpo4crfu4r4fyy5pu2maha3pu2mab2a2rn1p4npi44lyb4lya2p3nwam42l1w1lut4luplu3or1glluf4lu5a2wacltu2y3rol1tr4vv4r3guyr4rl1te4rh_nru4ar1il2sel4sc4l1rl5prl4plys4c4lovri3ar4ib4lof3lo_ar2par3q_os3ll4oll2i4as_ri1o3vokl2levoi44p1mlka35vo_ns4cas4ll1izr4iqr2is3vivl1it3lika2tan2sen2slrle42l3hlgo3l5gal5frns3mvi4p3ley_od2r2meles24athr4myle2al3drv1inldi4l2de2vilnt2il3civik4lce42l1b4lavv3ifrno4r3nua1trr2ocnt4sy4sok4syks4la2tuk4sck3ouko5ryss4a2tyau4b4klyys1tnu1akis4au3rki4pro4ek4ima2va5ki_nu4dn4umn3uokes4k1erav1irok2ke4g1keek2ed_me2aw3ikal4aws4k5agk3ab3ka_aye4ays4veg3jo4p5ba_4vedjew3n1v24ve_ja4pzar23vatizi4n1w41batba4z2b1bb2beix4o4i5w4b1d4be_rox5nym4nyp4n3za4ittr3por1r4i1ti1bel2ith2itei2su4rs2r1sars4cr2seis1p3betvag4i2sor1shbe3wr1sioad34b3hbi2bbi4d3bie3isf4ise2is_1bilr1sp5va_r5sw_le2uz4eir1ibi2tuxu3r1tiu1v2i1raze4nze4pb2l2uu4mo1biip3iz1eripe4b4louts44b1m4b3no3br3bodi4osbo4eru3aio4mi1ol4io_3booo1ce4inyin1u2insru2n2inn4inl4inkrv4e2inioch42iner3vo4indpi2np4idbt4lb4tob3trry4cry3t2in_o4elbu4ni2muim1i5saiil3v4ilnil1iil5fs1apo3er4b5w5by_bys4_in1sau4i1lazet4u2suo3ev2z1ii2go4igius1p5saw4s5bo2fi4ifti3fl4if_i3etsch2usc22ie4i2dui4dri2diid5dpi3au3ruz4ils1cuz4is4s5d4se_se4a2ce_2ici4ich3ceii1bri5bo1ceni1blse2g5seiibe43cepi2aniam4ur2li2al2i1acet4hy2scew41phy4ch_5phuhu4thu4gche2h4tyh4shur1durc44hr44h5p5sev5sexu1ra4s3fup3p2s3gph3t2sh_ho4g2h1n_he23ciau3pl4h1mci5ch2lozo4m4ciihi2vhi4p2cim2cin4phsu1peu1ouo1geu5osheu4sho4he4th1es4shwun5zun5ysi1bunu45cizo4glck3ihep5he2nh4ed1sioph2l5hazsi2rcly4zte4_ge21siscoe22cog5siu1siv5siz_ga24skes1l2s2leha4m2s1ms3ma1ogyo1h2u1ni3gus3gun2guegu4acov1gth3_eu3g4ros1n4_es3u2nez4zyum2pu1mi3som_ev2oig4cri2gov15goos4opgon2ul5v5goeu3lugob53go_2c1t4ph_g1nog1nic2te4sov4ulsgn4ag4myc4twcud5c4ufc4uipe2t3glo1gleul2igla4_eg23giz3cun5givgi4u3gir5gio1cusul4e2spagil4g1ic5gi__eb4cze41d2a5da_u1laggo44daf2dagg2gege4v1geo1gen2ged3dato1la2ge_ol2dol2i5daypek4p4eed1d42de_4gazol2tuiv3ol2vo2lys1sa2gamgaf4o2meui4n2ui2pe2cd4em4fugi4jku3fl3ufaf2tyf4to1denu4du4pe_2f3sfri2de1ps1si4f5pfos5d3eqs4sls4snfo2rss2tdes25fon4p1b_ci23payss5w2st_de1tf4l2de1v2fin4dey4d1fd4gast2idg1id2gyd1h25di_ud5dfi3au4cy_ch4pav43didu3cud1iff2fyu3crd1inst4r4f1ffev4fer11dio2fedfe4bdir2s2ty4fe_dis1on1au3ca4f5bon1c2ondd5k25far4fagpa1peys45eyc1exps4ul2dlyp4ale3whon3s3do_e1wa5doee5vud4oge1visu2msu2nub4euav4su2rp4ai6rk_d4or3dosu1atdo4v3doxp4adoo4k4swoo2padre4eus4e3upe5un2ophet5z4syc3syl4y3hoy1ads4pd4swd4syd2tho4wo3ta_du2c4etn2tabta2luac4es4wdu4g2ess4uabdu4n4duptav4st5bow1io1pr5dyn2tawe1sp2t1bop1uead1tz4et4chopy5ea4l4t1d4te_2tyle1si4esh1tee4tyat1cr4twoteg4es2c4eru1teoer1s2eroea2tte4po1rat1wh3tusea2v3teu3texer1i2e1ber1h4tey2t1f4t1ge3br2th_th2e4thle1ce3tumec2i2ths2erb1tia4tueer1aou5vtud2tif22tige1potu1aou4lttu41timt5toos4le1cre2pat4swe5owe1cue4ottsh4eos4e1ort4sce3ol4edieo2ge5of1tio4eno4enn5tiq4edoti4u1tive3my1tiz4othee2ct5laee2ft5lo4t1mee2mtme4e1meem5bcoi4to3be5exo1ry2tof1effel2iel2ftos24t1pe1la1traos2ceig2ei5de5ico2soe1h45egyeg5n",
			5 : "_ach4e4go_e4goseg1ule5gurtre5feg4iceher4eg5ibeger44egaltre4mei5gle3imbe3infe1ingtra3beir4deit3eei3the5ity5triae4jud3efiteki4nek4la2trime4la_e4lactri4v4toute4law5toure3leaefil45elece4ledto2rae5len4tonye1lestro3ve4fic4tonoto3mytom4bto2mato5ice5limto2gre3lioe2listru5i4todo4ellaee4tyello4e5locel5ogeest4el2shel4tae5ludel5uge4mace4mage5man2t1n2ee2s4ee4p1e2mele4metee4naemi4eee4lyeel3i3tled3tle_e4mistlan4eed3iem3iztrus4emo4gti3zaem3pie4mule4dulemu3ne4dritiv4aedon2e4dolti3tle5neae5neeen3emtis4pti5sotis4m3tisee3newti3sae5niee5nile3nioedi5zen3ite5niu5enized1ited3imeno4ge4nosen3oven4swti5oc4t1s2en3uaen5ufe3ny_4en3zed3ibe3diae4oi4ede4s3tini4ed3deo3ret2ina2e2dae4culeo4toe5outec4te4t3t2t4tes2t1ine5pel4timpe2corephe4e4plie2col5tigutu3arti5fytu4bie3pro3tienep4sh5tidie4putt4icoeci4t4tick2ti2bec3imera4bti4aber3ar4tuf45tu3ier4bler3che4cib2ere_4thooecca54thil3thet4thea3turethan4e4cade4bitere4qe4ben5turieret4tur5oeav5oeav5itu5ry4tess4tes_ter5ve1rio4eriter4iueri4v1terier3m4ter3cte5pe4t1waer3noeast3er5obe5rocero4rer1oue3assea5sp1tent4ertler3twtwis4eru4t3tende1s4a3tenc5telsear2te2scateli4e3scres5cue1s2ee2sec3tel_te5giear5kear4cte5diear3ae3sha2t1ede5ande2sice2sid5tecttece44teattype3ty5phesi4uea4gees4mie2sole3acte2sone1a4bdys5pdy4sedu4petaun4d3uleta5sytas4e4tare4tarctar4ata5pl2estrta5mo4talke2surtal3idu5eleta4bta5lae3teoua5naet1ic4taf4etin4ta5doe5tir4taciuan4id1ucad1u1ae3trae3tre2d1s2syn5ouar2d4drowet3uaet5ymdro4pdril4dri4b5dreneu3rouar3ieute44draieu5truar3te2vasdop4pe5veadoo3ddoni4u4belsum3iev1erdoli4do4laev3idevi4le4vinevi4ve5voc2d5ofdo5dee4wage5wee4d1n4ewil54d5lue3wit2d3lou3ber5eye_u1b4i3dledfa3blfab3rfa4ce3dle_fain4suit3su5issu2g34d5lasu4b3fa3tasu1al4fato1di1vd2iti5disiuci4bfeas4di1redi4pl4feca5fectdio5gfe3life4mofen2d4st3wuc4it5ferr5diniucle3f4fesf4fie4stry1dinaf4flydi3ge3dictd4icedia5bs4tops1tle5stirs3tifs4ties1ticfic4is5tias4ti_4ficsfi3cuud3ers3thefil5iste2w4filyudev45finas4tedfi2nes2talfin4ns2tagde2tode4suflin4u1dicf2ly5ud5isu5ditde1scd2es_der5sfon4tu4don5dermss4lid4erhfor4is4siede2pudepi4fra4tf5reade3pade3nufril4frol5ud4side3nou4eneuens4ug5infu5el5dem_s5setfu5nefu3rifusi4fus4s4futade5lode5if4dee_5gal_3galiga3lo2d1eds3selg5amos2s5cssas3u1ing4ganouir4mgass4gath3uita4deaf5dav5e5dav44dato4darygeez44spotspor4s4pon4gelydark5s4ply4spio4geno4genydard5ge3omg4ery5gesigeth54getoge4tydan3g4g1g2da2m2g3gergglu5dach4gh3inspil4gh4to4cutr1gi4agia5rula5bspho5g4icogien5s2pheulch42sperspa4n5spai3c4utu1lenul4gigir4lg3islcu5pycu3picu4mic3umecu2maso5vi5glasu5liagli4bg3lig5culiglo3r4ul3mctu4ru1l4og4na_c3terul1tig2ning4nio4ultug4noncta4b4c3s2cru4dul5ulsor5dgo3isum5absor5ccris4go3nic4rinson4gsona45gos_cri5fcre4vum4bi5credg4raigran25solvsoft3so4ceunat44graygre4nco5zi4gritcoz5egruf4cow5ag5stecove4cos4es5menun4ersmel44corbco4pl4gu4tco3pacon5tsman3gy5racon3ghach4hae4mhae4th5aguha3lac4onecon4aun4ims3latu2ninhan4gs3ket5colocol5ihan4kuni3vhap3lhap5ttras4co4grhar2dco5agsir5aclim45sionhas5shaun44clichaz3acle4m1head3hearun3s4s3ingun4sws2ina2s1in4silysil4eh5elohem4p4clarhena45sidiheo5r1c4l4h4eras5icc2c1itu4orsh3ernshor4h3eryci3phshon34cipecion45cinoc1ingc4inahi5anhi4cohigh5h4il2shiv5h4ina3ship3cilihir4lhi3rohir4phir4rsh3iohis4ssh1inci4lau5pia4h1l4hlan44cier5shevcia5rhmet4ch4tish1erh5ods3cho2hoge4chi2z3chitho4mahome3hon4aho5ny3hoodhoon45chiouptu44ura_ho5ruhos4esew4ihos1p1housu4ragses5tu4rasur4behree5se5shs1e4s4h1s24chedh4tarht1enht5esur4fru3rifser4os4erlhun4tsen5gur1inu3riosen4dhy3pehy3phu1ritces5tur3iz4cesa4sencur4no4iancian3i4semeia5peiass45selv5selfi4atu3centse1le4ceniib5iaib3inseg3ruros43cencib3li3cell5cel_s5edli5bun4icam5icap4icar4s4ed3secticas5i4cayiccu44iceour4pe4ced_i5cidsea5wi2cipseas4i4clyur4pi4i1cr5icrai4cryic4teictu2ccon4urti4ic4umic5uoi3curcci4ai4daiccha5ca4thscof4ide4s4casys4cliscle5i5dieid3ios4choid1itid5iui3dlei4domid3owu5sadu5sanid5uous4apied4ecany4ield3s4cesien4ei5enn4sceii1er_i3esci1estus3ciuse5as4cedscav5if4frsca4pi3fieu5siau3siccan4eiga5bcan5d4calous5sli3gibig3ilig3inig3iti4g4lus1trig3orig5oti5greigu5iig1ur2c5ah4i5i44cag4cach4ca1blusur4sat3usa5tab5utoi3legil1erilev4uta4b4butail3iail2ibil3io3sanc2ilitil2izsal4t5bustil3oqil4tyil5uru3tati4magsa5losal4m4ute_4imetbu3res3act5sack2s1ab4imitim4nii3mon4utelbumi4bu3libu4ga4inav4utenbsor42b5s2u4tis4briti3neervi4vr3vic4inga4inger3vey4ingir3ven4ingo4inguu4t1li5ni_i4niain3ioin1isbo4tor5uscrunk5both5b5ota5bos42i1no5boriino4si4not5borein3seru3in2int_ru4glbor5di5nusut5of5bor_uto5gioge4io2grbon4au5tonru3enu4touion3iio5phior3ibod3iio5thi5otiio4toi4ourbne5gb3lisrt4shblen4ip4icr3triip3uli3quar4tivr3tigrti4db4le_b5itzira4bi4racird5ert5ibi4refbi3tri4resir5gibi5ourte5oir4isr3tebr4tagbin4diro4gvac3uir5ul2b3ifis5agis3arisas52is1cis3chbi4eris3erbi5enrson3be5yor5shais3ibisi4di5sisbe3tw4is4krs3es4ismsbe5trr3secva4geis2piis4py4is1sbe3sp4bes4be5nuval5ois1teis1tirrys4rros44be5mis5us4ita_rron4i4tagrri4vi3tani3tatbe3lorri4or4reoit4esbe1libe5gu4itiarre4frre4cbe3giit3igbe3dii2tim2itio4itisrp4h4r3pet4itonr4peait5rybe3debe3dai5tudit3ul4itz_4be2dbeat3beak4ro4varo4tyros4sro5roiv5ioiv1itror3i5root1roomval1ub3berva5mo4izarva5piron4eban3ijac4qban4ebal1ajer5srom4prom4iba4geazz5i5judgay5alax4idax4ickais4aw4ly3awaya1vorav5ocav3igke5liv3el_ve4lov4elyro1feke4tyv4erdv4e2sa5vanav3ag5k2ick4illkilo5au1thk4in_4ves_ro3crkin4gve4teaun5dk5ishau4l2au3gu4kleyaugh3ve4tyk5nes1k2noat3ulkosh4at5uekro5n4k1s2at5uaat4that5te5vianat4sk5vidil4abolaci4l4adela3dylag4nlam3o3landrob3la4tosr4noular4glar3ilas4ea4topr3nivr3nita2tomr5nica4toglbin44l1c2vi5gnat3ifat1ica5tiar3neyr5net4ati_ld5isat4hol4driv2incle4bileft55leg_5leggr4nerr3nel4len_3lencr4nar1lentle3phle4prvin5dler4e3lergr3mitl4eroat5evr4mio5lesq3lessr3menl3eva4vingrma5cvio3lvi1ou4leyevi5rovi3so4l1g4vi3sulgar3l4gesate5cat5apli4agli2amr3lo4li4asr4lisli5bir4ligr2led4lics4vitil4icul3icyl3idaat5ac3lidirk4lel4iffli4flr3ket3lighvit3r4vityriv3iri2tulim3ili4moris4pl4inar3ishris4clin3ir4is_li5og4l4iqlis4pas1trl2it_as4shas5phri2pla4socask3ia3sicl3kallka4ta3sibl4lawashi4l5leal3lecl3legl3lel5riphas4abar2shrin4grin4ear4sarin4dr2inal5lowarre4l5met3rimol4modlmon42l1n2a3roorim5ilo4civo4la5rigil5ogo3loguri5et5longlon4iri1erlood5r4icolop3il3opmlora44ricir4icerib3a5los_v5oleri4agria4blos4tlo4taar2mi2loutar2izar3iolpa5bl3phal5phi4rhall3pit5voltar4im3volv2l1s2vom5ivori4l4siear4fllt5agar4fivo4rylten4vo4talth3ia3reeltis4ar4drw5ablrgo4naraw4lu3brluch4lu3cilu3enwag5olu5idlu4ma5lumia5raur5gitwait5luo3rw5al_luss4r5gisar4atl5venrgi4nara3pwar4tar3alwas4tly5mely3no2lys4l5ysewa1teaque5ma2car3gicma4clr3get5magnwed4nmaid54maldrg3erweet3wee5vwel4lapoc5re4whwest3ap3in4aphires2tr4es_mar3vre5rumas4emas1t5matemath3rero4r4eriap5atr1er4m5bilre1pumbi4vapar4a5nuran3ul4med_an3uare5lure1lian4twre5itmel4tan2trre4fy4antomen4are3fire2fe4menemen4imens4re1de3ment2r2edme5onre4awwin4g5reavme4tare3anme1tere1alm4etr3wiserdin4rdi4aan4stwith3an2span4snan2samid4amid4gan5otwl4esr4dalm4illmin4a3mindrcum3rc4itr3charcen4min4tm4inumiot4wl3ina3niumis5lan3ita3nip4mithan3ioan1gla3neuws4per2bina3nena5neem4ninw5s4tan1dl4mocrrbi4fmo2d1mo4gomois2xac5ex4agor4bagmo3mer4baba3narrau4ta5monrare4rar5cra5nor4aniam1inr2amiam5ifra4lomo3spmoth3m5ouf3mousam3icxer4ixe5roraf4tr5aclm3petra3bixhil5mpi4aam3ag3quetm5pirmp5is3quer2que_qua5vmpov5mp4tram5ab3alyz4m1s25alyt4alysa4ly_ali4exi5di5multx4ime4aldia4laral3adal5abak1enain5opu3trn4abu4nac_na4can5act5putexpe3dna4lia4i4n4naltai5lya3ic_pur4rag5ulnank4nar3c4narenar3inar4ln5arm3agognas4c4ag4l4ageupul3cage4oaga4na4gab3nautnav4e4n1b4ncar5ad5umn3chaa3ducptu4rpti3mnc1innc4itad4suad3owad4len4dain5dana5diua3ditndi4ba3dion1ditn3dizn5ducndu4rnd2we3yar4n3eara3dianeb3uac4um5neckac3ulp4siba3cio5negene4laac1inne5mine4moa3cie4nene4a2cine4poyc5erac1er2p1s2pro1tn2erepro3lner4rych4e2nes_4nesp2nest4neswpri4sycom4n5evea4carab3uln4gabn3gelpre3vpre3rycot4ng5han3gibng1inn5gitn4glangov4ng5shabi5an4gumy4erf4n1h4a5bannhab3a5bal3n4iani3anni4apni3bani4bl_us5ani5dini4erni2fip3petn5igr_ure3_un3up3per_un5op3pennin4g_un5k5nis_p5pel_un1en4ithp4ped_un1ani3tr_to4pympa3_til4n3ketnk3inyn5ic_se2ny4o5gy4onsnmet44n1n2_ru4d5pounnni4vnob4lpo4tan5ocly4ped_ro4qyper5noge4pos1s_ri4gpo4ry1p4or_res2no4mono3my_ree2po4ninon5ipoin2y4poc5po4gpo5em5pod_4noscnos4enos5tno5tayp2ta3noun_ra4cnowl3_pi2tyra5m_pi4eyr5ia_out3_oth32n1s2ns5ab_or3t_or1d_or3cplu4mnsid1nsig4y3s2eys3ion4socns4pen5spiploi4_odd5nta4bpli4n_ni4cn5tib4plignti2fpli3a3plannti4p1p2l23ysis2p3k2ys3ta_mis1nu5enpi2tun3uinp3ithysur4nu1men5umi3nu4nyt3icnu3trz5a2b_li4t_li3o_li2n_li4g_lev1_lep5_len4pion4oard3oas4e3pi1ooat5ip4inoo5barobe4l_la4mo2binpind4_ju3rob3ul_is4i_ir5rp4in_ocif3o4cil_in3so4codpi3lopi3enocre33piec5pidipi3dep5ida_in2kod3icodi3oo2do4odor3pi4cypian4_ine2o5engze3rooe4ta_im3m_id4l_hov5_hi3b_het3_hes3_go4r_gi4bpho4ro5geoo4gero3gie3phobog3it_gi5azo5ol3phizo4groogu5i4z1z22ogyn_fes3ohab5_eye55phieph1icoiff4_en3sph4ero3ing_en3go5ism_to2qans3v_el5d_eer4bbi4to3kenok5iebio5mo4lanper1v4chs_old1eol3erpe5ruo3letol4fi_du4co3liaper3op4ernp4erio5lilpe5ono5liop4encpe4la_do4tpee4do5livcin2q3pediolo4rol5pld3tabol3ub3pedeol3uno5lusedg1le1loaom5ahoma5l2p2edom2beom4bl_de3o3fich3pe4ao4met_co4ro3mia_co3ek3shao5midom1inll1fll3teapa2teo4monom3pi3pare_ca4tlue1pon4aco3nanm2an_pa4pum2en_on5doo3nenng1hoon4guon1ico3nioon1iso5niupa3nypan4ao3nou_bri2pain4ra1oronsu4rk1hopac4tpa4ceon5umonva5_ber4ood5eood5i6rks_oop3io3ordoost5rz1scope5dop1erpa4ca_ba4g_awn4_av4i_au1down5io3pito5pon1sync_as1s_as1p_as3ctch1c_ar5so5ra_ow3elo3visov4enore5auea1mor3eioun2d_ant4orew4or4guou5etou3blo5rilor1ino1rio_ang4o3riuor2miorn2eo5rofoto5sor5pe3orrhor4seo3tisorst4o3tif_an5cor4tyo5rum_al3tos3al_af1tos4ceo4teso4tano5scros2taos4poos4paz2z3wosi4ue3pai",
			6 : "os3ityos3itoz3ian_os4i4ey1stroos5tilos5titxquis3_am5atot3er_ot5erso3scopor3thyweek1noth3i4ot3ic_ot5icao3ticeor3thiors5enor3ougor3ityor3icaouch5i4o5ria_ani5mv1ativore5sho5realus2er__an3teover3sov4erttot3icoviti4o5v4olow3dero4r3agow5esto4posiop3ingo5phero5phanthy3sc3operaontif5on3t4ionten45paganp3agattele2gonspi4on3omyon4odipan3elpan4tyon3keyon5est3oncil_ar4tyswimm6par5diompro5par5elp4a4ripar4isomo4gepa5terst5scrpa5thy_atom5sta1tio5miniom3icaom3ic_ss3hatsky1scpear4lom3ena_ba5naol3umer1veilpedia4ped4icolli4er1treuo5liteol3ishpeli4epe4nano5lis_pen4thol3ingp4era_r1thoup4erago3li4f_bas4er1krauperme5ol5id_o3liceper3tio3lescolass4oi3terpe5tenpe5tiz_be5raoi5son_be3smphar5iphe3nooi5letph4es_oi3deroic3esph5ingr3ial_3ognizo5g2ly1o1gis3phone5phonio5geneo4gatora3mour2amenofit4tof5itera3chupi4ciepoly1eod5dedo5cureoc3ula1pole_5ocritpee2v1param4oc3raco4clamo3chetob5ingob3a3boast5eoke1st3nu3itpi5thanuf4fentu3meoerst2o3chasplas5tn3tinepli5ernti4ernter3sntre1pn4s3esplum4bnsati4npre4cns4moonon1eqnor5abpo3et5n5lessn5oniz5pointpoly5tnon4agnk3rup3nomicng1sprno5l4inois5i4n3o2dno3blenni3aln5keroppa5ran3itor3nitionis4ta5nine_ni3miznd3thrmu2dron3geripray4e5precipre5copre3emm3ma1bpre4lan5gerep3rese3press_can5cmedi2c5pri4e_ce4la3neticpris3op3rocal3chain4er5ipros3en4erarnera5bnel5iz_cit5rne4gatn5d2ifpt5a4bjanu3aign4itn3chisn5chiln5cheon4ces_nau3seid4iosna3talnas5tinan4itnanci4na5mitna5liahnau3zput3er2n1a2bhex2a3hatch1multi3hair1sm4pousg1utanmpo3rim4p1inmp5iesmphas4rach4empar5iraf5figriev1mpara5mo5seyram3et4mora_rane5oran4gemo3ny_monol4rap3er3raphymo3nizgno5morar5ef4raril1g2nacg1leadmoni3ara5vairav3elra5ziemon5gemon5etght1wemoi5sege3o1dmma5ryr5bine3fluoren1dixmis4ti_de3ra_de3rie3chasrch4err4ci4bm4inglm5ineedu2al_3miliame3tryrdi4er_des4crd3ingdi2rerme5thimet3alre5arr3mestim5ersadi2rende2ticdes3icre4cremen4temensu5re3disred5itre4facmen4dede2mosmen5acmem1o3reg3ismel5onm5e5dyme3died2d5ibren4te5mediare5pindd5a5bdata1bmba4t5cle4arma3tisma5scemar4lyre4spichs3huma5riz_dumb5re3strre4terbrus4qre3tribio1rhre5utiman3izre4valrev3elbi1orbbe2vie_eas3ire5vilba1thyman5is5maniamal4tymal4lima5linma3ligmag5inav3ioul5vet4rg3inglus3teanti1dl5umn_ltur3a_el3emltera4ltane5lp5ingloun5dans5gra2cabllos5etlor5ouric5aslo5rie_enam35ricidri4cie5lope_rid5erri3encri3ent_semi5lom3errig5an3logicril3iz5rimanlob5allm3ingrim4pell5out5rina__er4ril5linal2lin4l3le4tl3le4nriph5eliv3er_ge5og_han5k_hi3er_hon3olin3ea1l4inel4im4p_idol3_in3ci_la4cy_lath5rit3iclim4blrit5urriv5elriv3et4l4i4lli4gra_leg5elif3errk4linlid5er4lict_li4cor5licioli4atorl5ish_lig5a_mal5o_man5a_mer3c5less_rm5ersrm3ingy3thinle5sco3l4erilera5b5lene__mon3ele4matld4erild4erela4v4ar1nis44lativ_mo3rola5tanlan4telan5etlan4dllab3ic_mu5takin4dek3est_ro5filk3en4dro5ker5role__of5te4jestyys3icaron4al5izont_os4tlron4tai4v3ot_pe5tero3pelrop3ici5voreiv5il__pio5n_pre3mro4the_ran4tiv3en_rov5eliv3ellit3uati4tramr5pentrp5er__rit5ui4tismrp3ingit5ill_ros5tit3ica4i2tici5terirre4stit3era4ita5mita4bi_row5dist4lyis4ta_is4sesrsa5tiissen4is4sal_sci3erse4crrs5er_islan4rse5v2yo5netish5opis3honr4si4bis5han5iron_ir4minrtach4_self5iri3turten4diri5dei4rel4ire4de_sell5r4tieriq3uidrtil3irtil4lr4tilyr4tistiq5uefip4re4_sing4_ting4yn3chrru3e4lion3at2in4th_tin5krum3pli4no4cin3ityrun4ty_ton4aruti5nymbol5rvel4i_top5irv5er_r5vestin5geni5ness_tou5s_un3cein3cerincel45ryngei4n3auim3ulai5miniimi5lesac3riim5ida_ve5rasalar4ima5ryim3ageill5abil4istsan4deila5rai2l5am_wil5ii4ladeil3a4bsa5voright3iig3eraab5erd4ific_iff5enif5eroi3entiien5a45ie5gaidi5ou3s4cieab5latidi4arid5ianide3al4scopyab5rogid5ancic3ulaac5ardi2c5ocic3ipaic5inase2c3oi4carai4car_se4d4ei2b5riib5iteib5it_ib5ertib3eraac5aroi4ativ4ian4tse4molsen5ata5ceouh4warts5enedhus3t4s5enin4sentd4sentlsep3a34s1er_hun5kehu4min4servohro3poa5chethov5el5se5umhouse3sev3enho5senhort3eho5rishor5at3hol4ehol5arh5odizhlo3riac5robhis3elhion4ehimer4het4edsh5oldhe2s5ph5eroushort5here5aher4bahera3p3side_5sideshen5atsi5diz4signahel4lyact5ifhe3l4ihe5do55sine_h5ecathe4canad4dinsion5aad5er_har4lehard3e3sitioha5rasha3ranhan4tead3icahang5oadi4ersk5inesk5ing5hand_han4cyhan4cislith5hala3mh3ab4lsmall32g5y3n5gui5t3guard5smithad5ranaeri4eag5ellag3onia5guerso4labsol3d2so3licain5in4grada3s4on_gor5ougo5rizgondo5xpan4dait5ens5ophyal3end3g4o4ggnet4tglad5i5g4insgin5ge3g4in_spen4d2s5peog3imen5gies_3spher5giciagh5outsp5ingge5nizge4natge5lizge5lisgel4inxi5miz4gativgar5n4a5le5oga3nizgan5isga5mets5sengs4ses_fu4minfres5cfort5assi4erss5ilyfore5tfor5ayfo5ratal4ia_fon4dessur5aflo3ref5lessfis4tif1in3gstam4i5stands4ta4p5stat_fin2d5al5levs5tero4allicstew5afight5fi5del5ficie5ficiafi3cer5stickf3icena5log_st3ingf3icanama5ra5stockstom3a5stone2f3ic_3storef2f5iss4tradam5ascs4trays4tridf5fin_fend5efeath3fault5fa3thefar5thfam5is4fa4mafall5eew3inge5verbeven4ie5vengevel3oev3ellev5asteva2p5euti5let5roset3roget5rifsy5rinet3ricet5onaam5eraam5ilyami4noamor5ieti4noe5tidetai5loethod3eten4dtal5enes5urramp5enan3ageta5loge5strotan4detanta3ta5pere3ston4es2toes5times3tigta3rizestan43analy4taticta4tures4prean3arces3pertax4ises5onaes3olue5skintch5etanar4ies4i4ntead4ie2s5ima3natiande4sesh5enan3disan4dowang5iete5geres5ences5ecres5cana4n1icte2ma2tem3at3tenanwrita45erwau4tenesert3era3nieser3set5erniz4erniter4nis5ter3de4rivaan3i3fter3isan4imewo5vener3ineeri4ere3rient3ess_teth5e5ericke1ria4er3ester5esser3ent4erenea5nimier5enaer3emoth3easthe5atthe3iser5el_th5ic_th5icaere3in5thinkere5coth5odea5ninee3realan3ishan4klier4che5anniz4erandti4atoanoth5equi3lep5utat4ic1uan4scoe4probep3rehe4predans3poe4precan4surantal4e3penttim5ulep5anceo5rol3tine_eop3aran4tiewin4deap5eroen3ishen5icsen3etren5esten5esien5eroa3pheren3dicap3itae4nanten5amoem5ulaa3pituti3zen5emnize5missem5ishap5olaem5ine3tles_t5let_em1in2apor5iem3icaem5anael3op_el4labapos3te3liv3el5ishaps5esweath3e3lierel3icaar3actwa5verto3nate3libee4l1erel3egato3rietor5iza5radeelaxa4aran4gto3warelan4dej5udie5insttra5chtraci4ar5av4wa5gere5git5arbal4ar5easeg5ing4voteetrem5iar3enta5ressar5ial4tricsvor5abe3finetro5mitron5i4tronyar3iantro3sp5eficia3rieted5uloed3icae4d1erec3ulaec4tane4cremeco5roec3orae4concar5o5de4comme4cluse4clame5citeec5ifya5ronias3anta5sia_tu4nis2t3up_ecan5ce4belstur3ise4bel_eav3ene4a3tue5atifeath3ieat5eneart3eear4ilear4icear5eseam3ereal3oueal5erea5geread5iedum4be4ducts4duct_duc5eras3tenasur5adrea5rat3abl4d5outdo3natdom5izdo5lor4dlessu4bero3dles_at3alou3ble_d4is3tdirt5idi5niz3dine_at5ech5di3endi4cam1d4i3ad3ge4tud5estdev3ilde3strud3iedud3iesdes3tide2s5oat3egovis3itde4nardemor5at3en_uen4teuer4ilde5milat3eraugh3en3demicater5nuil5izdeli4ede5comde4cildecan4de4bonv3io4rdeb5it4dativ2d3a4bat3estu5laticu4tie5ulcheul3dercuss4icu5riaath5em3cultua5thenul3ingul5ishul4lar4vi4naul4liscu5ityctim3ic4ticuuls5esc5tantultra3ct5angcros4ecrop5ocro4pl5critiath5omum4blycre3at5vilitumor5oat5i5b5crat_cras5tcoro3ncop3iccom5ercol3orun5ishco3inc5clareat3ituunt3abat5ropun4tescit3iz4cisti4cista4cipicc5ing_cin3em3cinatuper5s5videsup3ingci2a5b5chini5videdupt5ib5vide_at4tag4ch1inch3ersch3er_ch5ene3chemiche5loure5atur4fercheap3vi5aliat3uravet3er4ch3abc5e4taau5sib3cessives4tece5ram2cen4e4cedenccou3turs5erur5tesur3theaut5enur4tiecav5al4cativave4nover3thcar5omca5percan4tycan3izcan5iscan4icus4lin3versecal4laver3ieca3latca5dencab3in3butiobuss4ebus5iebunt4iv4eresuten4i4u1t2iv3erenu3tineut3ingv4erelbroth35u5tizbound34b1orabon5at5vere_bom4bibol3icblun4t5blespblath5av3erav5enuebi3ogrbi5netven3om2v1a4bvac5ilbi3lizbet5izbe5strva5liebe5nigbbi4nabas4siva5nizbari4aav5ernbarbi5av5eryvel3liazi4eravi4er",
			7 : "_dri5v4ban5dagvar5iedbina5r43bi3tio3bit5ua_ad4derution5auti5lizver5encbuf4ferus5terevermi4ncall5incast5ercas5tigccompa5z3o1phros5itiv5chanicuri4fico5stati5chine_y5che3dupport54v3iden5cific_un4ter_at5omiz4oscopiotele4g5craticu4m3ingv3i3liz4c3retaul4li4bcul4tiscur5a4b4c5utiva5ternauiv4er_del5i5qdem5ic_de4monsdenti5fdern5izdi4latou4b5ingdrag5on5drupliuar5ant5a5si4tec5essawo4k1enec5ifiee4compear5inate4f3eretro5phewide5sp5triciatri5cesefor5ese4fuse_oth5esiar5dinear4chantra5ventrac4tetrac4itar5ativa5ratioel5ativor5est_ar5adisel5ebraton4alie4l5ic_wea5rieel5igibe4l3ingto5cratem5igraem3i3niemoni5oench4erwave1g4a4pillavoice1ption5eewill5inent5age4enthesvaude3vtill5inep5recaep5ti5bva6guer4erati_tho5rizthor5it5thodicer5ence5ternitteri5zater5iesten4tage4sage_e4sagese4sert_an5est_e4sertse4servaes5idenes5ignaesis4tees5piraes4si4btal4lisestruc5e5titioounc5erxe4cutota5bleset5itiva4m5atoa4matis5stratu4f3ical5a5lyst4ficatefill5instern5isspend4gani5zasqual4la4lenti4g3o3nas5ophiz5sophicxpecto55graph_or5angeuri4al_4graphy4gress_smol5d4hang5erh5a5nizharp5enhar5terhel4lishith5erhro5niziam5eteia4tricic4t3uascour5au2r1al_5scin4dover4nescan4t55sa3tiou5do3ny_ven4de_under5ty2p5al_anti5sylla5bliner4arturn3ari5nite_5initioinsur5aion4eryiphras4_tim5o5_ten5an_sta5blrtroph4_se5rieiq3ui3t5i5r2izis5itiviso5mer4istral5i5ticki2t5o5mtsch3ie_re5mittro3fiti4v3er_i4vers_ros5per_pe5titiv3o3ro_ped5alro5n4is_or5ato4jestierom5ete_muta5bk5iness4latelitr4ial__mist5i_me5terr4ming_lev4er__mar5tilev4eralev4ers_mag5a5liar5iz5ligaterit5ers_lat5errit5er_r5ited__im5pinri3ta3blink5er_hon5ey5litica_hero5ior5aliz_hand5irip5lic_gen3t4tolo2gylloqui5_con5grt1li2erbad5ger4operag_eu4lertho3donter2ic__ar4tie_ge4ome_ge5ot1_he3mo1_he3p6a_he3roe_in5u2tpara5bl5tar2rht1a1mintalk1a5ta3gon_par5age_aster5_ne6o3f_noe1thstyl1is_poly1s5pathic_pre1ampa4tricl3o3niz_sem4ic_semid6_semip4_semir45ommend_semiv4lea4s1a_spin1oom5etryspher1o_to6poglo4ratospe3cio3s2paceso2lute_we2b1l_re1e4ca5bolicom5erseaf6fishside5swanal6ysano5a2cside5stl5ties_5lumniasid2ed_anti1reshoe1stscy4th1s4chitzsales5wsales3cat6tes_augh4tlau5li5fom5atizol5ogizo5litiorev5olure5vertre5versbi5d2ifbil2lab_earth5pera5blro1tronro3meshblan2d1blin2d1blon2d2bor1no5ro1bot1re4ti4zr5le5quperi5stper4malbut2ed_but4tedcad5e1moist5enre5stalress5ibchie5vocig3a3roint5er4matizariv1o1lcous2ticri3tie5phisti_be5stoog5ativo2g5a5rr3a3digm4b3ingre4posir4en4tade4als_od5uctsquasis6quasir6re5fer_p5trol3rec5olldic1aiddif5fra3pseu2dr5ebrat5metric2d1lead2d1li2epro2g1epre1neuod5uct_octor5apoin3came5triem5i5liepli5narpara3memin5glim5inglypi4grappal6matmis4er_m5istryeo3graporth1riop1ism__but4tio3normaonom1icfeb1ruafermi1o_de4moio5a5lesodit1icodel3lirb5ing_gen2cy_n4t3ingmo5lestration4get2ic_4g1lishobli2g1mon4ismnsta5blmon4istg2n1or_nov3el3ns5ceivno1vembmpa5rabno4rarymula5r4nom1a6lput4tinput4tedn5o5miz_cam4penag5er_nge5nesh2t1eoun1dieck2ne1skiifac1etncour5ane3backmono1s6mono3chmol1e5cpref5ac3militapre5tenith5i2lnge4n4end5est__capa5bje1re1mma1la1ply5styr1kovian_car5olprin4t3lo2ges_l2l3ishprof5it1s2tamp",
			8 : "lead6er_url5ing_ces5si5bch5a5nis1le1noidlith1o5g_chill5ilar5ce1nym5e5trych5inessation5arload4ed_load6er_la4c3i5elth5i2lyneg5ativ1lunk3erwrit6er_wrap3arotrav5es51ke6linga5rameteman3u1scmar1gin1ap5illar5tisticamedio6c1me3gran3i1tesima3mi3da5bves1titemil2l1agv1er1eigmi6n3is_1verely_e4q3ui3s5tabolizg5rapher5graphicmo5e2lasinfra1s2mon4ey1lim3ped3amo4no1enab5o5liz_cor5nermoth4et2m1ou3sinm5shack2ppo5sitemul2ti5uab5it5abimenta5rignit1ernato5mizhypo1thani5ficatuad1ratu4n5i4an_ho6r1ic_ua3drati5nologishite3sidin5dling_trib5utin5glingnom5e1non1o1mistmpos5itenon1i4so_re5stattro1p2istrof4ic_g2norespgnet1ism5glo5binlem5aticflow2er_fla1g6elntrol5lifit5ted_treach1etra1versl5i5ticso3mecha6_for5mer_de5rivati2n3o1me3spac6i2t3i4an_thy4l1antho1k2er_eq5ui5to4s3phertha4l1amt3ess2es3ter1geiou3ba3dotele1r6ooxi6d1iceli2t1isonspir5apar4a1leed1ulingea4n3iesoc5ratiztch3i1er_kil2n3ipi2c1a3dpli2c1abt6ap6athdrom3e5d_le6icesdrif2t1a_me4ga1l1prema3cdren1a5lpres2plipro2cess_met4ala3do5word1syth3i2_non1e2m_post1ampto3mat4rec5ompepu5bes5cstrib5utqu6a3si31stor1ab_sem6is4star3tliqui3v4arr1abolic_sph6in1de5clar12d3aloneradi1o6gs3qui3tosports3wsports3cra5n2hascro5e2cor3bin1gespokes5wspi2c1il_te3legrcroc1o1d_un3at5t_dictio5cat1a1s2buss4ingbus6i2esbus6i2erbo2t1u1lro5e2las1s2pacinb1i3tivema5rine_r3pau5li_un5err5r5ev5er__vi2c3arback2er_ma5chinesi5resid5losophyan3ti1n2sca6p1ersca2t1olar2rangesep3temb1sci2uttse3mes1tar3che5tsem1a1ph",
			9 : "re4t1ribuuto5maticl3chil6d1a4pe5able1lec3ta6bas5ymptotyes5ter1yl5mo3nell5losophizlo1bot1o1c5laratioba6r1onierse1rad1iro5epide1co6ph1o3nscrap4er_rec5t6angre2c3i1prlai6n3ess1lum5bia_3lyg1a1miec5ificatef5i5nites2s3i4an_1ki5neticjapan1e2smed3i3cinirre6v3ocde2c5linao3les3termil5li5listrat1a1gquain2t1eep5etitiostu1pi4d1v1oir5du1su2per1e6_mi1s4ers3di1methy_mim5i2c1i5nitely_5maph1ro15moc1ra1tmoro6n5isdu1op1o1l_ko6r1te1n3ar4chs_phi2l3ant_ga4s1om1teach4er_parag6ra4o6v3i4an_oth3e1o1sn3ch2es1to5tes3toro5test1eror5tively5nop5o5liha2p3ar5rttrib1ut1_eth1y6l1e2r3i4an_5nop1oly_graph5er_5eu2clid1o1lo3n4omtrai3tor1_ratio5na5mocratiz_rav5en1o",
			10 : "se1mi6t5ic3tro1le1um5sa3par5iloli3gop1o1am1en3ta5bath3er1o1s3slova1kia3s2og1a1myo3no2t1o3nc2tro3me6c1cu2r1ance5noc3er1osth1o5gen1ih3i5pel1a4nfi6n3ites_ever5si5bs2s1a3chu1d1ri3pleg5_ta5pes1trproc3i3ty_s5sign5a3b3rab1o1loiitin5er5arwaste3w6a2mi1n2ut1erde3fin3itiquin5tes5svi1vip3a3r",
			11 : "pseu3d6o3f2s2t1ant5shimi1n2ut1estpseu3d6o3d25tab1o1lismpo3lyph1onophi5lat1e3ltravers3a3bschro1ding12g1o4n3i1zat1ro1pol3it3trop1o5lis3trop1o5lesle3g6en2dreeth1y6l1eneor4tho3ni4t",
			12 : "3ra4m5e1triz1e6p3i3neph1"
		}
	};

	var hEn = /*@__PURE__*/getDefaultExportFromCjs(enUs);

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */

	function arrayPush$1(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	var _arrayPush = arrayPush$1;

	var Symbol = _Symbol,
	    isArguments = isArguments_1,
	    isArray = isArray_1;

	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable$1(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	var _isFlattenable = isFlattenable$1;

	var arrayPush = _arrayPush,
	    isFlattenable = _isFlattenable;

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten$1(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten$1(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	var _baseFlatten = baseFlatten$1;

	var baseFlatten = _baseFlatten;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Recursively flattens `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flattenDeep([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, 3, 4, 5]
	 */
	function flattenDeep(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, INFINITY) : [];
	}

	var flattenDeep_1 = flattenDeep;

	var flattenDeep$1 = /*@__PURE__*/getDefaultExportFromCjs(flattenDeep_1);

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */

	function compact(array) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	var compact_1 = compact;

	var compact$1 = /*@__PURE__*/getDefaultExportFromCjs(compact_1);

	exports.HtmlGenerator = void 0;
	he.decode.options.strict = true;
	exports.HtmlGenerator = (function(superclass){
	  var create, blockRegex, isBlockLevel, appendChildren, prototype = extend$((import$(HtmlGenerator, superclass).displayName = 'HtmlGenerator', HtmlGenerator), superclass).prototype;
	  HtmlGenerator.prototype.sp = ' ';
	  HtmlGenerator.prototype.brsp = '\u200B ';
	  HtmlGenerator.prototype.nbsp = he.decode("&nbsp;");
	  HtmlGenerator.prototype.visp = he.decode("&blank;");
	  HtmlGenerator.prototype.zwnj = he.decode("&zwnj;");
	  HtmlGenerator.prototype.shy = he.decode("&shy;");
	  HtmlGenerator.prototype.thinsp = he.decode("&thinsp;");
	  create = function(type, classes){
	    var el;
	    el = document.createElement(type);
	    if (classes) {
	      el.setAttribute("class", classes);
	    }
	    return el;
	  };
	  blockRegex = /^(address|blockquote|body|center|dir|div|dl|fieldset|form|h[1-6]|hr|isindex|menu|noframes|noscript|ol|p|pre|table|ul|dd|dt|frameset|li|tbody|td|tfoot|th|thead|tr|html)$/i;
	  isBlockLevel = function(el){
	    return blockRegex.test(el.nodeName);
	  };
	  HtmlGenerator.prototype.inline = "span";
	  HtmlGenerator.prototype.block = "div";
	  HtmlGenerator.prototype.titlepage = function(){
	    return create(this.block, "titlepage");
	  };
	  HtmlGenerator.prototype.title = function(){
	    return create(this.block, "title");
	  };
	  HtmlGenerator.prototype.author = function(){
	    return create(this.block, "author");
	  };
	  HtmlGenerator.prototype.date = function(){
	    return create(this.block, "date");
	  };
	  HtmlGenerator.prototype.abstract = function(){
	    return create(this.block, "abstract");
	  };
	  HtmlGenerator.prototype.part = "part";
	  HtmlGenerator.prototype.chapter = "h1";
	  HtmlGenerator.prototype.section = "h2";
	  HtmlGenerator.prototype.subsection = "h3";
	  HtmlGenerator.prototype.subsubsection = "h4";
	  HtmlGenerator.prototype.paragraph = "h5";
	  HtmlGenerator.prototype.subparagraph = "h6";
	  HtmlGenerator.prototype.linebreak = "br";
	  HtmlGenerator.prototype.par = "p";
	  HtmlGenerator.prototype.list = function(){
	    return create(this.block, "list");
	  };
	  HtmlGenerator.prototype.unorderedList = function(){
	    return create("ul", "list");
	  };
	  HtmlGenerator.prototype.orderedList = function(){
	    return create("ol", "list");
	  };
	  HtmlGenerator.prototype.descriptionList = function(){
	    return create("dl", "list");
	  };
	  HtmlGenerator.prototype.listitem = "li";
	  HtmlGenerator.prototype.term = "dt";
	  HtmlGenerator.prototype.description = "dd";
	  HtmlGenerator.prototype.itemlabel = function(){
	    return create(this.inline, "itemlabel");
	  };
	  HtmlGenerator.prototype.quote = function(){
	    return create(this.block, "list quote");
	  };
	  HtmlGenerator.prototype.quotation = function(){
	    return create(this.block, "list quotation");
	  };
	  HtmlGenerator.prototype.verse = function(){
	    return create(this.block, "list verse");
	  };
	  HtmlGenerator.prototype.multicols = function(c){
	    var this$ = this;
	    return function(){
	      var el;
	      el = create(this$.block, "multicols");
	      el.setAttribute("style", "column-count:" + c);
	      return el;
	    };
	  };
	  HtmlGenerator.prototype.anchor = function(id){
	    return function(){
	      var el;
	      el = document.createElement("a");
	      if (id != null) {
	        el.id = id;
	      }
	      return el;
	    };
	  };
	  HtmlGenerator.prototype.link = function(url){
	    return function(){
	      var el;
	      el = document.createElement("a");
	      if (url) {
	        el.setAttribute("href", url);
	      }
	      return el;
	    };
	  };
	  HtmlGenerator.prototype.verb = function(){
	    return create("code", "tt");
	  };
	  HtmlGenerator.prototype.verbatim = "pre";
	  HtmlGenerator.prototype.img = "img";
	  HtmlGenerator.prototype.image = function(width, height, url){
	    var this$ = this;
	    return function(){
	      var el;
	      el = create(this$.img);
	      el.src = url;
	      el.height = height;
	      el.width = width;
	      return el;
	    };
	  };
	  HtmlGenerator.prototype.picture = function(){
	    return create(this.inline, "picture");
	  };
	  HtmlGenerator.prototype.pictureCanvas = function(){
	    return create(this.inline, "picture-canvas");
	  };
	  HtmlGenerator.prototype.SVG = SVG;
	  HtmlGenerator.prototype.KaTeX = katex;
	  HtmlGenerator.prototype._dom = null;
	  function HtmlGenerator(options){
	    this.pictureCanvas = bind$(this, 'pictureCanvas', prototype);
	    this.picture = bind$(this, 'picture', prototype);
	    this.image = bind$(this, 'image', prototype);
	    this.verb = bind$(this, 'verb', prototype);
	    this.link = bind$(this, 'link', prototype);
	    this.anchor = bind$(this, 'anchor', prototype);
	    this.multicols = bind$(this, 'multicols', prototype);
	    this.verse = bind$(this, 'verse', prototype);
	    this.quotation = bind$(this, 'quotation', prototype);
	    this.quote = bind$(this, 'quote', prototype);
	    this.itemlabel = bind$(this, 'itemlabel', prototype);
	    this.descriptionList = bind$(this, 'descriptionList', prototype);
	    this.orderedList = bind$(this, 'orderedList', prototype);
	    this.unorderedList = bind$(this, 'unorderedList', prototype);
	    this.list = bind$(this, 'list', prototype);
	    this.abstract = bind$(this, 'abstract', prototype);
	    this.date = bind$(this, 'date', prototype);
	    this.author = bind$(this, 'author', prototype);
	    this.title = bind$(this, 'title', prototype);
	    this.titlepage = bind$(this, 'titlepage', prototype);
	    this._options = Object.assign({
	      documentClass: "article",
	      styles: [],
	      hyphenate: true,
	      languagePatterns: hEn,
	      precision: 3
	    }, options);
	    if (this._options.hyphenate) {
	      this._h = new Hypher$1(this._options.languagePatterns);
	    }
	    this.reset();
	  }
	  HtmlGenerator.prototype.reset = function(){
	    superclass.prototype.reset.call(this);
	    this._dom = document.createDocumentFragment();
	  };
	  HtmlGenerator.prototype.character = function(c){
	    return c;
	  };
	  HtmlGenerator.prototype.textquote = function(q){
	    switch (q) {
	    case '`':
	      return this.symbol('textquoteleft');
	    case '\'':
	      return this.symbol('textquoteright');
	    }
	  };
	  HtmlGenerator.prototype.hyphen = function(){
	    if (this._activeAttributeValue('fontFamily') === 'tt') {
	      return '-';
	    } else {
	      return he.decode("&hyphen;");
	    }
	  };
	  HtmlGenerator.prototype.ligature = function(l){
	    if (this._activeAttributeValue('fontFamily') === 'tt') {
	      return l;
	    } else {
	      return ligatures$1.get(l);
	    }
	  };
	  HtmlGenerator.prototype.hasDiacritic = function(d){
	    return diacritics.has(d);
	  };
	  HtmlGenerator.prototype.diacritic = function(d, c){
	    if (!c) {
	      return diacritics.get(d)[1];
	    } else {
	      return c + diacritics.get(d)[0];
	    }
	  };
	  HtmlGenerator.prototype.controlSymbol = function(c){
	    switch (c) {
	    case '/':
	      return this.zwnj;
	    case ',':
	      return this.thinsp;
	    case '-':
	      return this.shy;
	    case '@':
	      return '\u200B';
	    default:
	      return this.character(c);
	    }
	  };
	  /* @return the HTMLDocument for use as a standalone webpage
	   * @param baseURL the base URL to use to build an absolute URL
	   */
	  HtmlGenerator.prototype.htmlDocument = function(baseURL){
	    var doc, charset, ref$, base;
	    doc = document.implementation.createHTMLDocument(this.documentTitle);
	    charset = document.createElement("meta");
	    charset.setAttribute("charset", "UTF-8");
	    doc.head.appendChild(charset);
	    if (!baseURL) {
	      baseURL = (ref$ = window.location) != null ? ref$.href : void 8;
	    }
	    if (baseURL) {
	      base = document.createElement("base");
	      base.href = baseURL;
	      doc.head.appendChild(base);
	      doc.head.appendChild(this.stylesAndScripts(baseURL));
	    } else {
	      doc.head.appendChild(this.stylesAndScripts());
	    }
	    doc.body.appendChild(this.domFragment());
	    this.applyLengthsAndGeometryToDom(doc.documentElement);
	    return doc;
	  };
	  /* @return a DocumentFragment consisting of stylesheets and scripts */
	  HtmlGenerator.prototype.stylesAndScripts = function(baseURL){
	    var el, createStyleSheet, createScript, i$, ref$, len$, style;
	    el = document.createDocumentFragment();
	    createStyleSheet = function(url){
	      var link;
	      link = document.createElement("link");
	      link.type = "text/css";
	      link.rel = "stylesheet";
	      link.href = url;
	      return link;
	    };
	    createScript = function(url){
	      var script;
	      script = document.createElement("script");
	      script.src = url;
	      return script;
	    };
	    if (baseURL) {
	      el.appendChild(createStyleSheet(new URL("css/katex.css", baseURL).toString()));
	      el.appendChild(createStyleSheet(new URL(this.documentClass.constructor.css, baseURL).toString()));
	      for (i$ = 0, len$ = (ref$ = this._options.styles).length; i$ < len$; ++i$) {
	        style = ref$[i$];
	        el.appendChild(createStyleSheet(new URL(style, baseURL).toString()));
	      }
	      el.appendChild(createScript(new URL("js/base.js", baseURL).toString()));
	    } else {
	      el.appendChild(createStyleSheet("css/katex.css"));
	      el.appendChild(createStyleSheet(this.documentClass.constructor.css));
	      for (i$ = 0, len$ = (ref$ = this._options.styles).length; i$ < len$; ++i$) {
	        style = ref$[i$];
	        el.appendChild(createStyleSheet(style));
	      }
	      el.appendChild(createScript("js/base.js"));
	    }
	    return el;
	  };
	  /* @return DocumentFragment, the full page without stylesheets or scripts */
	  HtmlGenerator.prototype.domFragment = function(){
	    var el;
	    el = document.createDocumentFragment();
	    el.appendChild(this.create(this.block, this._dom, "body"));
	    if (this._marginpars.length) {
	      el.appendChild(this.create(this.block, this.create(this.block, this._marginpars, "marginpar"), "margin-right"));
	    }
	    return el;
	  };
	  /* write the TeX lengths and page geometry to the DOM */
	  HtmlGenerator.prototype.applyLengthsAndGeometryToDom = function(el){
	    var twp, mlwp, mrwp, mpwp;
	    el.style.setProperty('--size', this.length('@@size').value);
	    twp = 100 * this.length('textwidth').ratio(this.length('paperwidth'));
	    mlwp = 100 * this.length('oddsidemargin').add(new this.Length(1, "in")).ratio(this.length('paperwidth'));
	    mrwp = Math.max(100 - twp - mlwp, 0);
	    el.style.setProperty('--textwidth', this.round(twp) + "%");
	    el.style.setProperty('--marginleftwidth', this.round(mlwp) + "%");
	    el.style.setProperty('--marginrightwidth', this.round(mrwp) + "%");
	    if (mrwp > 0) {
	      mpwp = 100 * 100 * this.length('marginparwidth').ratio(this.length('paperwidth')) / mrwp;
	      el.style.setProperty('--marginparwidth', this.round(mpwp) + "%");
	    } else {
	      el.style.setProperty('--marginparwidth', "0px");
	    }
	    el.style.setProperty('--marginparsep', this.length('marginparsep').value);
	    el.style.setProperty('--marginparpush', this.length('marginparpush').value);
	  };
	  HtmlGenerator.prototype.createDocument = function(fs){
	    appendChildren(this._dom, fs);
	  };
	  HtmlGenerator.prototype.create = function(type, children, classes){
	    var el;
	    classes == null && (classes = "");
	    if (typeof type === "function") {
	      el = type();
	      if (el.hasAttribute("class")) {
	        classes = el.getAttribute("class") + " " + classes;
	      }
	    } else {
	      el = document.createElement(type);
	    }
	    if (this.alignment()) {
	      classes += " " + this.alignment();
	    }
	    if (this._continue && this.location().end.offset > this._continue) {
	      classes = classes + " continue";
	      this['break']();
	    }
	    if (classes.trim()) {
	      el.setAttribute("class", classes.replace(/\s+/g, ' ').trim());
	    }
	    return appendChildren(el, children);
	  };
	  HtmlGenerator.prototype.createText = function(t){
	    if (!t) {
	      return;
	    }
	    return this.addAttributes(document.createTextNode(this._options.hyphenate ? this._h.hyphenateText(t) : t));
	  };
	  HtmlGenerator.prototype.createVerbatim = function(t){
	    if (!t) {
	      return;
	    }
	    return document.createTextNode(t);
	  };
	  HtmlGenerator.prototype.createFragment = function(){
	    var children, f;
	    children = compact$1(flattenDeep$1(arguments));
	    if (arguments.length > 0 && (!children || !children.length)) {
	      return;
	    }
	    if (children.length === 1 && children[0].nodeType) {
	      return children[0];
	    }
	    f = document.createDocumentFragment();
	    return appendChildren(f, children);
	  };
	  HtmlGenerator.prototype.createImage = function(width, height, url){
	    return this.create(this.image(width, height, url));
	  };
	  HtmlGenerator.prototype.createPicture = function(size, offset, content){
	    var canvas, pic;
	    canvas = this.create(this.pictureCanvas);
	    appendChildren(canvas, content);
	    if (offset) {
	      canvas.setAttribute("style", "left:" + offset.x.mul(-1).value + ";bottom:" + offset.y.mul(-1).value);
	    }
	    pic = this.create(this.picture);
	    pic.appendChild(canvas);
	    pic.setAttribute("style", "width:" + size.x.value + ";height:" + size.y.value);
	    return pic;
	  };
	  HtmlGenerator.prototype.createVSpaceSkip = function(skip){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("class", "vspace " + skip);
	    return span;
	  };
	  HtmlGenerator.prototype.createVSpaceSkipInline = function(skip){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("class", "vspace-inline " + skip);
	    return span;
	  };
	  HtmlGenerator.prototype.createVSpace = function(length){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("class", "vspace");
	    span.setAttribute("style", "margin-bottom:" + length.value);
	    return span;
	  };
	  HtmlGenerator.prototype.createVSpaceInline = function(length){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("class", "vspace-inline");
	    span.setAttribute("style", "margin-bottom:" + length.value);
	    return span;
	  };
	  HtmlGenerator.prototype.createBreakSpace = function(length){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("class", "breakspace");
	    span.setAttribute("style", "margin-bottom:" + length.value);
	    return this.addAttributes(span);
	  };
	  HtmlGenerator.prototype.createHSpace = function(length){
	    var span;
	    span = document.createElement("span");
	    span.setAttribute("style", "margin-right:" + length.value);
	    return span;
	  };
	  HtmlGenerator.prototype.parseMath = function(math, display){
	    var f;
	    f = document.createDocumentFragment();
	    katex.render(math, f, {
	      displayMode: !!display,
	      throwOnError: false
	    });
	    return f;
	  };
	  HtmlGenerator.prototype.addAttribute = function(el, attrs){
	    if (el.hasAttribute("class")) {
	      attrs = el.getAttribute("class") + " " + attrs;
	    }
	    el.setAttribute("class", attrs);
	  };
	  HtmlGenerator.prototype.hasAttribute = function(el, attr){
	    return el.hasAttribute("class") && RegExp('\\b' + attr + '\\b').test(el.getAttribute("class"));
	  };
	  HtmlGenerator.prototype.addAttributes = function(nodes){
	    var attrs;
	    attrs = this._inlineAttributes();
	    if (!attrs) {
	      return nodes;
	    }
	    if (nodes instanceof window.Element) {
	      if (isBlockLevel(nodes)) {
	        return this.create(this.block, nodes, attrs);
	      } else {
	        return this.create(this.inline, nodes, attrs);
	      }
	    } else if (nodes instanceof window.Text || nodes instanceof window.DocumentFragment) {
	      return this.create(this.inline, nodes, attrs);
	    } else if (Array.isArray(nodes)) {
	      return nodes.map(function(node){
	        return this.create(this.inline, node, attrs);
	      });
	    } else {
	      console.warn("addAttributes got an unknown/unsupported argument:", nodes);
	    }
	    return nodes;
	  };
	  appendChildren = function(parent, children){
	    var i$, to$, i;
	    if (children) {
	      if (Array.isArray(children)) {
	        for (i$ = 0, to$ = children.length; i$ <= to$; ++i$) {
	          i = i$;
	          if (children[i] != null) {
	            parent.appendChild(children[i]);
	          }
	        }
	      } else {
	        parent.appendChild(children);
	      }
	    }
	    return parent;
	  };
	  return HtmlGenerator;
	}(exports.Generator));
	function bind$(obj, key, target){
	  return function(){ return (target || obj)[key].apply(obj, arguments) };
	}
	function extend$(sub, sup){
	  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
	  (sub.prototype = new fun).constructor = sub;
	  if (typeof sup.extended == 'function') sup.extended(sub);
	  return sub;
	}
	function import$(obj, src){
	  var own = {}.hasOwnProperty;
	  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
	  return obj;
	}

	exports.LaTeXJSComponent = null;

	// only define LaTeXJSComponent in browser context, i.e., if HTMLElement exists
	if (typeof HTMLElement != 'undefined') {
	  //  path of this script
	  let path = document.currentScript && document.currentScript.src;

	  exports.LaTeXJSComponent = class extends HTMLElement {
	    constructor() {
	      super();
	      this.shadow =  this.attachShadow({mode: 'open'});
	      // wait for some LaTeX source to appear in the upgrade-case
	      if (!this.textContent) {
	        const observer = new MutationObserver(mutationList => {
	          if (this.textContent) {
	            // no longer need to watch for change
	            // TODO: actually, we could keep watching to support editing!
	            observer.disconnect();
	            this.onContentReady();
	          }
	        });
	        observer.observe(this, {
	          childList: true
	        });
	      } else {
	        this.onContentReady();
	      }
	    }

	    async onContentReady() {
	      // empty DOM
	      while (this.shadow.lastChild) {
	        this.shadow.lastChild.remove();
	      }

	      // read options
	      const hyphenate = this.getAttribute("hyphenate") !== "false";

	      if (this.hasAttribute("baseURL"))
	        path = this.getAttribute("baseURL");

	      let CustomMacros;
	      if (this.hasAttribute("macros"))
	        CustomMacros = (await import(this.getAttribute("macros"))).default;


	      // parse
	      const generator = latexParser_pegjs.parse(this.textContent, { generator: new exports.HtmlGenerator({ hyphenate, CustomMacros }) });

	      // create DOM
	      let page = document.createElement("div");
	      page.setAttribute("class", "page");
	      page.appendChild(generator.domFragment());
	      if (this.hasAttribute("stylesheet")) {
	        const style = document.createElement("link");
	        style.type = "text/css";
	        style.rel = "stylesheet";
	        style.href = this.getAttribute("stylesheet");
	        this.shadow.appendChild(style);
	      }

	      this.shadow.appendChild(generator.stylesAndScripts(path));
	      this.shadow.appendChild(page);

	      generator.applyLengthsAndGeometryToDom(this.shadow.host);

	      // we need to add CMU fonts to the parent page (if they weren't added yet)
	      const pDoc = this.ownerDocument;
	      const links = pDoc.querySelectorAll('link');
	      const cmu = new URL("fonts/cmu.css", path);

	      for (let link of links) {
	        if (link.href == cmu.href)
	          return
	      }

	      const linkEl = pDoc.createElement("link");
	      linkEl.type = "text/css";
	      linkEl.rel = "stylesheet";
	      linkEl.href = cmu.href;

	      pDoc.head.appendChild(linkEl);
	    }

	    connectedCallback() { }
	  };
	}

	exports.SyntaxError = latexParser_pegjs.SyntaxError;
	exports.he = he;
	exports.parse = latexParser_pegjs.parse;

}));
